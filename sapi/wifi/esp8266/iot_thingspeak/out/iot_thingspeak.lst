
sapi/wifi/esp8266/iot_thingspeak/out/iot_thingspeak.elf:     file format elf32-littlearm
sapi/wifi/esp8266/iot_thingspeak/out/iot_thingspeak.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0021cd

Program Header:
0x70000001 off    0x00012f90 vaddr 0x1a002f90 paddr 0x1a002f90 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000590 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002f98 memsz 0x00002f98 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002f98 align 2**16
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f90  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  10000000  1a002f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
  6 .bss          000004c0  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002f90  1a002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200d0  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
 17 .noinit       00000000  10000590  10000590  000200d0  2**2
                  CONTENTS
 18 .debug_info   0002028d  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000047b9  00000000  00000000  0004035d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000758c  00000000  00000000  00044b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000a20  00000000  00000000  0004c0a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000009b8  00000000  00000000  0004cac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000cb1e  00000000  00000000  0004d47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000e692  00000000  00000000  00059f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002538d  00000000  00000000  0006862a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007e  00000000  00000000  0008d9b7  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  0008da35  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001a24  00000000  00000000  0008da6c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002f90 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000590 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 esp01_thingspeak.c
100000d0 l     O .bss	00000001 consolePrint
100000d1 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000008 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000ab4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000c7c l     F .text	00000002 errorOcurred
1a000c7e l     F .text	00000002 doNothing
10000010 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_tick.c
100000e0 l     O .bss	00000004 callBackFuncParams
100000e8 l     O .bss	00000008 tickCounter
100000f0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_uart.c
100000f4 l     O .bss	00000004 i.11660
1a002d84 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000f8 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_convert.c
100000fc l     O .bss	00000014 result.11328
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0013e4 l     F .text	00000010 clearInterrupt
1a0013f4 l     F .text	0000005c serveInterrupt
10000050 l     O .data	00000048 ultrasonicSensors
1a002e14 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002e18 l     O .text	00000004 InitClkStates
1a002e1c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board.c
1a00153c l     F .text	00000044 Board_LED_Init
1a001580 l     F .text	00000040 Board_TEC_Init
1a0015c0 l     F .text	00000040 Board_GPIO_Init
1a001600 l     F .text	00000038 Board_SPI_Init
1a001638 l     F .text	00000024 Board_I2C_Init
1a00165c l     F .text	00000030 Board_ADC_Init
1a002e94 l     O .text	00000008 GpioButtons
1a002e9c l     O .text	0000000c GpioLeds
1a002ea8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0016dc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0016f0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0017e8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0017fc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002ec0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001a04 l     F .text	000000a4 pll_calc_divs
1a001aa8 l     F .text	0000010c pll_get_frac
1a001bb4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001e28 l     F .text	00000022 Chip_Clock_GetDivRate
10000110 l     O .bss	00000008 audio_usb_pll_freq
1a002f14 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001fa8 l     F .text	0000002c Chip_UART_GetIndex
1a002f80 l     O .text	00000008 UART_BClock
1a002f88 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000098 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 
1a002f90 l       .bss_RAM5	00000000 __init_array_end
1a002f90 l       .bss_RAM5	00000000 __preinit_array_end
1a002f90 l       .bss_RAM5	00000000 __init_array_start
1a002f90 l       .bss_RAM5	00000000 __preinit_array_start
1a001c4c g     F .text	0000001c Chip_Clock_GetDividerSource
1a001008 g     F .text	000000c8 receiveBytesUntilReceiveStringOrTimeout
1a000d00 g     F .text	00000044 TIMER2_IRQHandler
1a000e8c g     F .text	00000014 uartRxRead
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001254 g     F .text	00000090 int64ToString
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a000f30 g     F .text	0000001e uartReadByte
1a0013a0 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0018a2 g     F .text	0000000c Chip_ADC_SetResolution
1a000e28 g     F .text	00000034 SysTick_Handler
1a002028 g     F .text	00000040 Chip_UART_SetBaud
10000004 g     O .data	00000001 uartDebug
1a00130c g     F .text	00000008 printString
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002f98 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a000300 g     F .text	0000001c esp01CleanRxBuffer
53ff56c2 g       *ABS*	00000000 __valid_user_code_checksum
1a002f98 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a000f4e g     F .text	00000080 waitForReceiveStringOrTimeout
1a000668 g     F .text	000000a8 esp01SendTPCIPDataToServer
1a000d44 g     F .text	00000044 TIMER3_IRQHandler
1a001eca g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a0022f4 g     F .text	00000000 .hidden __aeabi_uldivmod
10000590 g       .noinit	00000000 _noinit
1a0010d0 g     F .text	00000040 receiveBytesUntilReceiveStringOrTimeoutBlocking
1a00112a g     F .text	00000018 uartWriteString
1000058c g     O .bss	00000004 SystemCoreClock
1a001fd4 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001f48 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a0012fc g     F .text	00000010 printInitUart
1a0014a8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002324 g     F .text	000002cc .hidden __udivmoddi4
1a002e90 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00031c g     F .text	000001f8 esp01SendTCPIPData
1a00145a g     F .text	0000000a GPIO1_IRQHandler
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a000e5c g     F .text	00000018 uartRxReady
1a002f90 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0025f4 g     F .text	00000048 __libc_init_array
1a00018a  w    F .text	00000002 ADC1_IRQHandler
10000000 g     O .data	00000004 espResponseBufferSize
1a0016b0 g     F .text	0000002c Board_Init
1a002250 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
10000590 g       .bss	00000000 _ebss
1a000c80 g     F .text	00000040 TIMER0_IRQHandler
1a000dac g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a002194 g     F .text	00000038 Chip_I2C_SetClockRate
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a001c00 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
10000005 g     O .data	00000001 uartEsp01
1a00018c g     F .text	0000001e data_init
1a00264c g     F .text	0000001e strcat
1a000cc0 g     F .text	00000040 TIMER1_IRQHandler
1a002170 g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a001314 g     F .text	00000010 printEnter
1a001dbc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002c4c g     O .text	00000136 gpioPinsInit
1a001110 g     F .text	0000001a uartWriteByte
1a001708 g     F .text	00000012 Chip_SSP_SetClockRate
1a001464 g     F .text	0000000a GPIO2_IRQHandler
1a001ea4 g     F .text	00000026 Chip_Clock_GetBaseClock
100000d0 g       .bss	00000000 _bss
1a001870 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00267a g     F .text	00000034 strstr
1a001380 g     F .text	00000020 delayInit
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a00171a g     F .text	0000003e Chip_SSP_SetBitRate
1a001790 g     F .text	00000002 Chip_GPIO_Init
1a002ebc g     O .text	00000004 OscRateIn
1a000eb4 g     F .text	0000007c uartInit
10000590 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000ae8 g     F .text	00000194 gpioInit
1a000a94 g     F .text	00000004 sleepUntilNextInterrupt
1a0025f0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001144 g     F .text	0000001c USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a001c68 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a000814 g     F .text	00000088 esp01ShowWiFiNetworks
1a00263c g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000968 g     F .text	0000012c main
1a00018a  w    F .text	00000002 WDT_IRQHandler
1a000710 g     F .text	00000104 esp01ConnectToWifiAP
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1000000c g     O .data	00000004 DWT_CTRL
1a000e74 g     F .text	00000018 uartTxReady
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a001ed8 g     F .text	0000003c Chip_Clock_EnableOpts
1a001c84 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001794 g     F .text	00000054 fpuInit
1a001d3c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001520 g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a001348 g     F .text	00000038 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001830 g     F .text	00000040 Chip_ADC_Init
10000588 g     O .bss	00000004 g_pUsbApi
1a001470 g     F .text	00000038 Board_SetupMuxing
1a002068 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000d88 g     F .text	0000000c tickRead
10000580 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000fce g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a000ea0 g     F .text	00000014 uartTxWrite
100000d8 g     O .bss	00000008 sensorValue
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000590 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000514 g     F .text	00000154 esp01ConnectToServer
1a001758 g     F .text	00000038 Chip_SSP_Init
1a001324 g     F .text	00000024 printIntFormat
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a00168c g     F .text	00000024 Board_Debug_Init
10000118 g     O .bss	00000064 tcpIpDataToSend
100000d0 g       .data	00000000 _edata
1a002150 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a0018b0 g     F .text	00000154 Chip_SetupCoreClock
1a001450 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0021cc g     F .text	00000084 ResetISR
1a001f94 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00089c g     F .text	000000c4 esp01Init
1a0025f0  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a00266a g     F .text	00000010 strlen
1a001f14 g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a001160 g     F .text	000000f4 boardInit
1a0012e4 g     F .text	00000018 intToString
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a002254 g     F .text	00000000 .hidden __aeabi_ldivmod
1a000d94 g     F .text	00000018 tickPowerSet
1a000960 g     F .text	00000008 stopProgramError
1000017c g     O .bss	00000400 espResponseBuffer
1a001e4c g     F .text	00000058 Chip_Clock_SetBaseClock
1a000a98 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a001514 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 cd 21 00 1a 79 01 00 1a 7b 01 00 1a     .....!..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a c2 56 ff 53     }............V.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	29 0e 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     )...............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 45 11 00 1a 8b 01 00 1a 8b 01 00 1a     ....E...........
1a00006c:	8b 01 00 1a 81 0c 00 1a c1 0c 00 1a 01 0d 00 1a     ................
1a00007c:	45 0d 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     E...............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 51 14 00 1a 5b 14 00 1a 65 14 00 1a     ....Q...[...e...
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002f98 	.word	0x1a002f98
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000d0 	.word	0x000000d0
1a000120:	1a002f98 	.word	0x1a002f98
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002f98 	.word	0x1a002f98
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002f98 	.word	0x1a002f98
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002f98 	.word	0x1a002f98
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	000004c0 	.word	0x000004c0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <esp01CleanRxBuffer>:
bool_t esp01SendTCPIPData( char* strData, uint32_t strDataLen );

bool_t esp01SendTPCIPDataToServer( char* url, uint32_t port, char* strData, uint32_t strDataLen );


void esp01CleanRxBuffer( void ){
1a000300:	b508      	push	{r3, lr}
   espResponseBufferSize = ESP01_RX_BUFF_SIZE;
1a000302:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a000306:	4b03      	ldr	r3, [pc, #12]	; (1a000314 <esp01CleanRxBuffer+0x14>)
1a000308:	601a      	str	r2, [r3, #0]
   memset( espResponseBuffer, 0, espResponseBufferSize );
1a00030a:	2100      	movs	r1, #0
1a00030c:	4802      	ldr	r0, [pc, #8]	; (1a000318 <esp01CleanRxBuffer+0x18>)
1a00030e:	f002 f995 	bl	1a00263c <memset>
}
1a000312:	bd08      	pop	{r3, pc}
1a000314:	10000000 	.word	0x10000000
1a000318:	1000017c 	.word	0x1000017c

1a00031c <esp01SendTCPIPData>:



// AT+CIPSEND=39
// GET /update?key=7E7IOJ276BSDLOBA&1=69
bool_t esp01SendTCPIPData( char* strData, uint32_t strDataLen ){
1a00031c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a000320:	b085      	sub	sp, #20
1a000322:	4681      	mov	r9, r0
1a000324:	460d      	mov	r5, r1
   // "GET /update?key=7E7IOJ276BS\"DL\"OBA&1=69"
   // AT+CIPSEND=strDataLen strData --------------------------

   // Limpiar Buffer (es necesario antes de usar
   // "receiveBytesUntilReceiveStringOrTimeoutBlocking")
   esp01CleanRxBuffer();
1a000326:	f7ff ffeb 	bl	1a000300 <esp01CleanRxBuffer>

   // Envio datos TCP/IP al servidor.
   debugPrintlnString( ">>>> Envio datos TCP/IP al servidor..." );
1a00032a:	4c68      	ldr	r4, [pc, #416]	; (1a0004cc <esp01SendTCPIPData+0x1b0>)
1a00032c:	4968      	ldr	r1, [pc, #416]	; (1a0004d0 <esp01SendTCPIPData+0x1b4>)
1a00032e:	7820      	ldrb	r0, [r4, #0]
1a000330:	f000 ffec 	bl	1a00130c <printString>
1a000334:	7820      	ldrb	r0, [r4, #0]
1a000336:	f000 ffed 	bl	1a001314 <printEnter>

   debugPrintString( ">>>> AT+CIPSEND=" );
1a00033a:	4966      	ldr	r1, [pc, #408]	; (1a0004d4 <esp01SendTCPIPData+0x1b8>)
1a00033c:	7820      	ldrb	r0, [r4, #0]
1a00033e:	f000 ffe5 	bl	1a00130c <printString>
   debugPrintInt( strDataLen + 2 ); // El mas 2 es del \r\n
1a000342:	3502      	adds	r5, #2
1a000344:	2700      	movs	r7, #0
1a000346:	7820      	ldrb	r0, [r4, #0]
1a000348:	f04f 080a 	mov.w	r8, #10
1a00034c:	f8cd 8000 	str.w	r8, [sp]
1a000350:	462a      	mov	r2, r5
1a000352:	463b      	mov	r3, r7
1a000354:	f000 ffe6 	bl	1a001324 <printIntFormat>
   debugPrintString( "\r\n" );
1a000358:	4e5f      	ldr	r6, [pc, #380]	; (1a0004d8 <esp01SendTCPIPData+0x1bc>)
1a00035a:	4631      	mov	r1, r6
1a00035c:	7820      	ldrb	r0, [r4, #0]
1a00035e:	f000 ffd5 	bl	1a00130c <printString>

   consolePrintString( "AT+CIPSEND=" );
1a000362:	4c5e      	ldr	r4, [pc, #376]	; (1a0004dc <esp01SendTCPIPData+0x1c0>)
1a000364:	495e      	ldr	r1, [pc, #376]	; (1a0004e0 <esp01SendTCPIPData+0x1c4>)
1a000366:	7820      	ldrb	r0, [r4, #0]
1a000368:	f000 ffd0 	bl	1a00130c <printString>
   consolePrintInt( strDataLen + 2 ); // El mas 2 es del \r\n
1a00036c:	7820      	ldrb	r0, [r4, #0]
1a00036e:	f8cd 8000 	str.w	r8, [sp]
1a000372:	462a      	mov	r2, r5
1a000374:	463b      	mov	r3, r7
1a000376:	f000 ffd5 	bl	1a001324 <printIntFormat>
   consolePrintString( "\r\n" );
1a00037a:	4631      	mov	r1, r6
1a00037c:	7820      	ldrb	r0, [r4, #0]
1a00037e:	f000 ffc5 	bl	1a00130c <printString>

   // No poner funciones entre el envio de comando y la espera de respuesta
   retVal = receiveBytesUntilReceiveStringOrTimeoutBlocking(
1a000382:	4b58      	ldr	r3, [pc, #352]	; (1a0004e4 <esp01SendTCPIPData+0x1c8>)
1a000384:	7818      	ldrb	r0, [r3, #0]
1a000386:	f241 3288 	movw	r2, #5000	; 0x1388
1a00038a:	2300      	movs	r3, #0
1a00038c:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000390:	4b55      	ldr	r3, [pc, #340]	; (1a0004e8 <esp01SendTCPIPData+0x1cc>)
1a000392:	9300      	str	r3, [sp, #0]
1a000394:	4b55      	ldr	r3, [pc, #340]	; (1a0004ec <esp01SendTCPIPData+0x1d0>)
1a000396:	2209      	movs	r2, #9
1a000398:	4955      	ldr	r1, [pc, #340]	; (1a0004f0 <esp01SendTCPIPData+0x1d4>)
1a00039a:	f000 fe99 	bl	1a0010d0 <receiveBytesUntilReceiveStringOrTimeoutBlocking>
               uartEsp01,
               "\r\n\r\nOK\r\n>", 9,
               espResponseBuffer, &espResponseBufferSize,
               5000
            );
   if( retVal ){
1a00039e:	2800      	cmp	r0, #0
1a0003a0:	d07c      	beq.n	1a00049c <esp01SendTCPIPData+0x180>

      // Imprimo todo lo recibido
      debugPrintString( espResponseBuffer );
1a0003a2:	4c52      	ldr	r4, [pc, #328]	; (1a0004ec <esp01SendTCPIPData+0x1d0>)
1a0003a4:	4621      	mov	r1, r4
1a0003a6:	4b49      	ldr	r3, [pc, #292]	; (1a0004cc <esp01SendTCPIPData+0x1b0>)
1a0003a8:	7818      	ldrb	r0, [r3, #0]
1a0003aa:	f000 ffaf 	bl	1a00130c <printString>

      // strData\r\n --------------------------------------------

      // Limpiar Buffer (es necesario antes de usar
      // "receiveBytesUntilReceiveStringOrTimeoutBlocking")
      esp01CleanRxBuffer();
1a0003ae:	f7ff ffa7 	bl	1a000300 <esp01CleanRxBuffer>

      // Envio los datos TCP/IP ------------------
      consolePrintString( strData );
1a0003b2:	4d4a      	ldr	r5, [pc, #296]	; (1a0004dc <esp01SendTCPIPData+0x1c0>)
1a0003b4:	4649      	mov	r1, r9
1a0003b6:	7828      	ldrb	r0, [r5, #0]
1a0003b8:	f000 ffa8 	bl	1a00130c <printString>
      consolePrintString( "\r\n" );
1a0003bc:	4631      	mov	r1, r6
1a0003be:	7828      	ldrb	r0, [r5, #0]
1a0003c0:	f000 ffa4 	bl	1a00130c <printString>

      // No poner funciones entre el envio de comando y la espera de respuesta
      retVal = receiveBytesUntilReceiveStringOrTimeoutBlocking(
1a0003c4:	4b47      	ldr	r3, [pc, #284]	; (1a0004e4 <esp01SendTCPIPData+0x1c8>)
1a0003c6:	7818      	ldrb	r0, [r3, #0]
1a0003c8:	f241 3288 	movw	r2, #5000	; 0x1388
1a0003cc:	2300      	movs	r3, #0
1a0003ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0003d2:	4b45      	ldr	r3, [pc, #276]	; (1a0004e8 <esp01SendTCPIPData+0x1cc>)
1a0003d4:	9300      	str	r3, [sp, #0]
1a0003d6:	4623      	mov	r3, r4
1a0003d8:	2209      	movs	r2, #9
1a0003da:	4946      	ldr	r1, [pc, #280]	; (1a0004f4 <esp01SendTCPIPData+0x1d8>)
1a0003dc:	f000 fe78 	bl	1a0010d0 <receiveBytesUntilReceiveStringOrTimeoutBlocking>
                  uartEsp01,
                  "SEND OK\r\n", 9,
                  espResponseBuffer, &espResponseBufferSize,
                  5000
               );
      if( retVal ){
1a0003e0:	4605      	mov	r5, r0
1a0003e2:	2800      	cmp	r0, #0
1a0003e4:	d03f      	beq.n	1a000466 <esp01SendTCPIPData+0x14a>

         // Imprimo todo lo recibido
         debugPrintString( espResponseBuffer );
1a0003e6:	4621      	mov	r1, r4
1a0003e8:	4b38      	ldr	r3, [pc, #224]	; (1a0004cc <esp01SendTCPIPData+0x1b0>)
1a0003ea:	7818      	ldrb	r0, [r3, #0]
1a0003ec:	f000 ff8e 	bl	1a00130c <printString>

         // Limpiar Buffer (es necesario antes de usar
         // "receiveBytesUntilReceiveStringOrTimeoutBlocking")
         esp01CleanRxBuffer();
1a0003f0:	f7ff ff86 	bl	1a000300 <esp01CleanRxBuffer>

         // Envio los datos TCP/IP ------------------
         consolePrintlnString( strData );
1a0003f4:	4d39      	ldr	r5, [pc, #228]	; (1a0004dc <esp01SendTCPIPData+0x1c0>)
1a0003f6:	4649      	mov	r1, r9
1a0003f8:	7828      	ldrb	r0, [r5, #0]
1a0003fa:	f000 ff87 	bl	1a00130c <printString>
1a0003fe:	7828      	ldrb	r0, [r5, #0]
1a000400:	f000 ff88 	bl	1a001314 <printEnter>

         // No poner funciones entre el envio de comando y la espera de respuesta
         retVal = receiveBytesUntilReceiveStringOrTimeoutBlocking(
1a000404:	4b37      	ldr	r3, [pc, #220]	; (1a0004e4 <esp01SendTCPIPData+0x1c8>)
1a000406:	7818      	ldrb	r0, [r3, #0]
1a000408:	f241 3288 	movw	r2, #5000	; 0x1388
1a00040c:	2300      	movs	r3, #0
1a00040e:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000412:	4b35      	ldr	r3, [pc, #212]	; (1a0004e8 <esp01SendTCPIPData+0x1cc>)
1a000414:	9300      	str	r3, [sp, #0]
1a000416:	4623      	mov	r3, r4
1a000418:	2208      	movs	r2, #8
1a00041a:	4937      	ldr	r1, [pc, #220]	; (1a0004f8 <esp01SendTCPIPData+0x1dc>)
1a00041c:	f000 fe58 	bl	1a0010d0 <receiveBytesUntilReceiveStringOrTimeoutBlocking>
                     "CLOSED\r\n", 8,
                     espResponseBuffer, &espResponseBufferSize,
                     5000
                  );

         if( retVal ){
1a000420:	4605      	mov	r5, r0
1a000422:	b128      	cbz	r0, 1a000430 <esp01SendTCPIPData+0x114>

            // DATO RECIBIDOOOOOOOOOOO -----------------

            // Imprimo todo lo recibido
            debugPrintString( espResponseBuffer );
1a000424:	4621      	mov	r1, r4
1a000426:	4b29      	ldr	r3, [pc, #164]	; (1a0004cc <esp01SendTCPIPData+0x1b0>)
1a000428:	7818      	ldrb	r0, [r3, #0]
1a00042a:	f000 ff6f 	bl	1a00130c <printString>
1a00042e:	e049      	b.n	1a0004c4 <esp01SendTCPIPData+0x1a8>



         } else{
            debugPrintlnString( ">>>> Error al enviar los datos TCP/IP, en el envio del string" );
1a000430:	4c26      	ldr	r4, [pc, #152]	; (1a0004cc <esp01SendTCPIPData+0x1b0>)
1a000432:	4932      	ldr	r1, [pc, #200]	; (1a0004fc <esp01SendTCPIPData+0x1e0>)
1a000434:	7820      	ldrb	r0, [r4, #0]
1a000436:	f000 ff69 	bl	1a00130c <printString>
1a00043a:	7820      	ldrb	r0, [r4, #0]
1a00043c:	f000 ff6a 	bl	1a001314 <printEnter>
            debugPrintlnString( ">>>> \"strData\", cuando el ESP01 pone el prompt > " );
1a000440:	492f      	ldr	r1, [pc, #188]	; (1a000500 <esp01SendTCPIPData+0x1e4>)
1a000442:	7820      	ldrb	r0, [r4, #0]
1a000444:	f000 ff62 	bl	1a00130c <printString>
1a000448:	7820      	ldrb	r0, [r4, #0]
1a00044a:	f000 ff63 	bl	1a001314 <printEnter>
            debugPrintlnString( ">>>> y no se recibe la respuesta y \"CLOSED\"!!\r\n" );
1a00044e:	492d      	ldr	r1, [pc, #180]	; (1a000504 <esp01SendTCPIPData+0x1e8>)
1a000450:	7820      	ldrb	r0, [r4, #0]
1a000452:	f000 ff5b 	bl	1a00130c <printString>
1a000456:	7820      	ldrb	r0, [r4, #0]
1a000458:	f000 ff5c 	bl	1a001314 <printEnter>

            // Imprimo todo lo recibido
            debugPrintString( espResponseBuffer );
1a00045c:	4923      	ldr	r1, [pc, #140]	; (1a0004ec <esp01SendTCPIPData+0x1d0>)
1a00045e:	7820      	ldrb	r0, [r4, #0]
1a000460:	f000 ff54 	bl	1a00130c <printString>
1a000464:	e02e      	b.n	1a0004c4 <esp01SendTCPIPData+0x1a8>
         }


      } else{
         debugPrintlnString( ">>>> Error al enviar los datos TCP/IP, en el envio del string" );
1a000466:	4c19      	ldr	r4, [pc, #100]	; (1a0004cc <esp01SendTCPIPData+0x1b0>)
1a000468:	4924      	ldr	r1, [pc, #144]	; (1a0004fc <esp01SendTCPIPData+0x1e0>)
1a00046a:	7820      	ldrb	r0, [r4, #0]
1a00046c:	f000 ff4e 	bl	1a00130c <printString>
1a000470:	7820      	ldrb	r0, [r4, #0]
1a000472:	f000 ff4f 	bl	1a001314 <printEnter>
         debugPrintlnString( ">>>> \"strData\", cuando el ESP01 pone el prompt > " );
1a000476:	4922      	ldr	r1, [pc, #136]	; (1a000500 <esp01SendTCPIPData+0x1e4>)
1a000478:	7820      	ldrb	r0, [r4, #0]
1a00047a:	f000 ff47 	bl	1a00130c <printString>
1a00047e:	7820      	ldrb	r0, [r4, #0]
1a000480:	f000 ff48 	bl	1a001314 <printEnter>
         debugPrintlnString( ">>>> y no se recibe \"SEND OK\"!!\r\n" );
1a000484:	4920      	ldr	r1, [pc, #128]	; (1a000508 <esp01SendTCPIPData+0x1ec>)
1a000486:	7820      	ldrb	r0, [r4, #0]
1a000488:	f000 ff40 	bl	1a00130c <printString>
1a00048c:	7820      	ldrb	r0, [r4, #0]
1a00048e:	f000 ff41 	bl	1a001314 <printEnter>

         // Imprimo todo lo recibido
         debugPrintString( espResponseBuffer );
1a000492:	4916      	ldr	r1, [pc, #88]	; (1a0004ec <esp01SendTCPIPData+0x1d0>)
1a000494:	7820      	ldrb	r0, [r4, #0]
1a000496:	f000 ff39 	bl	1a00130c <printString>
1a00049a:	e013      	b.n	1a0004c4 <esp01SendTCPIPData+0x1a8>
1a00049c:	4605      	mov	r5, r0
      }

   } else{
      debugPrintlnString( ">>>> Error al enviar los datos TCP/IP, en comando" );
1a00049e:	4c0b      	ldr	r4, [pc, #44]	; (1a0004cc <esp01SendTCPIPData+0x1b0>)
1a0004a0:	491a      	ldr	r1, [pc, #104]	; (1a00050c <esp01SendTCPIPData+0x1f0>)
1a0004a2:	7820      	ldrb	r0, [r4, #0]
1a0004a4:	f000 ff32 	bl	1a00130c <printString>
1a0004a8:	7820      	ldrb	r0, [r4, #0]
1a0004aa:	f000 ff33 	bl	1a001314 <printEnter>
      debugPrintlnString( ">>>> \"AT+CIPSEND\"!!\r\n" );
1a0004ae:	4918      	ldr	r1, [pc, #96]	; (1a000510 <esp01SendTCPIPData+0x1f4>)
1a0004b0:	7820      	ldrb	r0, [r4, #0]
1a0004b2:	f000 ff2b 	bl	1a00130c <printString>
1a0004b6:	7820      	ldrb	r0, [r4, #0]
1a0004b8:	f000 ff2c 	bl	1a001314 <printEnter>
      // Imprimo todo lo recibido
      debugPrintString( espResponseBuffer );
1a0004bc:	490b      	ldr	r1, [pc, #44]	; (1a0004ec <esp01SendTCPIPData+0x1d0>)
1a0004be:	7820      	ldrb	r0, [r4, #0]
1a0004c0:	f000 ff24 	bl	1a00130c <printString>
   }
   return retVal;
}
1a0004c4:	4628      	mov	r0, r5
1a0004c6:	b005      	add	sp, #20
1a0004c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0004cc:	100000d1 	.word	0x100000d1
1a0004d0:	1a002924 	.word	0x1a002924
1a0004d4:	1a00294c 	.word	0x1a00294c
1a0004d8:	1a002920 	.word	0x1a002920
1a0004dc:	100000d0 	.word	0x100000d0
1a0004e0:	1a002960 	.word	0x1a002960
1a0004e4:	10000005 	.word	0x10000005
1a0004e8:	10000000 	.word	0x10000000
1a0004ec:	1000017c 	.word	0x1000017c
1a0004f0:	1a00296c 	.word	0x1a00296c
1a0004f4:	1a002978 	.word	0x1a002978
1a0004f8:	1a002984 	.word	0x1a002984
1a0004fc:	1a002990 	.word	0x1a002990
1a000500:	1a0029d0 	.word	0x1a0029d0
1a000504:	1a002a04 	.word	0x1a002a04
1a000508:	1a002a34 	.word	0x1a002a34
1a00050c:	1a002a58 	.word	0x1a002a58
1a000510:	1a002a8c 	.word	0x1a002a8c

1a000514 <esp01ConnectToServer>:


// AT+CIPSTART="TCP","api.thingspeak.com",80
bool_t esp01ConnectToServer( char* url, uint32_t port ){
1a000514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000518:	b085      	sub	sp, #20
1a00051a:	4607      	mov	r7, r0
1a00051c:	468b      	mov	fp, r1

   // AT+CIPSTART="TCP","url",port ---------------------------

   // Limpiar Buffer (es necesario antes de usar
   // "receiveBytesUntilReceiveStringOrTimeoutBlocking")
   esp01CleanRxBuffer();
1a00051e:	f7ff feef 	bl	1a000300 <esp01CleanRxBuffer>

   debugPrintString( ">>>> Conectando al servidor \"" );
1a000522:	4c42      	ldr	r4, [pc, #264]	; (1a00062c <esp01ConnectToServer+0x118>)
1a000524:	4942      	ldr	r1, [pc, #264]	; (1a000630 <esp01ConnectToServer+0x11c>)
1a000526:	7820      	ldrb	r0, [r4, #0]
1a000528:	f000 fef0 	bl	1a00130c <printString>
   debugPrintString( url );
1a00052c:	4639      	mov	r1, r7
1a00052e:	7820      	ldrb	r0, [r4, #0]
1a000530:	f000 feec 	bl	1a00130c <printString>
   debugPrintString( "\", puerto \"" );
1a000534:	493f      	ldr	r1, [pc, #252]	; (1a000634 <esp01ConnectToServer+0x120>)
1a000536:	7820      	ldrb	r0, [r4, #0]
1a000538:	f000 fee8 	bl	1a00130c <printString>
   debugPrintInt( port );
1a00053c:	2500      	movs	r5, #0
1a00053e:	7820      	ldrb	r0, [r4, #0]
1a000540:	260a      	movs	r6, #10
1a000542:	9600      	str	r6, [sp, #0]
1a000544:	465a      	mov	r2, fp
1a000546:	462b      	mov	r3, r5
1a000548:	f000 feec 	bl	1a001324 <printIntFormat>
   debugPrintlnString( "\"..." );
1a00054c:	493a      	ldr	r1, [pc, #232]	; (1a000638 <esp01ConnectToServer+0x124>)
1a00054e:	7820      	ldrb	r0, [r4, #0]
1a000550:	f000 fedc 	bl	1a00130c <printString>
1a000554:	7820      	ldrb	r0, [r4, #0]
1a000556:	f000 fedd 	bl	1a001314 <printEnter>

   debugPrintString( ">>>> AT+CIPSTART=\"TCP\",\"" );
1a00055a:	4938      	ldr	r1, [pc, #224]	; (1a00063c <esp01ConnectToServer+0x128>)
1a00055c:	7820      	ldrb	r0, [r4, #0]
1a00055e:	f000 fed5 	bl	1a00130c <printString>
   debugPrintString( url );
1a000562:	4639      	mov	r1, r7
1a000564:	7820      	ldrb	r0, [r4, #0]
1a000566:	f000 fed1 	bl	1a00130c <printString>
   debugPrintString( "\"," );
1a00056a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1a000660 <esp01ConnectToServer+0x14c>
1a00056e:	4651      	mov	r1, sl
1a000570:	7820      	ldrb	r0, [r4, #0]
1a000572:	f000 fecb 	bl	1a00130c <printString>
   debugPrintInt( port );
1a000576:	7820      	ldrb	r0, [r4, #0]
1a000578:	9600      	str	r6, [sp, #0]
1a00057a:	465a      	mov	r2, fp
1a00057c:	462b      	mov	r3, r5
1a00057e:	f000 fed1 	bl	1a001324 <printIntFormat>
   debugPrintString( "\r\n" );
1a000582:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1a000664 <esp01ConnectToServer+0x150>
1a000586:	4649      	mov	r1, r9
1a000588:	7820      	ldrb	r0, [r4, #0]
1a00058a:	f000 febf 	bl	1a00130c <printString>

   consolePrintString( "AT+CIPSTART=\"TCP\",\"" );
1a00058e:	4c2c      	ldr	r4, [pc, #176]	; (1a000640 <esp01ConnectToServer+0x12c>)
1a000590:	492c      	ldr	r1, [pc, #176]	; (1a000644 <esp01ConnectToServer+0x130>)
1a000592:	7820      	ldrb	r0, [r4, #0]
1a000594:	f000 feba 	bl	1a00130c <printString>
   consolePrintString( url );
1a000598:	4639      	mov	r1, r7
1a00059a:	7820      	ldrb	r0, [r4, #0]
1a00059c:	f000 feb6 	bl	1a00130c <printString>
   consolePrintString( "\"," );
1a0005a0:	4651      	mov	r1, sl
1a0005a2:	7820      	ldrb	r0, [r4, #0]
1a0005a4:	f000 feb2 	bl	1a00130c <printString>
   consolePrintInt( port );
1a0005a8:	7820      	ldrb	r0, [r4, #0]
1a0005aa:	9600      	str	r6, [sp, #0]
1a0005ac:	465a      	mov	r2, fp
1a0005ae:	462b      	mov	r3, r5
1a0005b0:	f000 feb8 	bl	1a001324 <printIntFormat>
   consolePrintString( "\r\n" );
1a0005b4:	4649      	mov	r1, r9
1a0005b6:	7820      	ldrb	r0, [r4, #0]
1a0005b8:	f000 fea8 	bl	1a00130c <printString>

   // No poner funciones entre el envio de comando y la espera de respuesta
   retVal = receiveBytesUntilReceiveStringOrTimeoutBlocking(
1a0005bc:	4b22      	ldr	r3, [pc, #136]	; (1a000648 <esp01ConnectToServer+0x134>)
1a0005be:	7818      	ldrb	r0, [r3, #0]
1a0005c0:	f242 7210 	movw	r2, #10000	; 0x2710
1a0005c4:	2300      	movs	r3, #0
1a0005c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0005ca:	4b20      	ldr	r3, [pc, #128]	; (1a00064c <esp01ConnectToServer+0x138>)
1a0005cc:	9300      	str	r3, [sp, #0]
1a0005ce:	4b20      	ldr	r3, [pc, #128]	; (1a000650 <esp01ConnectToServer+0x13c>)
1a0005d0:	220f      	movs	r2, #15
1a0005d2:	4920      	ldr	r1, [pc, #128]	; (1a000654 <esp01ConnectToServer+0x140>)
1a0005d4:	f000 fd7c 	bl	1a0010d0 <receiveBytesUntilReceiveStringOrTimeoutBlocking>
               uartEsp01,
               "CONNECT\r\n\r\nOK\r\n", 15,
               espResponseBuffer, &espResponseBufferSize,
               10000
            );
   if( !retVal ){
1a0005d8:	4680      	mov	r8, r0
1a0005da:	b140      	cbz	r0, 1a0005ee <esp01ConnectToServer+0xda>
      debugPrintString( "\"," );
      debugPrintInt( port );
      debugPrintlnString( "\"!!\r\n" );
   }
   // Imprimo todo lo recibido
   debugPrintString( espResponseBuffer );
1a0005dc:	491c      	ldr	r1, [pc, #112]	; (1a000650 <esp01ConnectToServer+0x13c>)
1a0005de:	4b13      	ldr	r3, [pc, #76]	; (1a00062c <esp01ConnectToServer+0x118>)
1a0005e0:	7818      	ldrb	r0, [r3, #0]
1a0005e2:	f000 fe93 	bl	1a00130c <printString>
   return retVal;
}
1a0005e6:	4640      	mov	r0, r8
1a0005e8:	b005      	add	sp, #20
1a0005ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      debugPrintString( ">>>>    Error: No se puede conectar al servidor: \"" );
1a0005ee:	4c0f      	ldr	r4, [pc, #60]	; (1a00062c <esp01ConnectToServer+0x118>)
1a0005f0:	4919      	ldr	r1, [pc, #100]	; (1a000658 <esp01ConnectToServer+0x144>)
1a0005f2:	7820      	ldrb	r0, [r4, #0]
1a0005f4:	f000 fe8a 	bl	1a00130c <printString>
      debugPrintlnString( url );
1a0005f8:	4639      	mov	r1, r7
1a0005fa:	7820      	ldrb	r0, [r4, #0]
1a0005fc:	f000 fe86 	bl	1a00130c <printString>
1a000600:	7820      	ldrb	r0, [r4, #0]
1a000602:	f000 fe87 	bl	1a001314 <printEnter>
      debugPrintString( "\"," );
1a000606:	4651      	mov	r1, sl
1a000608:	7820      	ldrb	r0, [r4, #0]
1a00060a:	f000 fe7f 	bl	1a00130c <printString>
      debugPrintInt( port );
1a00060e:	7820      	ldrb	r0, [r4, #0]
1a000610:	9600      	str	r6, [sp, #0]
1a000612:	465a      	mov	r2, fp
1a000614:	462b      	mov	r3, r5
1a000616:	f000 fe85 	bl	1a001324 <printIntFormat>
      debugPrintlnString( "\"!!\r\n" );
1a00061a:	4910      	ldr	r1, [pc, #64]	; (1a00065c <esp01ConnectToServer+0x148>)
1a00061c:	7820      	ldrb	r0, [r4, #0]
1a00061e:	f000 fe75 	bl	1a00130c <printString>
1a000622:	7820      	ldrb	r0, [r4, #0]
1a000624:	f000 fe76 	bl	1a001314 <printEnter>
1a000628:	e7d8      	b.n	1a0005dc <esp01ConnectToServer+0xc8>
1a00062a:	bf00      	nop
1a00062c:	100000d1 	.word	0x100000d1
1a000630:	1a0026b0 	.word	0x1a0026b0
1a000634:	1a0026d0 	.word	0x1a0026d0
1a000638:	1a0028b8 	.word	0x1a0028b8
1a00063c:	1a0026dc 	.word	0x1a0026dc
1a000640:	100000d0 	.word	0x100000d0
1a000644:	1a0026fc 	.word	0x1a0026fc
1a000648:	10000005 	.word	0x10000005
1a00064c:	10000000 	.word	0x10000000
1a000650:	1000017c 	.word	0x1000017c
1a000654:	1a002710 	.word	0x1a002710
1a000658:	1a002720 	.word	0x1a002720
1a00065c:	1a002a9c 	.word	0x1a002a9c
1a000660:	1a0026f8 	.word	0x1a0026f8
1a000664:	1a002920 	.word	0x1a002920

1a000668 <esp01SendTPCIPDataToServer>:
bool_t esp01SendTPCIPDataToServer( char* url, uint32_t port, char* strData, uint32_t strDataLen ){
1a000668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00066c:	b082      	sub	sp, #8
1a00066e:	4605      	mov	r5, r0
1a000670:	460e      	mov	r6, r1
1a000672:	4617      	mov	r7, r2
1a000674:	4698      	mov	r8, r3
   debugPrintlnString( ">>>> ===========================================================" );
1a000676:	4c20      	ldr	r4, [pc, #128]	; (1a0006f8 <esp01SendTPCIPDataToServer+0x90>)
1a000678:	4920      	ldr	r1, [pc, #128]	; (1a0006fc <esp01SendTPCIPDataToServer+0x94>)
1a00067a:	7820      	ldrb	r0, [r4, #0]
1a00067c:	f000 fe46 	bl	1a00130c <printString>
1a000680:	7820      	ldrb	r0, [r4, #0]
1a000682:	f000 fe47 	bl	1a001314 <printEnter>
   debugPrintString( ">>>> Enviar dato: \"" );
1a000686:	491e      	ldr	r1, [pc, #120]	; (1a000700 <esp01SendTPCIPDataToServer+0x98>)
1a000688:	7820      	ldrb	r0, [r4, #0]
1a00068a:	f000 fe3f 	bl	1a00130c <printString>
   debugPrintString( strData );
1a00068e:	4639      	mov	r1, r7
1a000690:	7820      	ldrb	r0, [r4, #0]
1a000692:	f000 fe3b 	bl	1a00130c <printString>
   debugPrintString( "\"\r\n>>>> al servidor \"" );
1a000696:	491b      	ldr	r1, [pc, #108]	; (1a000704 <esp01SendTPCIPDataToServer+0x9c>)
1a000698:	7820      	ldrb	r0, [r4, #0]
1a00069a:	f000 fe37 	bl	1a00130c <printString>
   debugPrintString( url );
1a00069e:	4629      	mov	r1, r5
1a0006a0:	7820      	ldrb	r0, [r4, #0]
1a0006a2:	f000 fe33 	bl	1a00130c <printString>
   debugPrintString( "\", puerto \"" );
1a0006a6:	4918      	ldr	r1, [pc, #96]	; (1a000708 <esp01SendTPCIPDataToServer+0xa0>)
1a0006a8:	7820      	ldrb	r0, [r4, #0]
1a0006aa:	f000 fe2f 	bl	1a00130c <printString>
   debugPrintInt( port );
1a0006ae:	7820      	ldrb	r0, [r4, #0]
1a0006b0:	230a      	movs	r3, #10
1a0006b2:	9300      	str	r3, [sp, #0]
1a0006b4:	4632      	mov	r2, r6
1a0006b6:	2300      	movs	r3, #0
1a0006b8:	f000 fe34 	bl	1a001324 <printIntFormat>
   debugPrintlnString( "\"..." );
1a0006bc:	4913      	ldr	r1, [pc, #76]	; (1a00070c <esp01SendTPCIPDataToServer+0xa4>)
1a0006be:	7820      	ldrb	r0, [r4, #0]
1a0006c0:	f000 fe24 	bl	1a00130c <printString>
1a0006c4:	7820      	ldrb	r0, [r4, #0]
1a0006c6:	f000 fe25 	bl	1a001314 <printEnter>
   debugPrintEnter();
1a0006ca:	7820      	ldrb	r0, [r4, #0]
1a0006cc:	f000 fe22 	bl	1a001314 <printEnter>
   if( !esp01ConnectToServer( url, port ) )
1a0006d0:	4631      	mov	r1, r6
1a0006d2:	4628      	mov	r0, r5
1a0006d4:	f7ff ff1e 	bl	1a000514 <esp01ConnectToServer>
1a0006d8:	4603      	mov	r3, r0
1a0006da:	b918      	cbnz	r0, 1a0006e4 <esp01SendTPCIPDataToServer+0x7c>
}
1a0006dc:	4618      	mov	r0, r3
1a0006de:	b002      	add	sp, #8
1a0006e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   if( !esp01SendTCPIPData( strData, strDataLen ) )
1a0006e4:	4641      	mov	r1, r8
1a0006e6:	4638      	mov	r0, r7
1a0006e8:	f7ff fe18 	bl	1a00031c <esp01SendTCPIPData>
1a0006ec:	4603      	mov	r3, r0
1a0006ee:	2800      	cmp	r0, #0
1a0006f0:	d0f4      	beq.n	1a0006dc <esp01SendTPCIPDataToServer+0x74>
   return TRUE;
1a0006f2:	2301      	movs	r3, #1
1a0006f4:	e7f2      	b.n	1a0006dc <esp01SendTPCIPDataToServer+0x74>
1a0006f6:	bf00      	nop
1a0006f8:	100000d1 	.word	0x100000d1
1a0006fc:	1a002aa4 	.word	0x1a002aa4
1a000700:	1a002ae8 	.word	0x1a002ae8
1a000704:	1a002afc 	.word	0x1a002afc
1a000708:	1a0026d0 	.word	0x1a0026d0
1a00070c:	1a0028b8 	.word	0x1a0028b8

1a000710 <esp01ConnectToWifiAP>:


bool_t esp01ConnectToWifiAP( char* wiFiSSID, char* wiFiPassword ){
1a000710:	b570      	push	{r4, r5, r6, lr}
1a000712:	b084      	sub	sp, #16
1a000714:	4605      	mov	r5, r0
1a000716:	460e      	mov	r6, r1

   // AT+CWJAP="wiFiSSID","wiFiPassword" ---------------------

   // Limpiar Buffer (es necesario antes de usar
   // "receiveBytesUntilReceiveStringOrTimeoutBlocking")
   esp01CleanRxBuffer();
1a000718:	f7ff fdf2 	bl	1a000300 <esp01CleanRxBuffer>

   // Conectar a la red Wi-Fi. se envia AT+CWJAP="wiFiSSID","wiFiPassword"
   debugPrintString( ">>>> Conectando a la red Wi-Fi: \"" );
1a00071c:	4c2f      	ldr	r4, [pc, #188]	; (1a0007dc <esp01ConnectToWifiAP+0xcc>)
1a00071e:	4930      	ldr	r1, [pc, #192]	; (1a0007e0 <esp01ConnectToWifiAP+0xd0>)
1a000720:	7820      	ldrb	r0, [r4, #0]
1a000722:	f000 fdf3 	bl	1a00130c <printString>
   debugPrintString( wiFiSSID );
1a000726:	4629      	mov	r1, r5
1a000728:	7820      	ldrb	r0, [r4, #0]
1a00072a:	f000 fdef 	bl	1a00130c <printString>
   debugPrintlnString( "\"..." );
1a00072e:	492d      	ldr	r1, [pc, #180]	; (1a0007e4 <esp01ConnectToWifiAP+0xd4>)
1a000730:	7820      	ldrb	r0, [r4, #0]
1a000732:	f000 fdeb 	bl	1a00130c <printString>
1a000736:	7820      	ldrb	r0, [r4, #0]
1a000738:	f000 fdec 	bl	1a001314 <printEnter>

   consolePrintString( "AT+CWJAP=\"" );
1a00073c:	4c2a      	ldr	r4, [pc, #168]	; (1a0007e8 <esp01ConnectToWifiAP+0xd8>)
1a00073e:	492b      	ldr	r1, [pc, #172]	; (1a0007ec <esp01ConnectToWifiAP+0xdc>)
1a000740:	7820      	ldrb	r0, [r4, #0]
1a000742:	f000 fde3 	bl	1a00130c <printString>
   consolePrintString( wiFiSSID );
1a000746:	4629      	mov	r1, r5
1a000748:	7820      	ldrb	r0, [r4, #0]
1a00074a:	f000 fddf 	bl	1a00130c <printString>
   consolePrintString( "\",\"" );
1a00074e:	4928      	ldr	r1, [pc, #160]	; (1a0007f0 <esp01ConnectToWifiAP+0xe0>)
1a000750:	7820      	ldrb	r0, [r4, #0]
1a000752:	f000 fddb 	bl	1a00130c <printString>
   consolePrintString( wiFiPassword );
1a000756:	4631      	mov	r1, r6
1a000758:	7820      	ldrb	r0, [r4, #0]
1a00075a:	f000 fdd7 	bl	1a00130c <printString>
   consolePrintString( "\"\r\n" );
1a00075e:	4925      	ldr	r1, [pc, #148]	; (1a0007f4 <esp01ConnectToWifiAP+0xe4>)
1a000760:	7820      	ldrb	r0, [r4, #0]
1a000762:	f000 fdd3 	bl	1a00130c <printString>

   // No poner funciones entre el envio de comando y la espera de respuesta
   retVal = receiveBytesUntilReceiveStringOrTimeoutBlocking(
1a000766:	4b24      	ldr	r3, [pc, #144]	; (1a0007f8 <esp01ConnectToWifiAP+0xe8>)
1a000768:	7818      	ldrb	r0, [r3, #0]
1a00076a:	f242 7210 	movw	r2, #10000	; 0x2710
1a00076e:	2300      	movs	r3, #0
1a000770:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000774:	4b21      	ldr	r3, [pc, #132]	; (1a0007fc <esp01ConnectToWifiAP+0xec>)
1a000776:	9300      	str	r3, [sp, #0]
1a000778:	4b21      	ldr	r3, [pc, #132]	; (1a000800 <esp01ConnectToWifiAP+0xf0>)
1a00077a:	2223      	movs	r2, #35	; 0x23
1a00077c:	4921      	ldr	r1, [pc, #132]	; (1a000804 <esp01ConnectToWifiAP+0xf4>)
1a00077e:	f000 fca7 	bl	1a0010d0 <receiveBytesUntilReceiveStringOrTimeoutBlocking>
               uartEsp01,
               "WIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n", 35,
               espResponseBuffer, &espResponseBufferSize,
               10000
            );
   if( retVal ){
1a000782:	4606      	mov	r6, r0
1a000784:	b190      	cbz	r0, 1a0007ac <esp01ConnectToWifiAP+0x9c>
      // WIFI CONNECTED
      // WIFI GOT IP
      //
      // OK

      index = strstr( (const char*)espResponseBuffer, (const char*)"WIFI CONNECTED" );
1a000786:	4920      	ldr	r1, [pc, #128]	; (1a000808 <esp01ConnectToWifiAP+0xf8>)
1a000788:	481d      	ldr	r0, [pc, #116]	; (1a000800 <esp01ConnectToWifiAP+0xf0>)
1a00078a:	f001 ff76 	bl	1a00267a <strstr>
      if( index != 0 ){
1a00078e:	4601      	mov	r1, r0
1a000790:	b130      	cbz	r0, 1a0007a0 <esp01ConnectToWifiAP+0x90>
         // Muestro desde " WIFI CONNECTED" en adelante
         debugPrintString( index );
1a000792:	4b12      	ldr	r3, [pc, #72]	; (1a0007dc <esp01ConnectToWifiAP+0xcc>)
1a000794:	7818      	ldrb	r0, [r3, #0]
1a000796:	f000 fdb9 	bl	1a00130c <printString>

      // Muestro todo en caso de error
      debugPrintString( espResponseBuffer );
   }
   return retVal;
}
1a00079a:	4630      	mov	r0, r6
1a00079c:	b004      	add	sp, #16
1a00079e:	bd70      	pop	{r4, r5, r6, pc}
         debugPrintString( espResponseBuffer );
1a0007a0:	4917      	ldr	r1, [pc, #92]	; (1a000800 <esp01ConnectToWifiAP+0xf0>)
1a0007a2:	4b0e      	ldr	r3, [pc, #56]	; (1a0007dc <esp01ConnectToWifiAP+0xcc>)
1a0007a4:	7818      	ldrb	r0, [r3, #0]
1a0007a6:	f000 fdb1 	bl	1a00130c <printString>
1a0007aa:	e7f6      	b.n	1a00079a <esp01ConnectToWifiAP+0x8a>
      debugPrintString( ">>>>    Error: No se puede conectar a la red: \"" );
1a0007ac:	4c0b      	ldr	r4, [pc, #44]	; (1a0007dc <esp01ConnectToWifiAP+0xcc>)
1a0007ae:	4917      	ldr	r1, [pc, #92]	; (1a00080c <esp01ConnectToWifiAP+0xfc>)
1a0007b0:	7820      	ldrb	r0, [r4, #0]
1a0007b2:	f000 fdab 	bl	1a00130c <printString>
      debugPrintlnString( wiFiSSID );
1a0007b6:	4629      	mov	r1, r5
1a0007b8:	7820      	ldrb	r0, [r4, #0]
1a0007ba:	f000 fda7 	bl	1a00130c <printString>
1a0007be:	7820      	ldrb	r0, [r4, #0]
1a0007c0:	f000 fda8 	bl	1a001314 <printEnter>
      debugPrintlnString( "\"!!\r\n" );
1a0007c4:	4912      	ldr	r1, [pc, #72]	; (1a000810 <esp01ConnectToWifiAP+0x100>)
1a0007c6:	7820      	ldrb	r0, [r4, #0]
1a0007c8:	f000 fda0 	bl	1a00130c <printString>
1a0007cc:	7820      	ldrb	r0, [r4, #0]
1a0007ce:	f000 fda1 	bl	1a001314 <printEnter>
      debugPrintString( espResponseBuffer );
1a0007d2:	490b      	ldr	r1, [pc, #44]	; (1a000800 <esp01ConnectToWifiAP+0xf0>)
1a0007d4:	7820      	ldrb	r0, [r4, #0]
1a0007d6:	f000 fd99 	bl	1a00130c <printString>
1a0007da:	e7de      	b.n	1a00079a <esp01ConnectToWifiAP+0x8a>
1a0007dc:	100000d1 	.word	0x100000d1
1a0007e0:	1a002754 	.word	0x1a002754
1a0007e4:	1a0028b8 	.word	0x1a0028b8
1a0007e8:	100000d0 	.word	0x100000d0
1a0007ec:	1a002778 	.word	0x1a002778
1a0007f0:	1a00270c 	.word	0x1a00270c
1a0007f4:	1a002784 	.word	0x1a002784
1a0007f8:	10000005 	.word	0x10000005
1a0007fc:	10000000 	.word	0x10000000
1a000800:	1000017c 	.word	0x1000017c
1a000804:	1a002788 	.word	0x1a002788
1a000808:	1a0027ac 	.word	0x1a0027ac
1a00080c:	1a0027bc 	.word	0x1a0027bc
1a000810:	1a002a9c 	.word	0x1a002a9c

1a000814 <esp01ShowWiFiNetworks>:


bool_t esp01ShowWiFiNetworks( void ){
1a000814:	b530      	push	{r4, r5, lr}
1a000816:	b085      	sub	sp, #20

   // AT+CWLAP -----------------------------------------------

   // Limpiar Buffer (es necesario antes de usar
   // "receiveBytesUntilReceiveStringOrTimeoutBlocking")
   esp01CleanRxBuffer();
1a000818:	f7ff fd72 	bl	1a000300 <esp01CleanRxBuffer>

   // Mostrar lista de AP enviando "AT+CWLAP"
   debugPrintlnString( ">>>> Consultando las redes Wi-Fi disponibles.\r\n>>>>    Enviando \"AT+CWLAP\"..." );
1a00081c:	4c16      	ldr	r4, [pc, #88]	; (1a000878 <esp01ShowWiFiNetworks+0x64>)
1a00081e:	4917      	ldr	r1, [pc, #92]	; (1a00087c <esp01ShowWiFiNetworks+0x68>)
1a000820:	7820      	ldrb	r0, [r4, #0]
1a000822:	f000 fd73 	bl	1a00130c <printString>
1a000826:	7820      	ldrb	r0, [r4, #0]
1a000828:	f000 fd74 	bl	1a001314 <printEnter>
   consolePrintString( "AT+CWLAP\r\n" );
1a00082c:	4914      	ldr	r1, [pc, #80]	; (1a000880 <esp01ShowWiFiNetworks+0x6c>)
1a00082e:	4b15      	ldr	r3, [pc, #84]	; (1a000884 <esp01ShowWiFiNetworks+0x70>)
1a000830:	7818      	ldrb	r0, [r3, #0]
1a000832:	f000 fd6b 	bl	1a00130c <printString>
   // No poner funciones entre el envio de comando y la espera de respuesta
   retVal = receiveBytesUntilReceiveStringOrTimeoutBlocking(
1a000836:	4b14      	ldr	r3, [pc, #80]	; (1a000888 <esp01ShowWiFiNetworks+0x74>)
1a000838:	7818      	ldrb	r0, [r3, #0]
1a00083a:	f644 6220 	movw	r2, #20000	; 0x4e20
1a00083e:	2300      	movs	r3, #0
1a000840:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000844:	4b11      	ldr	r3, [pc, #68]	; (1a00088c <esp01ShowWiFiNetworks+0x78>)
1a000846:	9300      	str	r3, [sp, #0]
1a000848:	4b11      	ldr	r3, [pc, #68]	; (1a000890 <esp01ShowWiFiNetworks+0x7c>)
1a00084a:	2209      	movs	r2, #9
1a00084c:	4911      	ldr	r1, [pc, #68]	; (1a000894 <esp01ShowWiFiNetworks+0x80>)
1a00084e:	f000 fc3f 	bl	1a0010d0 <receiveBytesUntilReceiveStringOrTimeoutBlocking>
               uartEsp01,
               ")\r\n\r\nOK\r\n", 9,
               espResponseBuffer, &espResponseBufferSize,
               20000
            );
   if( !retVal ){
1a000852:	4604      	mov	r4, r0
1a000854:	b138      	cbz	r0, 1a000866 <esp01ShowWiFiNetworks+0x52>
      debugPrintlnString( ">>>>    Error: No se encuentran redes disponibles!!\r\n" );
   }
   // Imprimo todo lo recibido
   debugPrintString( espResponseBuffer );
1a000856:	490e      	ldr	r1, [pc, #56]	; (1a000890 <esp01ShowWiFiNetworks+0x7c>)
1a000858:	4b07      	ldr	r3, [pc, #28]	; (1a000878 <esp01ShowWiFiNetworks+0x64>)
1a00085a:	7818      	ldrb	r0, [r3, #0]
1a00085c:	f000 fd56 	bl	1a00130c <printString>
   return retVal;
}
1a000860:	4620      	mov	r0, r4
1a000862:	b005      	add	sp, #20
1a000864:	bd30      	pop	{r4, r5, pc}
      debugPrintlnString( ">>>>    Error: No se encuentran redes disponibles!!\r\n" );
1a000866:	4d04      	ldr	r5, [pc, #16]	; (1a000878 <esp01ShowWiFiNetworks+0x64>)
1a000868:	490b      	ldr	r1, [pc, #44]	; (1a000898 <esp01ShowWiFiNetworks+0x84>)
1a00086a:	7828      	ldrb	r0, [r5, #0]
1a00086c:	f000 fd4e 	bl	1a00130c <printString>
1a000870:	7828      	ldrb	r0, [r5, #0]
1a000872:	f000 fd4f 	bl	1a001314 <printEnter>
1a000876:	e7ee      	b.n	1a000856 <esp01ShowWiFiNetworks+0x42>
1a000878:	100000d1 	.word	0x100000d1
1a00087c:	1a002b14 	.word	0x1a002b14
1a000880:	1a002b64 	.word	0x1a002b64
1a000884:	100000d0 	.word	0x100000d0
1a000888:	10000005 	.word	0x10000005
1a00088c:	10000000 	.word	0x10000000
1a000890:	1000017c 	.word	0x1000017c
1a000894:	1a002b70 	.word	0x1a002b70
1a000898:	1a002b7c 	.word	0x1a002b7c

1a00089c <esp01Init>:


bool_t esp01Init( uartMap_t uartForEsp, uartMap_t uartForDebug, uint32_t baudRate ){
1a00089c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00089e:	b083      	sub	sp, #12
1a0008a0:	4617      	mov	r7, r2

   bool_t retVal = FALSE;

   uartEsp01 = uartForEsp;
1a0008a2:	4d25      	ldr	r5, [pc, #148]	; (1a000938 <esp01Init+0x9c>)
1a0008a4:	7028      	strb	r0, [r5, #0]
   uartDebug = uartForDebug;
1a0008a6:	4b25      	ldr	r3, [pc, #148]	; (1a00093c <esp01Init+0xa0>)
1a0008a8:	7019      	strb	r1, [r3, #0]

   // Initialize HW ------------------------------------------

   // Inicializar UART_USB como salida de debug
   debugPrintConfigUart( uartDebug, baudRate );
1a0008aa:	4c25      	ldr	r4, [pc, #148]	; (1a000940 <esp01Init+0xa4>)
1a0008ac:	4620      	mov	r0, r4
1a0008ae:	f000 fd25 	bl	1a0012fc <printInitUart>
   debugPrintlnString( ">>>> UART_USB configurada como salida de debug." );
1a0008b2:	4924      	ldr	r1, [pc, #144]	; (1a000944 <esp01Init+0xa8>)
1a0008b4:	7820      	ldrb	r0, [r4, #0]
1a0008b6:	f000 fd29 	bl	1a00130c <printString>
1a0008ba:	7820      	ldrb	r0, [r4, #0]
1a0008bc:	f000 fd2a 	bl	1a001314 <printEnter>

   // Inicializr otra UART donde se conecta el ESP01 como salida de consola
   consolePrintConfigUart( uartEsp01, baudRate );
1a0008c0:	4e21      	ldr	r6, [pc, #132]	; (1a000948 <esp01Init+0xac>)
1a0008c2:	463a      	mov	r2, r7
1a0008c4:	7829      	ldrb	r1, [r5, #0]
1a0008c6:	4630      	mov	r0, r6
1a0008c8:	f000 fd18 	bl	1a0012fc <printInitUart>
   debugPrintlnString( ">>>> UART_ESP (donde se conecta el ESP01), \r\n>>>> configurada como salida de consola.\r\n" );
1a0008cc:	491f      	ldr	r1, [pc, #124]	; (1a00094c <esp01Init+0xb0>)
1a0008ce:	7820      	ldrb	r0, [r4, #0]
1a0008d0:	f000 fd1c 	bl	1a00130c <printString>
1a0008d4:	7820      	ldrb	r0, [r4, #0]
1a0008d6:	f000 fd1d 	bl	1a001314 <printEnter>

   // AT -----------------------------------------------------

   // Chequear si se encuentra el modulo Wi-Fi enviandole "AT"
   debugPrintlnString( ">>>> Chequear si se encuentra el modulo Wi-Fi.\r\n>>>>    Enviando \"AT\"..." );
1a0008da:	491d      	ldr	r1, [pc, #116]	; (1a000950 <esp01Init+0xb4>)
1a0008dc:	7820      	ldrb	r0, [r4, #0]
1a0008de:	f000 fd15 	bl	1a00130c <printString>
1a0008e2:	7820      	ldrb	r0, [r4, #0]
1a0008e4:	f000 fd16 	bl	1a001314 <printEnter>
   consolePrintString( "AT\r\n" );
1a0008e8:	4c1a      	ldr	r4, [pc, #104]	; (1a000954 <esp01Init+0xb8>)
1a0008ea:	4621      	mov	r1, r4
1a0008ec:	7830      	ldrb	r0, [r6, #0]
1a0008ee:	f000 fd0d 	bl	1a00130c <printString>
   // No poner funciones entre el envio de comando y la espera de respuesta
   retVal = waitForReceiveStringOrTimeoutBlocking( uartEsp01, "AT\r\n", 4, 500 );
1a0008f2:	7828      	ldrb	r0, [r5, #0]
1a0008f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a0008f8:	2300      	movs	r3, #0
1a0008fa:	e9cd 2300 	strd	r2, r3, [sp]
1a0008fe:	2204      	movs	r2, #4
1a000900:	4621      	mov	r1, r4
1a000902:	f000 fb64 	bl	1a000fce <waitForReceiveStringOrTimeoutBlocking>
   if( retVal ){
1a000906:	b958      	cbnz	r0, 1a000920 <esp01Init+0x84>
1a000908:	4604      	mov	r4, r0
      debugPrintlnString( ">>>>    Modulo ESP01 Wi-Fi detectado.\r\n" );
   } else{
      debugPrintlnString( ">>>>    Error: Modulo ESP01 Wi-Fi No detectado!!\r\n" );
1a00090a:	4d0d      	ldr	r5, [pc, #52]	; (1a000940 <esp01Init+0xa4>)
1a00090c:	4912      	ldr	r1, [pc, #72]	; (1a000958 <esp01Init+0xbc>)
1a00090e:	7828      	ldrb	r0, [r5, #0]
1a000910:	f000 fcfc 	bl	1a00130c <printString>
1a000914:	7828      	ldrb	r0, [r5, #0]
1a000916:	f000 fcfd 	bl	1a001314 <printEnter>
      return retVal;
   }

   // AT+CWLAP -----------------------------------------------
   return esp01ShowWiFiNetworks();
}
1a00091a:	4620      	mov	r0, r4
1a00091c:	b003      	add	sp, #12
1a00091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      debugPrintlnString( ">>>>    Modulo ESP01 Wi-Fi detectado.\r\n" );
1a000920:	4c07      	ldr	r4, [pc, #28]	; (1a000940 <esp01Init+0xa4>)
1a000922:	490e      	ldr	r1, [pc, #56]	; (1a00095c <esp01Init+0xc0>)
1a000924:	7820      	ldrb	r0, [r4, #0]
1a000926:	f000 fcf1 	bl	1a00130c <printString>
1a00092a:	7820      	ldrb	r0, [r4, #0]
1a00092c:	f000 fcf2 	bl	1a001314 <printEnter>
   return esp01ShowWiFiNetworks();
1a000930:	f7ff ff70 	bl	1a000814 <esp01ShowWiFiNetworks>
1a000934:	4604      	mov	r4, r0
1a000936:	e7f0      	b.n	1a00091a <esp01Init+0x7e>
1a000938:	10000005 	.word	0x10000005
1a00093c:	10000004 	.word	0x10000004
1a000940:	100000d1 	.word	0x100000d1
1a000944:	1a0027ec 	.word	0x1a0027ec
1a000948:	100000d0 	.word	0x100000d0
1a00094c:	1a00281c 	.word	0x1a00281c
1a000950:	1a002874 	.word	0x1a002874
1a000954:	1a0028c0 	.word	0x1a0028c0
1a000958:	1a0028f0 	.word	0x1a0028f0
1a00095c:	1a0028c8 	.word	0x1a0028c8

1a000960 <stopProgramError>:


void stopProgramError( void ){
1a000960:	b508      	push	{r3, lr}
   // Si hay un error grave me quedo en un bucle infinito
   // en modo bajo consumo
   while( TRUE ){
      sleepUntilNextInterrupt();
1a000962:	f000 f897 	bl	1a000a94 <sleepUntilNextInterrupt>
1a000966:	e7fc      	b.n	1a000962 <stopProgramError+0x2>

1a000968 <main>:
}

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000968:	b580      	push	{r7, lr}

   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar y configurar la plataforma
   boardConfig();
1a00096a:	f000 fbf9 	bl	1a001160 <boardInit>

   // Inicializar UART_USB como salida de consola
   debugPrintConfigUart( UART_DEBUG, UARTS_BAUD_RATE );
1a00096e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000972:	2103      	movs	r1, #3
1a000974:	483d      	ldr	r0, [pc, #244]	; (1a000a6c <main+0x104>)
1a000976:	f000 fcc1 	bl	1a0012fc <printInitUart>
   
   if( !esp01Init( UART_ESP01, UART_DEBUG, UARTS_BAUD_RATE ) ){
1a00097a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00097e:	2103      	movs	r1, #3
1a000980:	2005      	movs	r0, #5
1a000982:	f7ff ff8b 	bl	1a00089c <esp01Init>
1a000986:	b908      	cbnz	r0, 1a00098c <main+0x24>
      stopProgramError(); // Como dio falso (error) me quedo en un bucle infinito
1a000988:	f7ff ffea 	bl	1a000960 <stopProgramError>
   }

   if( !esp01ConnectToWifiAP( WIFI_SSID, WIFI_PASSWORD ) ){
1a00098c:	4938      	ldr	r1, [pc, #224]	; (1a000a70 <main+0x108>)
1a00098e:	4839      	ldr	r0, [pc, #228]	; (1a000a74 <main+0x10c>)
1a000990:	f7ff febe 	bl	1a000710 <esp01ConnectToWifiAP>
1a000994:	b958      	cbnz	r0, 1a0009ae <main+0x46>
      stopProgramError(); // Como dio falso (error) me quedo en un bucle infinito
1a000996:	f7ff ffe3 	bl	1a000960 <stopProgramError>
                                  tcpIpDataToSend, strlen( tcpIpDataToSend ) );
                                  
        
      sensorValue++;
      if( sensorValue > 10 ){
         sensorValue = 0;
1a00099a:	460b      	mov	r3, r1
1a00099c:	2000      	movs	r0, #0
1a00099e:	2100      	movs	r1, #0
1a0009a0:	e9c3 0100 	strd	r0, r1, [r3]
      }

      delay(20000);
1a0009a4:	f644 6020 	movw	r0, #20000	; 0x4e20
1a0009a8:	2100      	movs	r1, #0
1a0009aa:	f000 fccd 	bl	1a001348 <delay>
      tcpIpDataToSend[0] = 0; // Reseteo la cadena que guarda las otras agregando un caracter NULL al principio
1a0009ae:	4c32      	ldr	r4, [pc, #200]	; (1a000a78 <main+0x110>)
1a0009b0:	2300      	movs	r3, #0
1a0009b2:	7023      	strb	r3, [r4, #0]
        strcat( tcpIpDataToSend, "GET /iot.php?valor="); // Enviamos los datos por GET
1a0009b4:	4620      	mov	r0, r4
1a0009b6:	f001 fe58 	bl	1a00266a <strlen>
1a0009ba:	4607      	mov	r7, r0
1a0009bc:	1906      	adds	r6, r0, r4
1a0009be:	4d2f      	ldr	r5, [pc, #188]	; (1a000a7c <main+0x114>)
1a0009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009c2:	5138      	str	r0, [r7, r4]
1a0009c4:	6071      	str	r1, [r6, #4]
1a0009c6:	60b2      	str	r2, [r6, #8]
1a0009c8:	60f3      	str	r3, [r6, #12]
1a0009ca:	6828      	ldr	r0, [r5, #0]
1a0009cc:	6130      	str	r0, [r6, #16]
        strcat( tcpIpDataToSend, intToString( sensorValue ));
1a0009ce:	4b2c      	ldr	r3, [pc, #176]	; (1a000a80 <main+0x118>)
1a0009d0:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0009d4:	f000 fc86 	bl	1a0012e4 <intToString>
1a0009d8:	4601      	mov	r1, r0
1a0009da:	4620      	mov	r0, r4
1a0009dc:	f001 fe36 	bl	1a00264c <strcat>
        strcat( tcpIpDataToSend, " HTTP/1.1\r\n");
1a0009e0:	4620      	mov	r0, r4
1a0009e2:	f001 fe42 	bl	1a00266a <strlen>
1a0009e6:	4606      	mov	r6, r0
1a0009e8:	1905      	adds	r5, r0, r4
1a0009ea:	4b26      	ldr	r3, [pc, #152]	; (1a000a84 <main+0x11c>)
1a0009ec:	cb07      	ldmia	r3!, {r0, r1, r2}
1a0009ee:	5130      	str	r0, [r6, r4]
1a0009f0:	6069      	str	r1, [r5, #4]
1a0009f2:	60aa      	str	r2, [r5, #8]
        strcat( tcpIpDataToSend, "Host: utngateway.000webhostapp.com\r\n");
1a0009f4:	4620      	mov	r0, r4
1a0009f6:	f001 fe38 	bl	1a00266a <strlen>
1a0009fa:	4e23      	ldr	r6, [pc, #140]	; (1a000a88 <main+0x120>)
1a0009fc:	4404      	add	r4, r0
1a0009fe:	f106 0720 	add.w	r7, r6, #32
1a000a02:	4635      	mov	r5, r6
1a000a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a06:	6020      	str	r0, [r4, #0]
1a000a08:	6061      	str	r1, [r4, #4]
1a000a0a:	60a2      	str	r2, [r4, #8]
1a000a0c:	60e3      	str	r3, [r4, #12]
1a000a0e:	462e      	mov	r6, r5
1a000a10:	3410      	adds	r4, #16
1a000a12:	42bd      	cmp	r5, r7
1a000a14:	d1f5      	bne.n	1a000a02 <main+0x9a>
1a000a16:	6828      	ldr	r0, [r5, #0]
1a000a18:	6020      	str	r0, [r4, #0]
1a000a1a:	792b      	ldrb	r3, [r5, #4]
1a000a1c:	7123      	strb	r3, [r4, #4]
        strcat( tcpIpDataToSend, "Connection: close\r\n\r\n");
1a000a1e:	4d16      	ldr	r5, [pc, #88]	; (1a000a78 <main+0x110>)
1a000a20:	4628      	mov	r0, r5
1a000a22:	f001 fe22 	bl	1a00266a <strlen>
1a000a26:	4607      	mov	r7, r0
1a000a28:	1946      	adds	r6, r0, r5
1a000a2a:	4c18      	ldr	r4, [pc, #96]	; (1a000a8c <main+0x124>)
1a000a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000a2e:	5178      	str	r0, [r7, r5]
1a000a30:	6071      	str	r1, [r6, #4]
1a000a32:	60b2      	str	r2, [r6, #8]
1a000a34:	60f3      	str	r3, [r6, #12]
1a000a36:	6820      	ldr	r0, [r4, #0]
1a000a38:	6130      	str	r0, [r6, #16]
1a000a3a:	88a3      	ldrh	r3, [r4, #4]
1a000a3c:	82b3      	strh	r3, [r6, #20]
                                  tcpIpDataToSend, strlen( tcpIpDataToSend ) );
1a000a3e:	4628      	mov	r0, r5
1a000a40:	f001 fe13 	bl	1a00266a <strlen>
      esp01SendTPCIPDataToServer( THINGSPEAK_SERVER_URL, THINGSPEAK_SERVER_PORT,
1a000a44:	4603      	mov	r3, r0
1a000a46:	462a      	mov	r2, r5
1a000a48:	2150      	movs	r1, #80	; 0x50
1a000a4a:	4811      	ldr	r0, [pc, #68]	; (1a000a90 <main+0x128>)
1a000a4c:	f7ff fe0c 	bl	1a000668 <esp01SendTPCIPDataToServer>
      sensorValue++;
1a000a50:	490b      	ldr	r1, [pc, #44]	; (1a000a80 <main+0x118>)
1a000a52:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000a56:	1c54      	adds	r4, r2, #1
1a000a58:	f143 0500 	adc.w	r5, r3, #0
1a000a5c:	e9c1 4500 	strd	r4, r5, [r1]
      if( sensorValue > 10 ){
1a000a60:	2c0b      	cmp	r4, #11
1a000a62:	f175 0300 	sbcs.w	r3, r5, #0
1a000a66:	db9d      	blt.n	1a0009a4 <main+0x3c>
1a000a68:	e797      	b.n	1a00099a <main+0x32>
1a000a6a:	bf00      	nop
1a000a6c:	100000d1 	.word	0x100000d1
1a000a70:	1a002bb4 	.word	0x1a002bb4
1a000a74:	1a002bc4 	.word	0x1a002bc4
1a000a78:	10000118 	.word	0x10000118
1a000a7c:	1a002bcc 	.word	0x1a002bcc
1a000a80:	100000d8 	.word	0x100000d8
1a000a84:	1a002be0 	.word	0x1a002be0
1a000a88:	1a002bec 	.word	0x1a002bec
1a000a8c:	1a002c14 	.word	0x1a002c14
1a000a90:	1a002c2c 	.word	0x1a002c2c

1a000a94 <sleepUntilNextInterrupt>:
 */
void sleepUntilNextInterrupt( void )
{

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a000a94:	bf30      	wfi

}
1a000a96:	4770      	bx	lr

1a000a98 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a000a98:	4b04      	ldr	r3, [pc, #16]	; (1a000aac <cyclesCounterInit+0x14>)
1a000a9a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000a9c:	4b04      	ldr	r3, [pc, #16]	; (1a000ab0 <cyclesCounterInit+0x18>)
1a000a9e:	681a      	ldr	r2, [r3, #0]
1a000aa0:	6813      	ldr	r3, [r2, #0]
1a000aa2:	f043 0301 	orr.w	r3, r3, #1
1a000aa6:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a000aa8:	2001      	movs	r0, #1
1a000aaa:	4770      	bx	lr
1a000aac:	10000008 	.word	0x10000008
1a000ab0:	1000000c 	.word	0x1000000c

1a000ab4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a000ab4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a000ab6:	4d0b      	ldr	r5, [pc, #44]	; (1a000ae4 <gpioObtainPinInit+0x30>)
1a000ab8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000abc:	182c      	adds	r4, r5, r0
1a000abe:	5628      	ldrsb	r0, [r5, r0]
1a000ac0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a000ac2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a000ac6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a000ac8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a000acc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a000ace:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a000ad2:	9b02      	ldr	r3, [sp, #8]
1a000ad4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a000ad6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a000ada:	9b03      	ldr	r3, [sp, #12]
1a000adc:	701a      	strb	r2, [r3, #0]
}
1a000ade:	bc30      	pop	{r4, r5}
1a000ae0:	4770      	bx	lr
1a000ae2:	bf00      	nop
1a000ae4:	1a002c4c 	.word	0x1a002c4c

1a000ae8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000ae8:	b570      	push	{r4, r5, r6, lr}
1a000aea:	b084      	sub	sp, #16
1a000aec:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000aee:	2300      	movs	r3, #0
1a000af0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000af4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000af8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000afc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000b00:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000b04:	f10d 030b 	add.w	r3, sp, #11
1a000b08:	9301      	str	r3, [sp, #4]
1a000b0a:	ab03      	add	r3, sp, #12
1a000b0c:	9300      	str	r3, [sp, #0]
1a000b0e:	f10d 030d 	add.w	r3, sp, #13
1a000b12:	f10d 020e 	add.w	r2, sp, #14
1a000b16:	f10d 010f 	add.w	r1, sp, #15
1a000b1a:	f7ff ffcb 	bl	1a000ab4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000b1e:	2c05      	cmp	r4, #5
1a000b20:	f200 80a5 	bhi.w	1a000c6e <gpioInit+0x186>
1a000b24:	e8df f004 	tbb	[pc, r4]
1a000b28:	45278109 	.word	0x45278109
1a000b2c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000b2e:	4851      	ldr	r0, [pc, #324]	; (1a000c74 <gpioInit+0x18c>)
1a000b30:	f000 fe2e 	bl	1a001790 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a000b34:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a000b36:	b004      	add	sp, #16
1a000b38:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a000b3a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000b3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000b42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000b46:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000b4a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000b4e:	494a      	ldr	r1, [pc, #296]	; (1a000c78 <gpioInit+0x190>)
1a000b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000b54:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000b58:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000b5c:	2001      	movs	r0, #1
1a000b5e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a000b62:	4c44      	ldr	r4, [pc, #272]	; (1a000c74 <gpioInit+0x18c>)
1a000b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000b68:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000b6c:	ea22 0201 	bic.w	r2, r2, r1
1a000b70:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000b74:	e7df      	b.n	1a000b36 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000b76:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000b7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000b7e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000b82:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a000b86:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000b8a:	493b      	ldr	r1, [pc, #236]	; (1a000c78 <gpioInit+0x190>)
1a000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000b90:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000b94:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000b98:	2001      	movs	r0, #1
1a000b9a:	fa00 f102 	lsl.w	r1, r0, r2
1a000b9e:	4c35      	ldr	r4, [pc, #212]	; (1a000c74 <gpioInit+0x18c>)
1a000ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000ba4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000ba8:	ea22 0201 	bic.w	r2, r2, r1
1a000bac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000bb0:	e7c1      	b.n	1a000b36 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000bb2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000bb6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000bba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000bbe:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a000bc2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000bc6:	492c      	ldr	r1, [pc, #176]	; (1a000c78 <gpioInit+0x190>)
1a000bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000bcc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000bd0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000bd4:	2001      	movs	r0, #1
1a000bd6:	fa00 f102 	lsl.w	r1, r0, r2
1a000bda:	4c26      	ldr	r4, [pc, #152]	; (1a000c74 <gpioInit+0x18c>)
1a000bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000be0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000be4:	ea22 0201 	bic.w	r2, r2, r1
1a000be8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000bec:	e7a3      	b.n	1a000b36 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000bee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000bf2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000bf6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000bfa:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a000bfe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000c02:	491d      	ldr	r1, [pc, #116]	; (1a000c78 <gpioInit+0x190>)
1a000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000c08:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000c0c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000c10:	2001      	movs	r0, #1
1a000c12:	fa00 f102 	lsl.w	r1, r0, r2
1a000c16:	4c17      	ldr	r4, [pc, #92]	; (1a000c74 <gpioInit+0x18c>)
1a000c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000c1c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000c20:	ea22 0201 	bic.w	r2, r2, r1
1a000c24:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000c28:	e785      	b.n	1a000b36 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000c2a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000c2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000c32:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000c36:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000c3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000c3e:	490e      	ldr	r1, [pc, #56]	; (1a000c78 <gpioInit+0x190>)
1a000c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a000c44:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a000c48:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000c4c:	2001      	movs	r0, #1
1a000c4e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a000c52:	4b08      	ldr	r3, [pc, #32]	; (1a000c74 <gpioInit+0x18c>)
1a000c54:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000c58:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a000c5c:	4331      	orrs	r1, r6
1a000c5e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a000c62:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a000c64:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a000c68:	2100      	movs	r1, #0
1a000c6a:	5499      	strb	r1, [r3, r2]
1a000c6c:	e763      	b.n	1a000b36 <gpioInit+0x4e>
      ret_val = 0;
1a000c6e:	2000      	movs	r0, #0
1a000c70:	e761      	b.n	1a000b36 <gpioInit+0x4e>
1a000c72:	bf00      	nop
1a000c74:	400f4000 	.word	0x400f4000
1a000c78:	40086000 	.word	0x40086000

1a000c7c <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a000c7c:	e7fe      	b.n	1a000c7c <errorOcurred>

1a000c7e <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a000c7e:	4770      	bx	lr

1a000c80 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a000c80:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c82:	2400      	movs	r4, #0
1a000c84:	e001      	b.n	1a000c8a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000c86:	3401      	adds	r4, #1
1a000c88:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c8a:	2c03      	cmp	r4, #3
1a000c8c:	d812      	bhi.n	1a000cb4 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a000c8e:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000c90:	4b09      	ldr	r3, [pc, #36]	; (1a000cb8 <TIMER0_IRQHandler+0x38>)
1a000c92:	681a      	ldr	r2, [r3, #0]
1a000c94:	f004 010f 	and.w	r1, r4, #15
1a000c98:	2301      	movs	r3, #1
1a000c9a:	408b      	lsls	r3, r1
1a000c9c:	421a      	tst	r2, r3
1a000c9e:	d0f2      	beq.n	1a000c86 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000ca0:	4b06      	ldr	r3, [pc, #24]	; (1a000cbc <TIMER0_IRQHandler+0x3c>)
1a000ca2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000ca6:	2000      	movs	r0, #0
1a000ca8:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000caa:	2301      	movs	r3, #1
1a000cac:	40ab      	lsls	r3, r5
1a000cae:	4a02      	ldr	r2, [pc, #8]	; (1a000cb8 <TIMER0_IRQHandler+0x38>)
1a000cb0:	6013      	str	r3, [r2, #0]
1a000cb2:	e7e8      	b.n	1a000c86 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000cb4:	bd38      	pop	{r3, r4, r5, pc}
1a000cb6:	bf00      	nop
1a000cb8:	40084000 	.word	0x40084000
1a000cbc:	10000010 	.word	0x10000010

1a000cc0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a000cc0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000cc2:	2400      	movs	r4, #0
1a000cc4:	e001      	b.n	1a000cca <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000cc6:	3401      	adds	r4, #1
1a000cc8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000cca:	2c03      	cmp	r4, #3
1a000ccc:	d813      	bhi.n	1a000cf6 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a000cce:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000cd0:	4b09      	ldr	r3, [pc, #36]	; (1a000cf8 <TIMER1_IRQHandler+0x38>)
1a000cd2:	681a      	ldr	r2, [r3, #0]
1a000cd4:	f004 010f 	and.w	r1, r4, #15
1a000cd8:	2301      	movs	r3, #1
1a000cda:	408b      	lsls	r3, r1
1a000cdc:	421a      	tst	r2, r3
1a000cde:	d0f2      	beq.n	1a000cc6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000ce0:	1d23      	adds	r3, r4, #4
1a000ce2:	4a06      	ldr	r2, [pc, #24]	; (1a000cfc <TIMER1_IRQHandler+0x3c>)
1a000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000ce8:	2000      	movs	r0, #0
1a000cea:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000cec:	2301      	movs	r3, #1
1a000cee:	40ab      	lsls	r3, r5
1a000cf0:	4a01      	ldr	r2, [pc, #4]	; (1a000cf8 <TIMER1_IRQHandler+0x38>)
1a000cf2:	6013      	str	r3, [r2, #0]
1a000cf4:	e7e7      	b.n	1a000cc6 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000cf6:	bd38      	pop	{r3, r4, r5, pc}
1a000cf8:	40085000 	.word	0x40085000
1a000cfc:	10000010 	.word	0x10000010

1a000d00 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a000d00:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000d02:	2400      	movs	r4, #0
1a000d04:	e001      	b.n	1a000d0a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000d06:	3401      	adds	r4, #1
1a000d08:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000d0a:	2c03      	cmp	r4, #3
1a000d0c:	d814      	bhi.n	1a000d38 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a000d0e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000d10:	4b0a      	ldr	r3, [pc, #40]	; (1a000d3c <TIMER2_IRQHandler+0x3c>)
1a000d12:	681a      	ldr	r2, [r3, #0]
1a000d14:	f004 010f 	and.w	r1, r4, #15
1a000d18:	2301      	movs	r3, #1
1a000d1a:	408b      	lsls	r3, r1
1a000d1c:	421a      	tst	r2, r3
1a000d1e:	d0f2      	beq.n	1a000d06 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000d20:	f104 0308 	add.w	r3, r4, #8
1a000d24:	4a06      	ldr	r2, [pc, #24]	; (1a000d40 <TIMER2_IRQHandler+0x40>)
1a000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000d2a:	2000      	movs	r0, #0
1a000d2c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000d2e:	2301      	movs	r3, #1
1a000d30:	40ab      	lsls	r3, r5
1a000d32:	4a02      	ldr	r2, [pc, #8]	; (1a000d3c <TIMER2_IRQHandler+0x3c>)
1a000d34:	6013      	str	r3, [r2, #0]
1a000d36:	e7e6      	b.n	1a000d06 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000d38:	bd38      	pop	{r3, r4, r5, pc}
1a000d3a:	bf00      	nop
1a000d3c:	400c3000 	.word	0x400c3000
1a000d40:	10000010 	.word	0x10000010

1a000d44 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a000d44:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000d46:	2400      	movs	r4, #0
1a000d48:	e001      	b.n	1a000d4e <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000d4a:	3401      	adds	r4, #1
1a000d4c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000d4e:	2c03      	cmp	r4, #3
1a000d50:	d814      	bhi.n	1a000d7c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a000d52:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000d54:	4b0a      	ldr	r3, [pc, #40]	; (1a000d80 <TIMER3_IRQHandler+0x3c>)
1a000d56:	681a      	ldr	r2, [r3, #0]
1a000d58:	f004 010f 	and.w	r1, r4, #15
1a000d5c:	2301      	movs	r3, #1
1a000d5e:	408b      	lsls	r3, r1
1a000d60:	421a      	tst	r2, r3
1a000d62:	d0f2      	beq.n	1a000d4a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000d64:	f104 030c 	add.w	r3, r4, #12
1a000d68:	4a06      	ldr	r2, [pc, #24]	; (1a000d84 <TIMER3_IRQHandler+0x40>)
1a000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000d6e:	2000      	movs	r0, #0
1a000d70:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000d72:	2301      	movs	r3, #1
1a000d74:	40ab      	lsls	r3, r5
1a000d76:	4a02      	ldr	r2, [pc, #8]	; (1a000d80 <TIMER3_IRQHandler+0x3c>)
1a000d78:	6013      	str	r3, [r2, #0]
1a000d7a:	e7e6      	b.n	1a000d4a <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000d7c:	bd38      	pop	{r3, r4, r5, pc}
1a000d7e:	bf00      	nop
1a000d80:	400c4000 	.word	0x400c4000
1a000d84:	10000010 	.word	0x10000010

1a000d88 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a000d88:	4b01      	ldr	r3, [pc, #4]	; (1a000d90 <tickRead+0x8>)
1a000d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000d8e:	4770      	bx	lr
1a000d90:	100000e8 	.word	0x100000e8

1a000d94 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a000d94:	b918      	cbnz	r0, 1a000d9e <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a000d96:	4b04      	ldr	r3, [pc, #16]	; (1a000da8 <tickPowerSet+0x14>)
1a000d98:	2200      	movs	r2, #0
1a000d9a:	601a      	str	r2, [r3, #0]
   }
}
1a000d9c:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a000d9e:	4b02      	ldr	r3, [pc, #8]	; (1a000da8 <tickPowerSet+0x14>)
1a000da0:	2207      	movs	r2, #7
1a000da2:	601a      	str	r2, [r3, #0]
1a000da4:	4770      	bx	lr
1a000da6:	bf00      	nop
1a000da8:	e000e010 	.word	0xe000e010

1a000dac <tickInit>:
{
1a000dac:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a000dae:	ea50 0301 	orrs.w	r3, r0, r1
1a000db2:	d02a      	beq.n	1a000e0a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000db4:	f110 32ff 	adds.w	r2, r0, #4294967295
1a000db8:	f141 33ff 	adc.w	r3, r1, #4294967295
1a000dbc:	2b00      	cmp	r3, #0
1a000dbe:	bf08      	it	eq
1a000dc0:	2a32      	cmpeq	r2, #50	; 0x32
1a000dc2:	d227      	bcs.n	1a000e14 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a000dc4:	4b14      	ldr	r3, [pc, #80]	; (1a000e18 <tickInit+0x6c>)
1a000dc6:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a000dca:	4b14      	ldr	r3, [pc, #80]	; (1a000e1c <tickInit+0x70>)
1a000dcc:	681b      	ldr	r3, [r3, #0]
1a000dce:	fba3 4500 	umull	r4, r5, r3, r0
1a000dd2:	fb03 5501 	mla	r5, r3, r1, r5
1a000dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000dda:	2300      	movs	r3, #0
1a000ddc:	4620      	mov	r0, r4
1a000dde:	4629      	mov	r1, r5
1a000de0:	f001 fa88 	bl	1a0022f4 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000de4:	3801      	subs	r0, #1
1a000de6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000dea:	d209      	bcs.n	1a000e00 <tickInit+0x54>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000dec:	4b0c      	ldr	r3, [pc, #48]	; (1a000e20 <tickInit+0x74>)
1a000dee:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000df0:	4a0c      	ldr	r2, [pc, #48]	; (1a000e24 <tickInit+0x78>)
1a000df2:	21e0      	movs	r1, #224	; 0xe0
1a000df4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000df8:	2200      	movs	r2, #0
1a000dfa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000dfc:	2207      	movs	r2, #7
1a000dfe:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a000e00:	2001      	movs	r0, #1
1a000e02:	f7ff ffc7 	bl	1a000d94 <tickPowerSet>
      bool_t ret_val = 1;
1a000e06:	2001      	movs	r0, #1
}
1a000e08:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a000e0a:	2000      	movs	r0, #0
1a000e0c:	f7ff ffc2 	bl	1a000d94 <tickPowerSet>
         ret_val = 0;
1a000e10:	2000      	movs	r0, #0
1a000e12:	e7f9      	b.n	1a000e08 <tickInit+0x5c>
            ret_val = 0;
1a000e14:	2000      	movs	r0, #0
1a000e16:	e7f7      	b.n	1a000e08 <tickInit+0x5c>
1a000e18:	10000580 	.word	0x10000580
1a000e1c:	1000058c 	.word	0x1000058c
1a000e20:	e000e010 	.word	0xe000e010
1a000e24:	e000ed00 	.word	0xe000ed00

1a000e28 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000e28:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a000e2c:	4908      	ldr	r1, [pc, #32]	; (1a000e50 <SysTick_Handler+0x28>)
1a000e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000e32:	f112 0b01 	adds.w	fp, r2, #1
1a000e36:	f143 0c00 	adc.w	ip, r3, #0
1a000e3a:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000e3e:	4b05      	ldr	r3, [pc, #20]	; (1a000e54 <SysTick_Handler+0x2c>)
1a000e40:	681b      	ldr	r3, [r3, #0]
1a000e42:	b113      	cbz	r3, 1a000e4a <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a000e44:	4a04      	ldr	r2, [pc, #16]	; (1a000e58 <SysTick_Handler+0x30>)
1a000e46:	6810      	ldr	r0, [r2, #0]
1a000e48:	4798      	blx	r3
   }
}
1a000e4a:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a000e4e:	bf00      	nop
1a000e50:	100000e8 	.word	0x100000e8
1a000e54:	100000f0 	.word	0x100000f0
1a000e58:	100000e0 	.word	0x100000e0

1a000e5c <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a000e5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000e60:	0083      	lsls	r3, r0, #2
1a000e62:	4a03      	ldr	r2, [pc, #12]	; (1a000e70 <uartRxReady+0x14>)
1a000e64:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000e66:	6958      	ldr	r0, [r3, #20]
}
1a000e68:	f000 0001 	and.w	r0, r0, #1
1a000e6c:	4770      	bx	lr
1a000e6e:	bf00      	nop
1a000e70:	1a002d84 	.word	0x1a002d84

1a000e74 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a000e74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000e78:	0083      	lsls	r3, r0, #2
1a000e7a:	4a03      	ldr	r2, [pc, #12]	; (1a000e88 <uartTxReady+0x14>)
1a000e7c:	58d3      	ldr	r3, [r2, r3]
1a000e7e:	6958      	ldr	r0, [r3, #20]
}
1a000e80:	f000 0020 	and.w	r0, r0, #32
1a000e84:	4770      	bx	lr
1a000e86:	bf00      	nop
1a000e88:	1a002d84 	.word	0x1a002d84

1a000e8c <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a000e8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000e90:	0083      	lsls	r3, r0, #2
1a000e92:	4a02      	ldr	r2, [pc, #8]	; (1a000e9c <uartRxRead+0x10>)
1a000e94:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000e96:	6818      	ldr	r0, [r3, #0]
}
1a000e98:	b2c0      	uxtb	r0, r0
1a000e9a:	4770      	bx	lr
1a000e9c:	1a002d84 	.word	0x1a002d84

1a000ea0 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a000ea0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000ea4:	0083      	lsls	r3, r0, #2
1a000ea6:	4a02      	ldr	r2, [pc, #8]	; (1a000eb0 <uartTxWrite+0x10>)
1a000ea8:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a000eaa:	6019      	str	r1, [r3, #0]
}
1a000eac:	4770      	bx	lr
1a000eae:	bf00      	nop
1a000eb0:	1a002d84 	.word	0x1a002d84

1a000eb4 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a000eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000eb8:	4680      	mov	r8, r0
1a000eba:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a000ebc:	4c19      	ldr	r4, [pc, #100]	; (1a000f24 <uartInit+0x70>)
1a000ebe:	0045      	lsls	r5, r0, #1
1a000ec0:	182a      	adds	r2, r5, r0
1a000ec2:	0093      	lsls	r3, r2, #2
1a000ec4:	18e6      	adds	r6, r4, r3
1a000ec6:	58e7      	ldr	r7, [r4, r3]
1a000ec8:	4638      	mov	r0, r7
1a000eca:	f001 f883 	bl	1a001fd4 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a000ece:	4649      	mov	r1, r9
1a000ed0:	4638      	mov	r0, r7
1a000ed2:	f001 f8a9 	bl	1a002028 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a000ed6:	2307      	movs	r3, #7
1a000ed8:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000eda:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a000edc:	2301      	movs	r3, #1
1a000ede:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a000ee0:	7930      	ldrb	r0, [r6, #4]
1a000ee2:	7973      	ldrb	r3, [r6, #5]
1a000ee4:	79b2      	ldrb	r2, [r6, #6]
1a000ee6:	f042 0218 	orr.w	r2, r2, #24
1a000eea:	490f      	ldr	r1, [pc, #60]	; (1a000f28 <uartInit+0x74>)
1a000eec:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a000ef4:	79f0      	ldrb	r0, [r6, #7]
1a000ef6:	7a33      	ldrb	r3, [r6, #8]
1a000ef8:	7a72      	ldrb	r2, [r6, #9]
1a000efa:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000efe:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a000f06:	f1b8 0f01 	cmp.w	r8, #1
1a000f0a:	d001      	beq.n	1a000f10 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a000f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a000f10:	4a06      	ldr	r2, [pc, #24]	; (1a000f2c <uartInit+0x78>)
1a000f12:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a000f14:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
1a000f1a:	221a      	movs	r2, #26
1a000f1c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a000f20:	e7f4      	b.n	1a000f0c <uartInit+0x58>
1a000f22:	bf00      	nop
1a000f24:	1a002d84 	.word	0x1a002d84
1a000f28:	40086000 	.word	0x40086000
1a000f2c:	40081000 	.word	0x40081000

1a000f30 <uartReadByte>:

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a000f30:	b538      	push	{r3, r4, r5, lr}
1a000f32:	4605      	mov	r5, r0
1a000f34:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a000f36:	f7ff ff91 	bl	1a000e5c <uartRxReady>
1a000f3a:	4603      	mov	r3, r0
1a000f3c:	b908      	cbnz	r0, 1a000f42 <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a000f3e:	4618      	mov	r0, r3
1a000f40:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a000f42:	4628      	mov	r0, r5
1a000f44:	f7ff ffa2 	bl	1a000e8c <uartRxRead>
1a000f48:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a000f4a:	2301      	movs	r3, #1
1a000f4c:	e7f7      	b.n	1a000f3e <uartReadByte+0xe>

1a000f4e <waitForReceiveStringOrTimeout>:
{
1a000f4e:	b510      	push	{r4, lr}
1a000f50:	b082      	sub	sp, #8
1a000f52:	460c      	mov	r4, r1
   switch( instance->state ) {
1a000f54:	780b      	ldrb	r3, [r1, #0]
1a000f56:	2b04      	cmp	r3, #4
1a000f58:	d836      	bhi.n	1a000fc8 <waitForReceiveStringOrTimeout+0x7a>
1a000f5a:	e8df f003 	tbb	[pc, r3]
1a000f5e:	1003      	.short	0x1003
1a000f60:	352f      	.short	0x352f
1a000f62:	32          	.byte	0x32
1a000f63:	00          	.byte	0x00
      delayInit( &(instance->delay), instance->timeout );
1a000f64:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a000f68:	f101 0018 	add.w	r0, r1, #24
1a000f6c:	f000 fa08 	bl	1a001380 <delayInit>
      instance->stringIndex = 0;
1a000f70:	2300      	movs	r3, #0
1a000f72:	8163      	strh	r3, [r4, #10]
      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a000f74:	2301      	movs	r3, #1
1a000f76:	7023      	strb	r3, [r4, #0]
}
1a000f78:	7820      	ldrb	r0, [r4, #0]
1a000f7a:	b002      	add	sp, #8
1a000f7c:	bd10      	pop	{r4, pc}
      if( uartReadByte( uart, &receiveByte ) ) {
1a000f7e:	f10d 0107 	add.w	r1, sp, #7
1a000f82:	f7ff ffd5 	bl	1a000f30 <uartReadByte>
1a000f86:	b130      	cbz	r0, 1a000f96 <waitForReceiveStringOrTimeout+0x48>
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a000f88:	6862      	ldr	r2, [r4, #4]
1a000f8a:	8963      	ldrh	r3, [r4, #10]
1a000f8c:	5cd1      	ldrb	r1, [r2, r3]
1a000f8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000f92:	4291      	cmp	r1, r2
1a000f94:	d008      	beq.n	1a000fa8 <waitForReceiveStringOrTimeout+0x5a>
      if( delayRead( &(instance->delay) ) ) {
1a000f96:	f104 0018 	add.w	r0, r4, #24
1a000f9a:	f000 fa01 	bl	1a0013a0 <delayRead>
1a000f9e:	2800      	cmp	r0, #0
1a000fa0:	d0ea      	beq.n	1a000f78 <waitForReceiveStringOrTimeout+0x2a>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a000fa2:	2304      	movs	r3, #4
1a000fa4:	7023      	strb	r3, [r4, #0]
1a000fa6:	e7e7      	b.n	1a000f78 <waitForReceiveStringOrTimeout+0x2a>
            (instance->stringIndex)++;
1a000fa8:	3301      	adds	r3, #1
1a000faa:	b29b      	uxth	r3, r3
1a000fac:	8163      	strh	r3, [r4, #10]
            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a000fae:	8922      	ldrh	r2, [r4, #8]
1a000fb0:	3a01      	subs	r2, #1
1a000fb2:	4293      	cmp	r3, r2
1a000fb4:	d1ef      	bne.n	1a000f96 <waitForReceiveStringOrTimeout+0x48>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a000fb6:	2302      	movs	r3, #2
1a000fb8:	7023      	strb	r3, [r4, #0]
1a000fba:	e7ec      	b.n	1a000f96 <waitForReceiveStringOrTimeout+0x48>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000fbc:	2300      	movs	r3, #0
1a000fbe:	700b      	strb	r3, [r1, #0]
      break;
1a000fc0:	e7da      	b.n	1a000f78 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000fc2:	2300      	movs	r3, #0
1a000fc4:	700b      	strb	r3, [r1, #0]
      break;
1a000fc6:	e7d7      	b.n	1a000f78 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000fc8:	2300      	movs	r3, #0
1a000fca:	700b      	strb	r3, [r1, #0]
      break;
1a000fcc:	e7d4      	b.n	1a000f78 <waitForReceiveStringOrTimeout+0x2a>

1a000fce <waitForReceiveStringOrTimeoutBlocking>:
{
1a000fce:	b510      	push	{r4, lr}
1a000fd0:	b08c      	sub	sp, #48	; 0x30
1a000fd2:	4604      	mov	r4, r0
   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a000fd4:	2000      	movs	r0, #0
1a000fd6:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a000fda:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a000fdc:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a000fe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a000fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a000fe8:	e003      	b.n	1a000ff2 <waitForReceiveStringOrTimeoutBlocking+0x24>
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a000fea:	4669      	mov	r1, sp
1a000fec:	4620      	mov	r0, r4
1a000fee:	f7ff ffae 	bl	1a000f4e <waitForReceiveStringOrTimeout>
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a000ff2:	2802      	cmp	r0, #2
1a000ff4:	d001      	beq.n	1a000ffa <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a000ff6:	2804      	cmp	r0, #4
1a000ff8:	d1f7      	bne.n	1a000fea <waitForReceiveStringOrTimeoutBlocking+0x1c>
   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a000ffa:	2804      	cmp	r0, #4
1a000ffc:	d002      	beq.n	1a001004 <waitForReceiveStringOrTimeoutBlocking+0x36>
   bool_t retVal = TRUE; // True if OK
1a000ffe:	2001      	movs	r0, #1
}
1a001000:	b00c      	add	sp, #48	; 0x30
1a001002:	bd10      	pop	{r4, pc}
      retVal = FALSE;
1a001004:	2000      	movs	r0, #0
1a001006:	e7fb      	b.n	1a001000 <waitForReceiveStringOrTimeoutBlocking+0x32>

1a001008 <receiveBytesUntilReceiveStringOrTimeout>:
{
1a001008:	b570      	push	{r4, r5, r6, lr}
1a00100a:	b082      	sub	sp, #8
1a00100c:	460c      	mov	r4, r1
1a00100e:	4616      	mov	r6, r2
1a001010:	461d      	mov	r5, r3
   switch( instance->state ) {
1a001012:	780b      	ldrb	r3, [r1, #0]
1a001014:	2b04      	cmp	r3, #4
1a001016:	d855      	bhi.n	1a0010c4 <receiveBytesUntilReceiveStringOrTimeout+0xbc>
1a001018:	e8df f003 	tbb	[pc, r3]
1a00101c:	514b1203 	.word	0x514b1203
1a001020:	4e          	.byte	0x4e
1a001021:	00          	.byte	0x00
      delayInit( &(instance->delay), instance->timeout );
1a001022:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a001026:	f101 0018 	add.w	r0, r1, #24
1a00102a:	f000 f9a9 	bl	1a001380 <delayInit>
      instance->stringIndex = 0;
1a00102e:	2300      	movs	r3, #0
1a001030:	8163      	strh	r3, [r4, #10]
      i = 0;
1a001032:	4a26      	ldr	r2, [pc, #152]	; (1a0010cc <receiveBytesUntilReceiveStringOrTimeout+0xc4>)
1a001034:	6013      	str	r3, [r2, #0]
      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a001036:	2301      	movs	r3, #1
1a001038:	7023      	strb	r3, [r4, #0]
   return instance->state;
1a00103a:	7820      	ldrb	r0, [r4, #0]
}
1a00103c:	b002      	add	sp, #8
1a00103e:	bd70      	pop	{r4, r5, r6, pc}
      if( uartReadByte( uart, &receiveByte ) ) {
1a001040:	f10d 0107 	add.w	r1, sp, #7
1a001044:	f7ff ff74 	bl	1a000f30 <uartReadByte>
1a001048:	b178      	cbz	r0, 1a00106a <receiveBytesUntilReceiveStringOrTimeout+0x62>
         if( i < *receiveBufferSize ) {
1a00104a:	682a      	ldr	r2, [r5, #0]
1a00104c:	4b1f      	ldr	r3, [pc, #124]	; (1a0010cc <receiveBytesUntilReceiveStringOrTimeout+0xc4>)
1a00104e:	681b      	ldr	r3, [r3, #0]
1a001050:	429a      	cmp	r2, r3
1a001052:	d918      	bls.n	1a001086 <receiveBytesUntilReceiveStringOrTimeout+0x7e>
            receiveBuffer[i] = receiveByte;
1a001054:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a001058:	54f1      	strb	r1, [r6, r3]
            i++;
1a00105a:	3301      	adds	r3, #1
1a00105c:	4a1b      	ldr	r2, [pc, #108]	; (1a0010cc <receiveBytesUntilReceiveStringOrTimeout+0xc4>)
1a00105e:	6013      	str	r3, [r2, #0]
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a001060:	6860      	ldr	r0, [r4, #4]
1a001062:	8962      	ldrh	r2, [r4, #10]
1a001064:	5c80      	ldrb	r0, [r0, r2]
1a001066:	4288      	cmp	r0, r1
1a001068:	d015      	beq.n	1a001096 <receiveBytesUntilReceiveStringOrTimeout+0x8e>
      if( delayRead( &(instance->delay) ) ) {
1a00106a:	f104 0018 	add.w	r0, r4, #24
1a00106e:	f000 f997 	bl	1a0013a0 <delayRead>
1a001072:	2800      	cmp	r0, #0
1a001074:	d0e1      	beq.n	1a00103a <receiveBytesUntilReceiveStringOrTimeout+0x32>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a001076:	2304      	movs	r3, #4
1a001078:	7023      	strb	r3, [r4, #0]
         *receiveBufferSize = i;
1a00107a:	4b14      	ldr	r3, [pc, #80]	; (1a0010cc <receiveBytesUntilReceiveStringOrTimeout+0xc4>)
1a00107c:	681a      	ldr	r2, [r3, #0]
1a00107e:	602a      	str	r2, [r5, #0]
         i = 0;
1a001080:	2200      	movs	r2, #0
1a001082:	601a      	str	r2, [r3, #0]
1a001084:	e7d9      	b.n	1a00103a <receiveBytesUntilReceiveStringOrTimeout+0x32>
            instance->state = UART_RECEIVE_STRING_FULL_BUFFER;
1a001086:	2203      	movs	r2, #3
1a001088:	7022      	strb	r2, [r4, #0]
            *receiveBufferSize = i;
1a00108a:	602b      	str	r3, [r5, #0]
            i = 0;
1a00108c:	4b0f      	ldr	r3, [pc, #60]	; (1a0010cc <receiveBytesUntilReceiveStringOrTimeout+0xc4>)
1a00108e:	2200      	movs	r2, #0
1a001090:	601a      	str	r2, [r3, #0]
            return instance->state;
1a001092:	7820      	ldrb	r0, [r4, #0]
1a001094:	e7d2      	b.n	1a00103c <receiveBytesUntilReceiveStringOrTimeout+0x34>
            (instance->stringIndex)++;
1a001096:	3201      	adds	r2, #1
1a001098:	b292      	uxth	r2, r2
1a00109a:	8162      	strh	r2, [r4, #10]
            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a00109c:	8921      	ldrh	r1, [r4, #8]
1a00109e:	3901      	subs	r1, #1
1a0010a0:	428a      	cmp	r2, r1
1a0010a2:	d1e2      	bne.n	1a00106a <receiveBytesUntilReceiveStringOrTimeout+0x62>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a0010a4:	2202      	movs	r2, #2
1a0010a6:	7022      	strb	r2, [r4, #0]
               *receiveBufferSize = i;
1a0010a8:	602b      	str	r3, [r5, #0]
               i = 0;
1a0010aa:	4b08      	ldr	r3, [pc, #32]	; (1a0010cc <receiveBytesUntilReceiveStringOrTimeout+0xc4>)
1a0010ac:	2200      	movs	r2, #0
1a0010ae:	601a      	str	r2, [r3, #0]
1a0010b0:	e7db      	b.n	1a00106a <receiveBytesUntilReceiveStringOrTimeout+0x62>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a0010b2:	2300      	movs	r3, #0
1a0010b4:	700b      	strb	r3, [r1, #0]
      break;
1a0010b6:	e7c0      	b.n	1a00103a <receiveBytesUntilReceiveStringOrTimeout+0x32>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a0010b8:	2300      	movs	r3, #0
1a0010ba:	700b      	strb	r3, [r1, #0]
      break;
1a0010bc:	e7bd      	b.n	1a00103a <receiveBytesUntilReceiveStringOrTimeout+0x32>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a0010be:	2300      	movs	r3, #0
1a0010c0:	700b      	strb	r3, [r1, #0]
      break;
1a0010c2:	e7ba      	b.n	1a00103a <receiveBytesUntilReceiveStringOrTimeout+0x32>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a0010c4:	2300      	movs	r3, #0
1a0010c6:	700b      	strb	r3, [r1, #0]
      break;
1a0010c8:	e7b7      	b.n	1a00103a <receiveBytesUntilReceiveStringOrTimeout+0x32>
1a0010ca:	bf00      	nop
1a0010cc:	100000f4 	.word	0x100000f4

1a0010d0 <receiveBytesUntilReceiveStringOrTimeoutBlocking>:
{
1a0010d0:	b530      	push	{r4, r5, lr}
1a0010d2:	b08d      	sub	sp, #52	; 0x34
1a0010d4:	4605      	mov	r5, r0
1a0010d6:	461c      	mov	r4, r3
   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a0010d8:	2000      	movs	r0, #0
1a0010da:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a0010de:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a0010e0:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a0010e4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a0010e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a0010ec:	e005      	b.n	1a0010fa <receiveBytesUntilReceiveStringOrTimeoutBlocking+0x2a>
      waitTextState = receiveBytesUntilReceiveStringOrTimeout(
1a0010ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0010f0:	4622      	mov	r2, r4
1a0010f2:	4669      	mov	r1, sp
1a0010f4:	4628      	mov	r0, r5
1a0010f6:	f7ff ff87 	bl	1a001008 <receiveBytesUntilReceiveStringOrTimeout>
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a0010fa:	2802      	cmp	r0, #2
1a0010fc:	d001      	beq.n	1a001102 <receiveBytesUntilReceiveStringOrTimeoutBlocking+0x32>
1a0010fe:	2804      	cmp	r0, #4
1a001100:	d1f5      	bne.n	1a0010ee <receiveBytesUntilReceiveStringOrTimeoutBlocking+0x1e>
   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a001102:	2804      	cmp	r0, #4
1a001104:	d002      	beq.n	1a00110c <receiveBytesUntilReceiveStringOrTimeoutBlocking+0x3c>
   bool_t retVal = TRUE; // True if OK
1a001106:	2001      	movs	r0, #1
}
1a001108:	b00d      	add	sp, #52	; 0x34
1a00110a:	bd30      	pop	{r4, r5, pc}
      retVal = FALSE;
1a00110c:	2000      	movs	r0, #0
1a00110e:	e7fb      	b.n	1a001108 <receiveBytesUntilReceiveStringOrTimeoutBlocking+0x38>

1a001110 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a001110:	b538      	push	{r3, r4, r5, lr}
1a001112:	4604      	mov	r4, r0
1a001114:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a001116:	4620      	mov	r0, r4
1a001118:	f7ff feac 	bl	1a000e74 <uartTxReady>
1a00111c:	2800      	cmp	r0, #0
1a00111e:	d0fa      	beq.n	1a001116 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a001120:	4629      	mov	r1, r5
1a001122:	4620      	mov	r0, r4
1a001124:	f7ff febc 	bl	1a000ea0 <uartTxWrite>
}
1a001128:	bd38      	pop	{r3, r4, r5, pc}

1a00112a <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a00112a:	b538      	push	{r3, r4, r5, lr}
1a00112c:	4605      	mov	r5, r0
1a00112e:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001130:	e003      	b.n	1a00113a <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a001132:	4628      	mov	r0, r5
1a001134:	f7ff ffec 	bl	1a001110 <uartWriteByte>
      str++;
1a001138:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a00113a:	7821      	ldrb	r1, [r4, #0]
1a00113c:	2900      	cmp	r1, #0
1a00113e:	d1f8      	bne.n	1a001132 <uartWriteString+0x8>
   }
}
1a001140:	bd38      	pop	{r3, r4, r5, pc}
1a001142:	Address 0x1a001142 is out of bounds.


1a001144 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001144:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001146:	4b04      	ldr	r3, [pc, #16]	; (1a001158 <USB0_IRQHandler+0x14>)
1a001148:	681b      	ldr	r3, [r3, #0]
1a00114a:	681b      	ldr	r3, [r3, #0]
1a00114c:	68db      	ldr	r3, [r3, #12]
1a00114e:	4a03      	ldr	r2, [pc, #12]	; (1a00115c <USB0_IRQHandler+0x18>)
1a001150:	6810      	ldr	r0, [r2, #0]
1a001152:	4798      	blx	r3
}
1a001154:	bd08      	pop	{r3, pc}
1a001156:	bf00      	nop
1a001158:	10000588 	.word	0x10000588
1a00115c:	100000f8 	.word	0x100000f8

1a001160 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001160:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001162:	f000 ff17 	bl	1a001f94 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001166:	4b3a      	ldr	r3, [pc, #232]	; (1a001250 <boardInit+0xf0>)
1a001168:	6818      	ldr	r0, [r3, #0]
1a00116a:	f7ff fc95 	bl	1a000a98 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00116e:	2001      	movs	r0, #1
1a001170:	2100      	movs	r1, #0
1a001172:	f7ff fe1b 	bl	1a000dac <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001176:	2105      	movs	r1, #5
1a001178:	2000      	movs	r0, #0
1a00117a:	f7ff fcb5 	bl	1a000ae8 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00117e:	2100      	movs	r1, #0
1a001180:	2024      	movs	r0, #36	; 0x24
1a001182:	f7ff fcb1 	bl	1a000ae8 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001186:	2100      	movs	r1, #0
1a001188:	2025      	movs	r0, #37	; 0x25
1a00118a:	f7ff fcad 	bl	1a000ae8 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00118e:	2100      	movs	r1, #0
1a001190:	2026      	movs	r0, #38	; 0x26
1a001192:	f7ff fca9 	bl	1a000ae8 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001196:	2100      	movs	r1, #0
1a001198:	2027      	movs	r0, #39	; 0x27
1a00119a:	f7ff fca5 	bl	1a000ae8 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00119e:	2101      	movs	r1, #1
1a0011a0:	2028      	movs	r0, #40	; 0x28
1a0011a2:	f7ff fca1 	bl	1a000ae8 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0011a6:	2101      	movs	r1, #1
1a0011a8:	2029      	movs	r0, #41	; 0x29
1a0011aa:	f7ff fc9d 	bl	1a000ae8 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0011ae:	2101      	movs	r1, #1
1a0011b0:	202a      	movs	r0, #42	; 0x2a
1a0011b2:	f7ff fc99 	bl	1a000ae8 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0011b6:	2101      	movs	r1, #1
1a0011b8:	202b      	movs	r0, #43	; 0x2b
1a0011ba:	f7ff fc95 	bl	1a000ae8 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0011be:	2101      	movs	r1, #1
1a0011c0:	202c      	movs	r0, #44	; 0x2c
1a0011c2:	f7ff fc91 	bl	1a000ae8 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0011c6:	2101      	movs	r1, #1
1a0011c8:	202d      	movs	r0, #45	; 0x2d
1a0011ca:	f7ff fc8d 	bl	1a000ae8 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0011ce:	2100      	movs	r1, #0
1a0011d0:	202e      	movs	r0, #46	; 0x2e
1a0011d2:	f7ff fc89 	bl	1a000ae8 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0011d6:	2100      	movs	r1, #0
1a0011d8:	202f      	movs	r0, #47	; 0x2f
1a0011da:	f7ff fc85 	bl	1a000ae8 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0011de:	2100      	movs	r1, #0
1a0011e0:	2030      	movs	r0, #48	; 0x30
1a0011e2:	f7ff fc81 	bl	1a000ae8 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0011e6:	2100      	movs	r1, #0
1a0011e8:	2031      	movs	r0, #49	; 0x31
1a0011ea:	f7ff fc7d 	bl	1a000ae8 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0011ee:	2100      	movs	r1, #0
1a0011f0:	2032      	movs	r0, #50	; 0x32
1a0011f2:	f7ff fc79 	bl	1a000ae8 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0011f6:	2100      	movs	r1, #0
1a0011f8:	2033      	movs	r0, #51	; 0x33
1a0011fa:	f7ff fc75 	bl	1a000ae8 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0011fe:	2100      	movs	r1, #0
1a001200:	2034      	movs	r0, #52	; 0x34
1a001202:	f7ff fc71 	bl	1a000ae8 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a001206:	2100      	movs	r1, #0
1a001208:	2035      	movs	r0, #53	; 0x35
1a00120a:	f7ff fc6d 	bl	1a000ae8 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00120e:	2101      	movs	r1, #1
1a001210:	2036      	movs	r0, #54	; 0x36
1a001212:	f7ff fc69 	bl	1a000ae8 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a001216:	2101      	movs	r1, #1
1a001218:	2037      	movs	r0, #55	; 0x37
1a00121a:	f7ff fc65 	bl	1a000ae8 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00121e:	2101      	movs	r1, #1
1a001220:	2038      	movs	r0, #56	; 0x38
1a001222:	f7ff fc61 	bl	1a000ae8 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a001226:	2101      	movs	r1, #1
1a001228:	2039      	movs	r0, #57	; 0x39
1a00122a:	f7ff fc5d 	bl	1a000ae8 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00122e:	2101      	movs	r1, #1
1a001230:	203a      	movs	r0, #58	; 0x3a
1a001232:	f7ff fc59 	bl	1a000ae8 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001236:	2101      	movs	r1, #1
1a001238:	203b      	movs	r0, #59	; 0x3b
1a00123a:	f7ff fc55 	bl	1a000ae8 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00123e:	2101      	movs	r1, #1
1a001240:	203c      	movs	r0, #60	; 0x3c
1a001242:	f7ff fc51 	bl	1a000ae8 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001246:	2101      	movs	r1, #1
1a001248:	203d      	movs	r0, #61	; 0x3d
1a00124a:	f7ff fc4d 	bl	1a000ae8 <gpioInit>

}
1a00124e:	bd08      	pop	{r3, pc}
1a001250:	1000058c 	.word	0x1000058c

1a001254 <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a001254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001258:	4614      	mov	r4, r2
1a00125a:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a00125c:	3b02      	subs	r3, #2
1a00125e:	b2db      	uxtb	r3, r3
1a001260:	2b22      	cmp	r3, #34	; 0x22
1a001262:	d803      	bhi.n	1a00126c <int64ToString+0x18>
1a001264:	4680      	mov	r8, r0
1a001266:	4689      	mov	r9, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a001268:	4615      	mov	r5, r2
1a00126a:	e005      	b.n	1a001278 <int64ToString+0x24>
      *result = '\0';
1a00126c:	2000      	movs	r0, #0
1a00126e:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a001270:	e034      	b.n	1a0012dc <int64ToString+0x88>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a001272:	4635      	mov	r5, r6
      value /= (int64_t)base;
1a001274:	4680      	mov	r8, r0
1a001276:	4689      	mov	r9, r1
1a001278:	fa5f f68a 	uxtb.w	r6, sl
1a00127c:	2700      	movs	r7, #0
1a00127e:	4632      	mov	r2, r6
1a001280:	463b      	mov	r3, r7
1a001282:	4640      	mov	r0, r8
1a001284:	4649      	mov	r1, r9
1a001286:	f000 ffe5 	bl	1a002254 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a00128a:	fba6 bc00 	umull	fp, ip, r6, r0
1a00128e:	ebb8 020b 	subs.w	r2, r8, fp
1a001292:	f112 0b23 	adds.w	fp, r2, #35	; 0x23
1a001296:	1c6e      	adds	r6, r5, #1
1a001298:	4b11      	ldr	r3, [pc, #68]	; (1a0012e0 <int64ToString+0x8c>)
1a00129a:	eb0b 0203 	add.w	r2, fp, r3
1a00129e:	7813      	ldrb	r3, [r2, #0]
1a0012a0:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a0012a2:	ea50 0301 	orrs.w	r3, r0, r1
1a0012a6:	d1e4      	bne.n	1a001272 <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a0012a8:	f1b8 0f00 	cmp.w	r8, #0
1a0012ac:	f179 0300 	sbcs.w	r3, r9, #0
1a0012b0:	db03      	blt.n	1a0012ba <int64ToString+0x66>
   *ptr-- = '\0';
1a0012b2:	1e73      	subs	r3, r6, #1
1a0012b4:	2200      	movs	r2, #0
1a0012b6:	7032      	strb	r2, [r6, #0]
   while(ptr1 < ptr) {
1a0012b8:	e00d      	b.n	1a0012d6 <int64ToString+0x82>
   if (tmp_value < 0) *ptr++ = '-';
1a0012ba:	1cae      	adds	r6, r5, #2
1a0012bc:	232d      	movs	r3, #45	; 0x2d
1a0012be:	706b      	strb	r3, [r5, #1]
1a0012c0:	e7f7      	b.n	1a0012b2 <int64ToString+0x5e>
      tmp_char = *ptr;
1a0012c2:	461a      	mov	r2, r3
1a0012c4:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a0012c8:	4621      	mov	r1, r4
1a0012ca:	f811 5b01 	ldrb.w	r5, [r1], #1
1a0012ce:	701d      	strb	r5, [r3, #0]
      *ptr1++ = tmp_char;
1a0012d0:	7020      	strb	r0, [r4, #0]
1a0012d2:	460c      	mov	r4, r1
      *ptr--= *ptr1;
1a0012d4:	4613      	mov	r3, r2
   while(ptr1 < ptr) {
1a0012d6:	42a3      	cmp	r3, r4
1a0012d8:	d8f3      	bhi.n	1a0012c2 <int64ToString+0x6e>
   }
   return TRUE;
1a0012da:	2001      	movs	r0, #1
}
1a0012dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0012e0:	1a002dcc 	.word	0x1a002dcc

1a0012e4 <intToString>:

   return result;
}

char* intToString( int64_t value )
{
1a0012e4:	b510      	push	{r4, lr}
   static char result[20];
   result[0] = 0;
1a0012e6:	4c04      	ldr	r4, [pc, #16]	; (1a0012f8 <intToString+0x14>)
1a0012e8:	2300      	movs	r3, #0
1a0012ea:	7023      	strb	r3, [r4, #0]
   int64ToString( value, result, 10 );
1a0012ec:	230a      	movs	r3, #10
1a0012ee:	4622      	mov	r2, r4
1a0012f0:	f7ff ffb0 	bl	1a001254 <int64ToString>
   return result;
}
1a0012f4:	4620      	mov	r0, r4
1a0012f6:	bd10      	pop	{r4, pc}
1a0012f8:	100000fc 	.word	0x100000fc

1a0012fc <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0012fc:	b508      	push	{r3, lr}
1a0012fe:	460b      	mov	r3, r1
   *printer = uart;
1a001300:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a001302:	4611      	mov	r1, r2
1a001304:	4618      	mov	r0, r3
1a001306:	f7ff fdd5 	bl	1a000eb4 <uartInit>
}
1a00130a:	bd08      	pop	{r3, pc}

1a00130c <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a00130c:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a00130e:	f7ff ff0c 	bl	1a00112a <uartWriteString>
}
1a001312:	bd08      	pop	{r3, pc}

1a001314 <printEnter>:

void printEnter( print_t printer )
{
1a001314:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a001316:	4902      	ldr	r1, [pc, #8]	; (1a001320 <printEnter+0xc>)
1a001318:	f7ff ff07 	bl	1a00112a <uartWriteString>
}
1a00131c:	bd08      	pop	{r3, pc}
1a00131e:	bf00      	nop
1a001320:	1a002920 	.word	0x1a002920

1a001324 <printIntFormat>:


// Print Integer

void printIntFormat( print_t printer, int64_t number, numberFormat_t format )
{
1a001324:	b510      	push	{r4, lr}
1a001326:	b092      	sub	sp, #72	; 0x48
1a001328:	4604      	mov	r4, r0
1a00132a:	4610      	mov	r0, r2
1a00132c:	4619      	mov	r1, r3

   char strNumber[65];

   if( int64ToString( number, strNumber, format ) ) {
1a00132e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
1a001332:	aa01      	add	r2, sp, #4
1a001334:	f7ff ff8e 	bl	1a001254 <int64ToString>
1a001338:	b908      	cbnz	r0, 1a00133e <printIntFormat+0x1a>
      uartWriteString( printer, strNumber );
   }
}
1a00133a:	b012      	add	sp, #72	; 0x48
1a00133c:	bd10      	pop	{r4, pc}
      uartWriteString( printer, strNumber );
1a00133e:	a901      	add	r1, sp, #4
1a001340:	4620      	mov	r0, r4
1a001342:	f7ff fef2 	bl	1a00112a <uartWriteString>
}
1a001346:	e7f8      	b.n	1a00133a <printIntFormat+0x16>

1a001348 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a001348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00134c:	4680      	mov	r8, r0
1a00134e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001350:	f7ff fd1a 	bl	1a000d88 <tickRead>
1a001354:	4606      	mov	r6, r0
1a001356:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a001358:	f7ff fd16 	bl	1a000d88 <tickRead>
1a00135c:	1b84      	subs	r4, r0, r6
1a00135e:	eb61 0507 	sbc.w	r5, r1, r7
1a001362:	4b06      	ldr	r3, [pc, #24]	; (1a00137c <delay+0x34>)
1a001364:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001368:	4640      	mov	r0, r8
1a00136a:	4649      	mov	r1, r9
1a00136c:	f000 ffc2 	bl	1a0022f4 <__aeabi_uldivmod>
1a001370:	428d      	cmp	r5, r1
1a001372:	bf08      	it	eq
1a001374:	4284      	cmpeq	r4, r0
1a001376:	d3ef      	bcc.n	1a001358 <delay+0x10>
}
1a001378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00137c:	10000580 	.word	0x10000580

1a001380 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001380:	b510      	push	{r4, lr}
1a001382:	4604      	mov	r4, r0
1a001384:	4610      	mov	r0, r2
1a001386:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001388:	4b04      	ldr	r3, [pc, #16]	; (1a00139c <delayInit+0x1c>)
1a00138a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00138e:	f000 ffb1 	bl	1a0022f4 <__aeabi_uldivmod>
1a001392:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001396:	2300      	movs	r3, #0
1a001398:	7423      	strb	r3, [r4, #16]
}
1a00139a:	bd10      	pop	{r4, pc}
1a00139c:	10000580 	.word	0x10000580

1a0013a0 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0013a0:	b570      	push	{r4, r5, r6, lr}
1a0013a2:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0013a4:	7c05      	ldrb	r5, [r0, #16]
1a0013a6:	b195      	cbz	r5, 1a0013ce <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0013a8:	f7ff fcee 	bl	1a000d88 <tickRead>
1a0013ac:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0013b0:	1a82      	subs	r2, r0, r2
1a0013b2:	eb61 0303 	sbc.w	r3, r1, r3
1a0013b6:	4615      	mov	r5, r2
1a0013b8:	461e      	mov	r6, r3
1a0013ba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0013be:	429e      	cmp	r6, r3
1a0013c0:	bf08      	it	eq
1a0013c2:	4295      	cmpeq	r5, r2
1a0013c4:	d30b      	bcc.n	1a0013de <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a0013c6:	2300      	movs	r3, #0
1a0013c8:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a0013ca:	2501      	movs	r5, #1
1a0013cc:	e005      	b.n	1a0013da <delayRead+0x3a>
      delay->startTime = tickRead();
1a0013ce:	f7ff fcdb 	bl	1a000d88 <tickRead>
1a0013d2:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0013d6:	2301      	movs	r3, #1
1a0013d8:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a0013da:	4628      	mov	r0, r5
1a0013dc:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a0013de:	2500      	movs	r5, #0
1a0013e0:	e7fb      	b.n	1a0013da <delayRead+0x3a>
1a0013e2:	Address 0x1a0013e2 is out of bounds.


1a0013e4 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0013e4:	2301      	movs	r3, #1
1a0013e6:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0013ea:	4b01      	ldr	r3, [pc, #4]	; (1a0013f0 <clearInterrupt+0xc>)
1a0013ec:	6258      	str	r0, [r3, #36]	; 0x24
}
1a0013ee:	4770      	bx	lr
1a0013f0:	40087000 	.word	0x40087000

1a0013f4 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a0013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0013f6:	4b12      	ldr	r3, [pc, #72]	; (1a001440 <serveInterrupt+0x4c>)
1a0013f8:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0013fa:	4b12      	ldr	r3, [pc, #72]	; (1a001444 <serveInterrupt+0x50>)
1a0013fc:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0013fe:	2301      	movs	r3, #1
1a001400:	4083      	lsls	r3, r0
1a001402:	420b      	tst	r3, r1
1a001404:	d111      	bne.n	1a00142a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001406:	4910      	ldr	r1, [pc, #64]	; (1a001448 <serveInterrupt+0x54>)
1a001408:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00140a:	4d10      	ldr	r5, [pc, #64]	; (1a00144c <serveInterrupt+0x58>)
1a00140c:	0051      	lsls	r1, r2, #1
1a00140e:	188f      	adds	r7, r1, r2
1a001410:	00fc      	lsls	r4, r7, #3
1a001412:	4627      	mov	r7, r4
1a001414:	442c      	add	r4, r5
1a001416:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a001418:	6864      	ldr	r4, [r4, #4]
1a00141a:	1b36      	subs	r6, r6, r4
1a00141c:	443d      	add	r5, r7
1a00141e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a001420:	4a08      	ldr	r2, [pc, #32]	; (1a001444 <serveInterrupt+0x50>)
1a001422:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a001424:	f7ff ffde 	bl	1a0013e4 <clearInterrupt>
}
1a001428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00142a:	4907      	ldr	r1, [pc, #28]	; (1a001448 <serveInterrupt+0x54>)
1a00142c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00142e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a001432:	00d1      	lsls	r1, r2, #3
1a001434:	4a05      	ldr	r2, [pc, #20]	; (1a00144c <serveInterrupt+0x58>)
1a001436:	440a      	add	r2, r1
1a001438:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00143a:	4a02      	ldr	r2, [pc, #8]	; (1a001444 <serveInterrupt+0x50>)
1a00143c:	61d3      	str	r3, [r2, #28]
1a00143e:	e7f1      	b.n	1a001424 <serveInterrupt+0x30>
1a001440:	1a002e14 	.word	0x1a002e14
1a001444:	40087000 	.word	0x40087000
1a001448:	40084000 	.word	0x40084000
1a00144c:	10000050 	.word	0x10000050

1a001450 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a001450:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001452:	2000      	movs	r0, #0
1a001454:	f7ff ffce 	bl	1a0013f4 <serveInterrupt>
}
1a001458:	bd08      	pop	{r3, pc}

1a00145a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00145a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00145c:	2001      	movs	r0, #1
1a00145e:	f7ff ffc9 	bl	1a0013f4 <serveInterrupt>
}
1a001462:	bd08      	pop	{r3, pc}

1a001464 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a001464:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a001466:	2002      	movs	r0, #2
1a001468:	f7ff ffc4 	bl	1a0013f4 <serveInterrupt>
}
1a00146c:	bd08      	pop	{r3, pc}
1a00146e:	Address 0x1a00146e is out of bounds.


1a001470 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001470:	2300      	movs	r3, #0
1a001472:	2b1c      	cmp	r3, #28
1a001474:	d812      	bhi.n	1a00149c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a001476:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001478:	4a09      	ldr	r2, [pc, #36]	; (1a0014a0 <Board_SetupMuxing+0x30>)
1a00147a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00147e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001482:	784a      	ldrb	r2, [r1, #1]
1a001484:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001486:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00148a:	4906      	ldr	r1, [pc, #24]	; (1a0014a4 <Board_SetupMuxing+0x34>)
1a00148c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001490:	3301      	adds	r3, #1
1a001492:	2b1c      	cmp	r3, #28
1a001494:	d9f0      	bls.n	1a001478 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001496:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00149a:	4770      	bx	lr
1a00149c:	4770      	bx	lr
1a00149e:	bf00      	nop
1a0014a0:	1a002e1c 	.word	0x1a002e1c
1a0014a4:	40086000 	.word	0x40086000

1a0014a8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0014a8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0014aa:	4a17      	ldr	r2, [pc, #92]	; (1a001508 <Board_SetupClocking+0x60>)
1a0014ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0014b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0014b4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0014b8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0014bc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0014c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0014c4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0014c8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0014cc:	2201      	movs	r2, #1
1a0014ce:	490f      	ldr	r1, [pc, #60]	; (1a00150c <Board_SetupClocking+0x64>)
1a0014d0:	2006      	movs	r0, #6
1a0014d2:	f000 f9ed 	bl	1a0018b0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0014d6:	2400      	movs	r4, #0
1a0014d8:	b14c      	cbz	r4, 1a0014ee <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0014da:	4b0b      	ldr	r3, [pc, #44]	; (1a001508 <Board_SetupClocking+0x60>)
1a0014dc:	685a      	ldr	r2, [r3, #4]
1a0014de:	f022 020c 	bic.w	r2, r2, #12
1a0014e2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0014e4:	685a      	ldr	r2, [r3, #4]
1a0014e6:	f042 0203 	orr.w	r2, r2, #3
1a0014ea:	605a      	str	r2, [r3, #4]
}
1a0014ec:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0014ee:	4808      	ldr	r0, [pc, #32]	; (1a001510 <Board_SetupClocking+0x68>)
1a0014f0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0014f4:	2301      	movs	r3, #1
1a0014f6:	788a      	ldrb	r2, [r1, #2]
1a0014f8:	7849      	ldrb	r1, [r1, #1]
1a0014fa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0014fe:	f000 fca5 	bl	1a001e4c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001502:	3401      	adds	r4, #1
1a001504:	e7e8      	b.n	1a0014d8 <Board_SetupClocking+0x30>
1a001506:	bf00      	nop
1a001508:	40043000 	.word	0x40043000
1a00150c:	0c28cb00 	.word	0x0c28cb00
1a001510:	1a002e18 	.word	0x1a002e18

1a001514 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001514:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001516:	f7ff ffab 	bl	1a001470 <Board_SetupMuxing>
    Board_SetupClocking();
1a00151a:	f7ff ffc5 	bl	1a0014a8 <Board_SetupClocking>
}
1a00151e:	bd08      	pop	{r3, pc}

1a001520 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a001520:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a001522:	4a04      	ldr	r2, [pc, #16]	; (1a001534 <SystemInit+0x14>)
1a001524:	4b04      	ldr	r3, [pc, #16]	; (1a001538 <SystemInit+0x18>)
1a001526:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a001528:	f000 f934 	bl	1a001794 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a00152c:	f7ff fff2 	bl	1a001514 <Board_SystemInit>
}
1a001530:	bd08      	pop	{r3, pc}
1a001532:	bf00      	nop
1a001534:	1a000000 	.word	0x1a000000
1a001538:	e000ed08 	.word	0xe000ed08

1a00153c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00153c:	2200      	movs	r2, #0
1a00153e:	2a05      	cmp	r2, #5
1a001540:	d819      	bhi.n	1a001576 <Board_LED_Init+0x3a>
{
1a001542:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001544:	490c      	ldr	r1, [pc, #48]	; (1a001578 <Board_LED_Init+0x3c>)
1a001546:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00154a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00154e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a001550:	4b0a      	ldr	r3, [pc, #40]	; (1a00157c <Board_LED_Init+0x40>)
1a001552:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001556:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00155a:	2001      	movs	r0, #1
1a00155c:	40a0      	lsls	r0, r4
1a00155e:	4301      	orrs	r1, r0
1a001560:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001564:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001568:	2100      	movs	r1, #0
1a00156a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00156c:	3201      	adds	r2, #1
1a00156e:	2a05      	cmp	r2, #5
1a001570:	d9e8      	bls.n	1a001544 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a001572:	bc70      	pop	{r4, r5, r6}
1a001574:	4770      	bx	lr
1a001576:	4770      	bx	lr
1a001578:	1a002e9c 	.word	0x1a002e9c
1a00157c:	400f4000 	.word	0x400f4000

1a001580 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001580:	2300      	movs	r3, #0
1a001582:	2b03      	cmp	r3, #3
1a001584:	d816      	bhi.n	1a0015b4 <Board_TEC_Init+0x34>
{
1a001586:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001588:	490b      	ldr	r1, [pc, #44]	; (1a0015b8 <Board_TEC_Init+0x38>)
1a00158a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00158e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001592:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001594:	4c09      	ldr	r4, [pc, #36]	; (1a0015bc <Board_TEC_Init+0x3c>)
1a001596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00159a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00159e:	2001      	movs	r0, #1
1a0015a0:	40a8      	lsls	r0, r5
1a0015a2:	ea21 0100 	bic.w	r1, r1, r0
1a0015a6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0015aa:	3301      	adds	r3, #1
1a0015ac:	2b03      	cmp	r3, #3
1a0015ae:	d9eb      	bls.n	1a001588 <Board_TEC_Init+0x8>
    }
}
1a0015b0:	bc30      	pop	{r4, r5}
1a0015b2:	4770      	bx	lr
1a0015b4:	4770      	bx	lr
1a0015b6:	bf00      	nop
1a0015b8:	1a002e94 	.word	0x1a002e94
1a0015bc:	400f4000 	.word	0x400f4000

1a0015c0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0015c0:	2300      	movs	r3, #0
1a0015c2:	2b08      	cmp	r3, #8
1a0015c4:	d816      	bhi.n	1a0015f4 <Board_GPIO_Init+0x34>
{
1a0015c6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0015c8:	490b      	ldr	r1, [pc, #44]	; (1a0015f8 <Board_GPIO_Init+0x38>)
1a0015ca:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0015ce:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0015d2:	784d      	ldrb	r5, [r1, #1]
1a0015d4:	4c09      	ldr	r4, [pc, #36]	; (1a0015fc <Board_GPIO_Init+0x3c>)
1a0015d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0015da:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0015de:	2001      	movs	r0, #1
1a0015e0:	40a8      	lsls	r0, r5
1a0015e2:	ea21 0100 	bic.w	r1, r1, r0
1a0015e6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0015ea:	3301      	adds	r3, #1
1a0015ec:	2b08      	cmp	r3, #8
1a0015ee:	d9eb      	bls.n	1a0015c8 <Board_GPIO_Init+0x8>
    }
}
1a0015f0:	bc30      	pop	{r4, r5}
1a0015f2:	4770      	bx	lr
1a0015f4:	4770      	bx	lr
1a0015f6:	bf00      	nop
1a0015f8:	1a002ea8 	.word	0x1a002ea8
1a0015fc:	400f4000 	.word	0x400f4000

1a001600 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a001600:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a001602:	4c0b      	ldr	r4, [pc, #44]	; (1a001630 <Board_SPI_Init+0x30>)
1a001604:	4620      	mov	r0, r4
1a001606:	f000 f8a7 	bl	1a001758 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00160a:	6863      	ldr	r3, [r4, #4]
1a00160c:	f023 0304 	bic.w	r3, r3, #4
1a001610:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001612:	6823      	ldr	r3, [r4, #0]
1a001614:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001618:	f043 0307 	orr.w	r3, r3, #7
1a00161c:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00161e:	4905      	ldr	r1, [pc, #20]	; (1a001634 <Board_SPI_Init+0x34>)
1a001620:	4620      	mov	r0, r4
1a001622:	f000 f87a 	bl	1a00171a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001626:	6863      	ldr	r3, [r4, #4]
1a001628:	f043 0302 	orr.w	r3, r3, #2
1a00162c:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a00162e:	bd10      	pop	{r4, pc}
1a001630:	400c5000 	.word	0x400c5000
1a001634:	000186a0 	.word	0x000186a0

1a001638 <Board_I2C_Init>:
{
1a001638:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a00163a:	2000      	movs	r0, #0
1a00163c:	f000 fd98 	bl	1a002170 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001640:	4b04      	ldr	r3, [pc, #16]	; (1a001654 <Board_I2C_Init+0x1c>)
1a001642:	f640 0208 	movw	r2, #2056	; 0x808
1a001646:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00164a:	4903      	ldr	r1, [pc, #12]	; (1a001658 <Board_I2C_Init+0x20>)
1a00164c:	2000      	movs	r0, #0
1a00164e:	f000 fda1 	bl	1a002194 <Chip_I2C_SetClockRate>
}
1a001652:	bd08      	pop	{r3, pc}
1a001654:	40086000 	.word	0x40086000
1a001658:	000f4240 	.word	0x000f4240

1a00165c <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a00165c:	b510      	push	{r4, lr}
1a00165e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001660:	4c08      	ldr	r4, [pc, #32]	; (1a001684 <Board_ADC_Init+0x28>)
1a001662:	4669      	mov	r1, sp
1a001664:	4620      	mov	r0, r4
1a001666:	f000 f8e3 	bl	1a001830 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00166a:	4a07      	ldr	r2, [pc, #28]	; (1a001688 <Board_ADC_Init+0x2c>)
1a00166c:	4669      	mov	r1, sp
1a00166e:	4620      	mov	r0, r4
1a001670:	f000 f8fe 	bl	1a001870 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001674:	2200      	movs	r2, #0
1a001676:	4669      	mov	r1, sp
1a001678:	4620      	mov	r0, r4
1a00167a:	f000 f912 	bl	1a0018a2 <Chip_ADC_SetResolution>
}
1a00167e:	b002      	add	sp, #8
1a001680:	bd10      	pop	{r4, pc}
1a001682:	bf00      	nop
1a001684:	400e3000 	.word	0x400e3000
1a001688:	00061a80 	.word	0x00061a80

1a00168c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a00168c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00168e:	4c07      	ldr	r4, [pc, #28]	; (1a0016ac <Board_Debug_Init+0x20>)
1a001690:	4620      	mov	r0, r4
1a001692:	f000 fc9f 	bl	1a001fd4 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001696:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00169a:	4620      	mov	r0, r4
1a00169c:	f000 fce4 	bl	1a002068 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a0016a0:	2303      	movs	r3, #3
1a0016a2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0016a4:	2301      	movs	r3, #1
1a0016a6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0016a8:	bd10      	pop	{r4, pc}
1a0016aa:	bf00      	nop
1a0016ac:	400c1000 	.word	0x400c1000

1a0016b0 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0016b0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0016b2:	f7ff ffeb 	bl	1a00168c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0016b6:	4808      	ldr	r0, [pc, #32]	; (1a0016d8 <Board_Init+0x28>)
1a0016b8:	f000 f86a 	bl	1a001790 <Chip_GPIO_Init>

   Board_LED_Init();
1a0016bc:	f7ff ff3e 	bl	1a00153c <Board_LED_Init>
   Board_TEC_Init();
1a0016c0:	f7ff ff5e 	bl	1a001580 <Board_TEC_Init>
   Board_SPI_Init();
1a0016c4:	f7ff ff9c 	bl	1a001600 <Board_SPI_Init>
   Board_GPIO_Init();
1a0016c8:	f7ff ff7a 	bl	1a0015c0 <Board_GPIO_Init>
   Board_I2C_Init();
1a0016cc:	f7ff ffb4 	bl	1a001638 <Board_I2C_Init>
   Board_ADC_Init();
1a0016d0:	f7ff ffc4 	bl	1a00165c <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a0016d4:	bd08      	pop	{r3, pc}
1a0016d6:	bf00      	nop
1a0016d8:	400f4000 	.word	0x400f4000

1a0016dc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0016dc:	4b03      	ldr	r3, [pc, #12]	; (1a0016ec <Chip_SSP_GetClockIndex+0x10>)
1a0016de:	4298      	cmp	r0, r3
1a0016e0:	d001      	beq.n	1a0016e6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0016e2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0016e4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0016e6:	20a5      	movs	r0, #165	; 0xa5
1a0016e8:	4770      	bx	lr
1a0016ea:	bf00      	nop
1a0016ec:	400c5000 	.word	0x400c5000

1a0016f0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0016f0:	4b04      	ldr	r3, [pc, #16]	; (1a001704 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0016f2:	4298      	cmp	r0, r3
1a0016f4:	d002      	beq.n	1a0016fc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0016f6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0016fa:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0016fc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001700:	4770      	bx	lr
1a001702:	bf00      	nop
1a001704:	400c5000 	.word	0x400c5000

1a001708 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001708:	6803      	ldr	r3, [r0, #0]
1a00170a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00170e:	0209      	lsls	r1, r1, #8
1a001710:	b289      	uxth	r1, r1
1a001712:	4319      	orrs	r1, r3
1a001714:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001716:	6102      	str	r2, [r0, #16]
}
1a001718:	4770      	bx	lr

1a00171a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00171a:	b570      	push	{r4, r5, r6, lr}
1a00171c:	4606      	mov	r6, r0
1a00171e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001720:	f7ff ffe6 	bl	1a0016f0 <Chip_SSP_GetPeriphClockIndex>
1a001724:	f000 fc10 	bl	1a001f48 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001728:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00172a:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a00172e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001730:	e000      	b.n	1a001734 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001732:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001734:	42ab      	cmp	r3, r5
1a001736:	d90b      	bls.n	1a001750 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001738:	1c4c      	adds	r4, r1, #1
1a00173a:	fb02 f304 	mul.w	r3, r2, r4
1a00173e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001742:	429d      	cmp	r5, r3
1a001744:	d2f6      	bcs.n	1a001734 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001746:	2cff      	cmp	r4, #255	; 0xff
1a001748:	d9f3      	bls.n	1a001732 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00174a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00174c:	2100      	movs	r1, #0
1a00174e:	e7f1      	b.n	1a001734 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001750:	4630      	mov	r0, r6
1a001752:	f7ff ffd9 	bl	1a001708 <Chip_SSP_SetClockRate>
}
1a001756:	bd70      	pop	{r4, r5, r6, pc}

1a001758 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001758:	b510      	push	{r4, lr}
1a00175a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00175c:	f7ff ffbe 	bl	1a0016dc <Chip_SSP_GetClockIndex>
1a001760:	f000 fbd8 	bl	1a001f14 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001764:	4620      	mov	r0, r4
1a001766:	f7ff ffc3 	bl	1a0016f0 <Chip_SSP_GetPeriphClockIndex>
1a00176a:	f000 fbd3 	bl	1a001f14 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00176e:	6863      	ldr	r3, [r4, #4]
1a001770:	f023 0304 	bic.w	r3, r3, #4
1a001774:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001776:	6823      	ldr	r3, [r4, #0]
1a001778:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00177c:	f043 0307 	orr.w	r3, r3, #7
1a001780:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001782:	4902      	ldr	r1, [pc, #8]	; (1a00178c <Chip_SSP_Init+0x34>)
1a001784:	4620      	mov	r0, r4
1a001786:	f7ff ffc8 	bl	1a00171a <Chip_SSP_SetBitRate>
}
1a00178a:	bd10      	pop	{r4, pc}
1a00178c:	000186a0 	.word	0x000186a0

1a001790 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001790:	4770      	bx	lr
1a001792:	Address 0x1a001792 is out of bounds.


1a001794 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001794:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a001796:	4b0f      	ldr	r3, [pc, #60]	; (1a0017d4 <fpuInit+0x40>)
1a001798:	681b      	ldr	r3, [r3, #0]
1a00179a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a00179c:	4b0e      	ldr	r3, [pc, #56]	; (1a0017d8 <fpuInit+0x44>)
1a00179e:	681b      	ldr	r3, [r3, #0]
1a0017a0:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0017a2:	9a02      	ldr	r2, [sp, #8]
1a0017a4:	4b0d      	ldr	r3, [pc, #52]	; (1a0017dc <fpuInit+0x48>)
1a0017a6:	429a      	cmp	r2, r3
1a0017a8:	d00c      	beq.n	1a0017c4 <fpuInit+0x30>
1a0017aa:	2300      	movs	r3, #0

	if (vfpPresent) {
1a0017ac:	b143      	cbz	r3, 1a0017c0 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a0017ae:	4a0c      	ldr	r2, [pc, #48]	; (1a0017e0 <fpuInit+0x4c>)
1a0017b0:	6813      	ldr	r3, [r2, #0]
1a0017b2:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0017b4:	9b03      	ldr	r3, [sp, #12]
1a0017b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0017ba:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0017bc:	9b03      	ldr	r3, [sp, #12]
1a0017be:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0017c0:	b004      	add	sp, #16
1a0017c2:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0017c4:	9a01      	ldr	r2, [sp, #4]
1a0017c6:	4b07      	ldr	r3, [pc, #28]	; (1a0017e4 <fpuInit+0x50>)
1a0017c8:	429a      	cmp	r2, r3
1a0017ca:	d001      	beq.n	1a0017d0 <fpuInit+0x3c>
1a0017cc:	2300      	movs	r3, #0
1a0017ce:	e7ed      	b.n	1a0017ac <fpuInit+0x18>
1a0017d0:	2301      	movs	r3, #1
1a0017d2:	e7eb      	b.n	1a0017ac <fpuInit+0x18>
1a0017d4:	e000ef40 	.word	0xe000ef40
1a0017d8:	e000ef44 	.word	0xe000ef44
1a0017dc:	10110021 	.word	0x10110021
1a0017e0:	e000ed88 	.word	0xe000ed88
1a0017e4:	11000011 	.word	0x11000011

1a0017e8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0017e8:	4b03      	ldr	r3, [pc, #12]	; (1a0017f8 <Chip_ADC_GetClockIndex+0x10>)
1a0017ea:	4298      	cmp	r0, r3
1a0017ec:	d001      	beq.n	1a0017f2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0017ee:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0017f0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0017f2:	2004      	movs	r0, #4
1a0017f4:	4770      	bx	lr
1a0017f6:	bf00      	nop
1a0017f8:	400e4000 	.word	0x400e4000

1a0017fc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0017fc:	b570      	push	{r4, r5, r6, lr}
1a0017fe:	460d      	mov	r5, r1
1a001800:	4614      	mov	r4, r2
1a001802:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001804:	f7ff fff0 	bl	1a0017e8 <Chip_ADC_GetClockIndex>
1a001808:	f000 fb9e 	bl	1a001f48 <Chip_Clock_GetRate>
	if (burstMode) {
1a00180c:	b965      	cbnz	r5, 1a001828 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00180e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001812:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001816:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00181a:	0064      	lsls	r4, r4, #1
1a00181c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001820:	b2c0      	uxtb	r0, r0
1a001822:	3801      	subs	r0, #1
	return div;
}
1a001824:	b2c0      	uxtb	r0, r0
1a001826:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a001828:	fb04 f406 	mul.w	r4, r4, r6
1a00182c:	e7f3      	b.n	1a001816 <getClkDiv+0x1a>
1a00182e:	Address 0x1a00182e is out of bounds.


1a001830 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001830:	b538      	push	{r3, r4, r5, lr}
1a001832:	4605      	mov	r5, r0
1a001834:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001836:	f7ff ffd7 	bl	1a0017e8 <Chip_ADC_GetClockIndex>
1a00183a:	2301      	movs	r3, #1
1a00183c:	461a      	mov	r2, r3
1a00183e:	4619      	mov	r1, r3
1a001840:	f000 fb4a 	bl	1a001ed8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001844:	2100      	movs	r1, #0
1a001846:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001848:	4a08      	ldr	r2, [pc, #32]	; (1a00186c <Chip_ADC_Init+0x3c>)
1a00184a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00184c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00184e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001850:	230b      	movs	r3, #11
1a001852:	4628      	mov	r0, r5
1a001854:	f7ff ffd2 	bl	1a0017fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001858:	0200      	lsls	r0, r0, #8
1a00185a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00185e:	7920      	ldrb	r0, [r4, #4]
1a001860:	0440      	lsls	r0, r0, #17
1a001862:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001866:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001868:	6028      	str	r0, [r5, #0]
}
1a00186a:	bd38      	pop	{r3, r4, r5, pc}
1a00186c:	00061a80 	.word	0x00061a80

1a001870 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001870:	b570      	push	{r4, r5, r6, lr}
1a001872:	4605      	mov	r5, r0
1a001874:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001876:	6804      	ldr	r4, [r0, #0]
1a001878:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00187c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001880:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001882:	790b      	ldrb	r3, [r1, #4]
1a001884:	f1c3 030b 	rsb	r3, r3, #11
1a001888:	b2db      	uxtb	r3, r3
1a00188a:	7949      	ldrb	r1, [r1, #5]
1a00188c:	f7ff ffb6 	bl	1a0017fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001890:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001894:	7930      	ldrb	r0, [r6, #4]
1a001896:	0440      	lsls	r0, r0, #17
1a001898:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00189c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00189e:	6028      	str	r0, [r5, #0]
}
1a0018a0:	bd70      	pop	{r4, r5, r6, pc}

1a0018a2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0018a2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0018a4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0018a6:	680a      	ldr	r2, [r1, #0]
1a0018a8:	f7ff ffe2 	bl	1a001870 <Chip_ADC_SetSampleRate>
}
1a0018ac:	bd08      	pop	{r3, pc}
1a0018ae:	Address 0x1a0018ae is out of bounds.


1a0018b0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0018b0:	b570      	push	{r4, r5, r6, lr}
1a0018b2:	b08a      	sub	sp, #40	; 0x28
1a0018b4:	4605      	mov	r5, r0
1a0018b6:	460e      	mov	r6, r1
1a0018b8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0018ba:	f242 7310 	movw	r3, #10000	; 0x2710
1a0018be:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0018c0:	2806      	cmp	r0, #6
1a0018c2:	d018      	beq.n	1a0018f6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0018c4:	2300      	movs	r3, #0
1a0018c6:	2201      	movs	r2, #1
1a0018c8:	4629      	mov	r1, r5
1a0018ca:	2004      	movs	r0, #4
1a0018cc:	f000 fabe 	bl	1a001e4c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0018d0:	4a49      	ldr	r2, [pc, #292]	; (1a0019f8 <Chip_SetupCoreClock+0x148>)
1a0018d2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0018d4:	f043 0301 	orr.w	r3, r3, #1
1a0018d8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0018da:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0018de:	a901      	add	r1, sp, #4
1a0018e0:	4630      	mov	r0, r6
1a0018e2:	f000 fa2b 	bl	1a001d3c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0018e6:	4b45      	ldr	r3, [pc, #276]	; (1a0019fc <Chip_SetupCoreClock+0x14c>)
1a0018e8:	429e      	cmp	r6, r3
1a0018ea:	d916      	bls.n	1a00191a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0018ec:	9b01      	ldr	r3, [sp, #4]
1a0018ee:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0018f2:	d003      	beq.n	1a0018fc <Chip_SetupCoreClock+0x4c>
1a0018f4:	e7fe      	b.n	1a0018f4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0018f6:	f000 f983 	bl	1a001c00 <Chip_Clock_EnableCrystal>
1a0018fa:	e7e3      	b.n	1a0018c4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0018fc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001900:	d005      	beq.n	1a00190e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001906:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001908:	2500      	movs	r5, #0
			direct = 1;
1a00190a:	2601      	movs	r6, #1
1a00190c:	e007      	b.n	1a00191e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00190e:	9b04      	ldr	r3, [sp, #16]
1a001910:	3301      	adds	r3, #1
1a001912:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001914:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001916:	2600      	movs	r6, #0
1a001918:	e001      	b.n	1a00191e <Chip_SetupCoreClock+0x6e>
1a00191a:	2500      	movs	r5, #0
1a00191c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00191e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001922:	9b01      	ldr	r3, [sp, #4]
1a001924:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001928:	9a05      	ldr	r2, [sp, #20]
1a00192a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00192e:	9a03      	ldr	r2, [sp, #12]
1a001930:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001934:	9a04      	ldr	r2, [sp, #16]
1a001936:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00193a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00193e:	4a2e      	ldr	r2, [pc, #184]	; (1a0019f8 <Chip_SetupCoreClock+0x148>)
1a001940:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001942:	4b2d      	ldr	r3, [pc, #180]	; (1a0019f8 <Chip_SetupCoreClock+0x148>)
1a001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001946:	f013 0f01 	tst.w	r3, #1
1a00194a:	d0fa      	beq.n	1a001942 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00194c:	2300      	movs	r3, #0
1a00194e:	2201      	movs	r2, #1
1a001950:	2109      	movs	r1, #9
1a001952:	2004      	movs	r0, #4
1a001954:	f000 fa7a 	bl	1a001e4c <Chip_Clock_SetBaseClock>

	if (direct) {
1a001958:	b1fe      	cbz	r6, 1a00199a <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00195a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00195e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001960:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001962:	1e5a      	subs	r2, r3, #1
1a001964:	9209      	str	r2, [sp, #36]	; 0x24
1a001966:	2b00      	cmp	r3, #0
1a001968:	d1fa      	bne.n	1a001960 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00196a:	9b01      	ldr	r3, [sp, #4]
1a00196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001970:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001972:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001976:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00197a:	9a05      	ldr	r2, [sp, #20]
1a00197c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001980:	9a03      	ldr	r2, [sp, #12]
1a001982:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001986:	9a04      	ldr	r2, [sp, #16]
1a001988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00198c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001990:	4a19      	ldr	r2, [pc, #100]	; (1a0019f8 <Chip_SetupCoreClock+0x148>)
1a001992:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001994:	b36c      	cbz	r4, 1a0019f2 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001996:	2400      	movs	r4, #0
1a001998:	e029      	b.n	1a0019ee <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00199a:	2d00      	cmp	r5, #0
1a00199c:	d0fa      	beq.n	1a001994 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00199e:	f242 7310 	movw	r3, #10000	; 0x2710
1a0019a2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0019a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0019a6:	1e5a      	subs	r2, r3, #1
1a0019a8:	9209      	str	r2, [sp, #36]	; 0x24
1a0019aa:	2b00      	cmp	r3, #0
1a0019ac:	d1fa      	bne.n	1a0019a4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0019ae:	9b04      	ldr	r3, [sp, #16]
1a0019b0:	1e5a      	subs	r2, r3, #1
1a0019b2:	9204      	str	r2, [sp, #16]
1a0019b4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0019b8:	9b01      	ldr	r3, [sp, #4]
1a0019ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0019be:	9905      	ldr	r1, [sp, #20]
1a0019c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0019c4:	9903      	ldr	r1, [sp, #12]
1a0019c6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0019ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0019ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0019d2:	4a09      	ldr	r2, [pc, #36]	; (1a0019f8 <Chip_SetupCoreClock+0x148>)
1a0019d4:	6453      	str	r3, [r2, #68]	; 0x44
1a0019d6:	e7dd      	b.n	1a001994 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0019d8:	4809      	ldr	r0, [pc, #36]	; (1a001a00 <Chip_SetupCoreClock+0x150>)
1a0019da:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0019de:	78cb      	ldrb	r3, [r1, #3]
1a0019e0:	788a      	ldrb	r2, [r1, #2]
1a0019e2:	7849      	ldrb	r1, [r1, #1]
1a0019e4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0019e8:	f000 fa30 	bl	1a001e4c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0019ec:	3401      	adds	r4, #1
1a0019ee:	2c11      	cmp	r4, #17
1a0019f0:	d9f2      	bls.n	1a0019d8 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0019f2:	b00a      	add	sp, #40	; 0x28
1a0019f4:	bd70      	pop	{r4, r5, r6, pc}
1a0019f6:	bf00      	nop
1a0019f8:	40050000 	.word	0x40050000
1a0019fc:	068e7780 	.word	0x068e7780
1a001a00:	1a002ec0 	.word	0x1a002ec0

1a001a04 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001a04:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001a06:	680b      	ldr	r3, [r1, #0]
1a001a08:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001a0c:	d002      	beq.n	1a001a14 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001a12:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001a14:	4607      	mov	r7, r0
1a001a16:	2501      	movs	r5, #1
1a001a18:	e03b      	b.n	1a001a92 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001a1a:	694b      	ldr	r3, [r1, #20]
1a001a1c:	fb03 f302 	mul.w	r3, r3, r2
1a001a20:	fbb3 f3f5 	udiv	r3, r3, r5
1a001a24:	e014      	b.n	1a001a50 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001a26:	461c      	mov	r4, r3
1a001a28:	e020      	b.n	1a001a6c <pll_calc_divs+0x68>
		return -val;
1a001a2a:	f1cc 0c00 	rsb	ip, ip, #0
1a001a2e:	e020      	b.n	1a001a72 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a001a30:	3201      	adds	r2, #1
1a001a32:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001a36:	dc26      	bgt.n	1a001a86 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a001a38:	680c      	ldr	r4, [r1, #0]
1a001a3a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001a3e:	d0ec      	beq.n	1a001a1a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001a40:	1c73      	adds	r3, r6, #1
1a001a42:	fa02 fc03 	lsl.w	ip, r2, r3
1a001a46:	694b      	ldr	r3, [r1, #20]
1a001a48:	fb03 f30c 	mul.w	r3, r3, ip
1a001a4c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001a50:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a001aa0 <pll_calc_divs+0x9c>
1a001a54:	4563      	cmp	r3, ip
1a001a56:	d9eb      	bls.n	1a001a30 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001a58:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a001aa4 <pll_calc_divs+0xa0>
1a001a5c:	4563      	cmp	r3, ip
1a001a5e:	d812      	bhi.n	1a001a86 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a001a60:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001a64:	d1df      	bne.n	1a001a26 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a001a66:	1c74      	adds	r4, r6, #1
1a001a68:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a001a6c:	ebb0 0c04 	subs.w	ip, r0, r4
1a001a70:	d4db      	bmi.n	1a001a2a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a001a72:	4567      	cmp	r7, ip
1a001a74:	d9dc      	bls.n	1a001a30 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a001a76:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001a78:	1c77      	adds	r7, r6, #1
1a001a7a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001a7c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001a7e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001a80:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001a82:	4667      	mov	r7, ip
1a001a84:	e7d4      	b.n	1a001a30 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a001a86:	3601      	adds	r6, #1
1a001a88:	2e03      	cmp	r6, #3
1a001a8a:	dc01      	bgt.n	1a001a90 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a001a8c:	2201      	movs	r2, #1
1a001a8e:	e7d0      	b.n	1a001a32 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a001a90:	3501      	adds	r5, #1
1a001a92:	2d04      	cmp	r5, #4
1a001a94:	dc01      	bgt.n	1a001a9a <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a001a96:	2600      	movs	r6, #0
1a001a98:	e7f6      	b.n	1a001a88 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a001a9a:	bcf0      	pop	{r4, r5, r6, r7}
1a001a9c:	4770      	bx	lr
1a001a9e:	bf00      	nop
1a001aa0:	094c5eff 	.word	0x094c5eff
1a001aa4:	1312d000 	.word	0x1312d000

1a001aa8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001aaa:	b099      	sub	sp, #100	; 0x64
1a001aac:	4605      	mov	r5, r0
1a001aae:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001ab0:	225c      	movs	r2, #92	; 0x5c
1a001ab2:	2100      	movs	r1, #0
1a001ab4:	a801      	add	r0, sp, #4
1a001ab6:	f000 fdc1 	bl	1a00263c <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001aba:	2380      	movs	r3, #128	; 0x80
1a001abc:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001abe:	6963      	ldr	r3, [r4, #20]
1a001ac0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001ac2:	7923      	ldrb	r3, [r4, #4]
1a001ac4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001ac8:	4669      	mov	r1, sp
1a001aca:	4628      	mov	r0, r5
1a001acc:	f7ff ff9a 	bl	1a001a04 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001ad0:	9b06      	ldr	r3, [sp, #24]
1a001ad2:	42ab      	cmp	r3, r5
1a001ad4:	d027      	beq.n	1a001b26 <pll_get_frac+0x7e>
	if (val < 0)
1a001ad6:	1aeb      	subs	r3, r5, r3
1a001ad8:	d42e      	bmi.n	1a001b38 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001ada:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001ae2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001ae4:	6963      	ldr	r3, [r4, #20]
1a001ae6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001ae8:	7923      	ldrb	r3, [r4, #4]
1a001aea:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001aee:	a910      	add	r1, sp, #64	; 0x40
1a001af0:	4628      	mov	r0, r5
1a001af2:	f7ff ff87 	bl	1a001a04 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001af6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001af8:	42ab      	cmp	r3, r5
1a001afa:	d01f      	beq.n	1a001b3c <pll_get_frac+0x94>
	if (val < 0)
1a001afc:	1aeb      	subs	r3, r5, r3
1a001afe:	d425      	bmi.n	1a001b4c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001b00:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001b02:	4b2b      	ldr	r3, [pc, #172]	; (1a001bb0 <pll_get_frac+0x108>)
1a001b04:	429d      	cmp	r5, r3
1a001b06:	d923      	bls.n	1a001b50 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001b0a:	1aed      	subs	r5, r5, r3
1a001b0c:	d433      	bmi.n	1a001b76 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001b0e:	42ae      	cmp	r6, r5
1a001b10:	dc3b      	bgt.n	1a001b8a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001b12:	42be      	cmp	r6, r7
1a001b14:	dc31      	bgt.n	1a001b7a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001b16:	466d      	mov	r5, sp
1a001b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b24:	e006      	b.n	1a001b34 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001b26:	466d      	mov	r5, sp
1a001b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001b34:	b019      	add	sp, #100	; 0x64
1a001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001b38:	425b      	negs	r3, r3
1a001b3a:	e7ce      	b.n	1a001ada <pll_get_frac+0x32>
		*ppll = pll[2];
1a001b3c:	ad10      	add	r5, sp, #64	; 0x40
1a001b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001b4a:	e7f3      	b.n	1a001b34 <pll_get_frac+0x8c>
		return -val;
1a001b4c:	425b      	negs	r3, r3
1a001b4e:	e7d7      	b.n	1a001b00 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001b50:	2340      	movs	r3, #64	; 0x40
1a001b52:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001b54:	6963      	ldr	r3, [r4, #20]
1a001b56:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001b58:	a908      	add	r1, sp, #32
1a001b5a:	4628      	mov	r0, r5
1a001b5c:	f7ff ff52 	bl	1a001a04 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001b62:	42ab      	cmp	r3, r5
1a001b64:	d1d0      	bne.n	1a001b08 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001b66:	ad08      	add	r5, sp, #32
1a001b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001b74:	e7de      	b.n	1a001b34 <pll_get_frac+0x8c>
		return -val;
1a001b76:	426d      	negs	r5, r5
1a001b78:	e7c9      	b.n	1a001b0e <pll_get_frac+0x66>
			*ppll = pll[2];
1a001b7a:	ad10      	add	r5, sp, #64	; 0x40
1a001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b88:	e7d4      	b.n	1a001b34 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001b8a:	42af      	cmp	r7, r5
1a001b8c:	db07      	blt.n	1a001b9e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001b8e:	ad08      	add	r5, sp, #32
1a001b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b9c:	e7ca      	b.n	1a001b34 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001b9e:	ad10      	add	r5, sp, #64	; 0x40
1a001ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001ba4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001bac:	e7c2      	b.n	1a001b34 <pll_get_frac+0x8c>
1a001bae:	bf00      	nop
1a001bb0:	068e7780 	.word	0x068e7780

1a001bb4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001bb4:	b430      	push	{r4, r5}
1a001bb6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001bb8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001bba:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001bbc:	e000      	b.n	1a001bc0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001bbe:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001bc0:	281c      	cmp	r0, #28
1a001bc2:	d118      	bne.n	1a001bf6 <Chip_Clock_FindBaseClock+0x42>
1a001bc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001bc8:	0051      	lsls	r1, r2, #1
1a001bca:	4a0c      	ldr	r2, [pc, #48]	; (1a001bfc <Chip_Clock_FindBaseClock+0x48>)
1a001bcc:	440a      	add	r2, r1
1a001bce:	7914      	ldrb	r4, [r2, #4]
1a001bd0:	4284      	cmp	r4, r0
1a001bd2:	d010      	beq.n	1a001bf6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001bd4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001bd8:	004a      	lsls	r2, r1, #1
1a001bda:	4908      	ldr	r1, [pc, #32]	; (1a001bfc <Chip_Clock_FindBaseClock+0x48>)
1a001bdc:	5a8a      	ldrh	r2, [r1, r2]
1a001bde:	42aa      	cmp	r2, r5
1a001be0:	d8ed      	bhi.n	1a001bbe <Chip_Clock_FindBaseClock+0xa>
1a001be2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001be6:	0051      	lsls	r1, r2, #1
1a001be8:	4a04      	ldr	r2, [pc, #16]	; (1a001bfc <Chip_Clock_FindBaseClock+0x48>)
1a001bea:	440a      	add	r2, r1
1a001bec:	8852      	ldrh	r2, [r2, #2]
1a001bee:	42aa      	cmp	r2, r5
1a001bf0:	d3e5      	bcc.n	1a001bbe <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001bf2:	4620      	mov	r0, r4
1a001bf4:	e7e4      	b.n	1a001bc0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001bf6:	bc30      	pop	{r4, r5}
1a001bf8:	4770      	bx	lr
1a001bfa:	bf00      	nop
1a001bfc:	1a002f14 	.word	0x1a002f14

1a001c00 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001c00:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001c06:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001c08:	4a0d      	ldr	r2, [pc, #52]	; (1a001c40 <Chip_Clock_EnableCrystal+0x40>)
1a001c0a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001c0c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001c10:	6992      	ldr	r2, [r2, #24]
1a001c12:	428a      	cmp	r2, r1
1a001c14:	d001      	beq.n	1a001c1a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001c16:	4a0a      	ldr	r2, [pc, #40]	; (1a001c40 <Chip_Clock_EnableCrystal+0x40>)
1a001c18:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001c1a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001c1e:	4a09      	ldr	r2, [pc, #36]	; (1a001c44 <Chip_Clock_EnableCrystal+0x44>)
1a001c20:	6811      	ldr	r1, [r2, #0]
1a001c22:	4a09      	ldr	r2, [pc, #36]	; (1a001c48 <Chip_Clock_EnableCrystal+0x48>)
1a001c24:	4291      	cmp	r1, r2
1a001c26:	d901      	bls.n	1a001c2c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001c28:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001c2c:	4a04      	ldr	r2, [pc, #16]	; (1a001c40 <Chip_Clock_EnableCrystal+0x40>)
1a001c2e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001c30:	9b01      	ldr	r3, [sp, #4]
1a001c32:	1e5a      	subs	r2, r3, #1
1a001c34:	9201      	str	r2, [sp, #4]
1a001c36:	2b00      	cmp	r3, #0
1a001c38:	d1fa      	bne.n	1a001c30 <Chip_Clock_EnableCrystal+0x30>
}
1a001c3a:	b002      	add	sp, #8
1a001c3c:	4770      	bx	lr
1a001c3e:	bf00      	nop
1a001c40:	40050000 	.word	0x40050000
1a001c44:	1a002ebc 	.word	0x1a002ebc
1a001c48:	01312cff 	.word	0x01312cff

1a001c4c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001c4c:	3012      	adds	r0, #18
1a001c4e:	4b05      	ldr	r3, [pc, #20]	; (1a001c64 <Chip_Clock_GetDividerSource+0x18>)
1a001c50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001c54:	f010 0f01 	tst.w	r0, #1
1a001c58:	d102      	bne.n	1a001c60 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001c5a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001c5e:	4770      	bx	lr
		return CLKINPUT_PD;
1a001c60:	2011      	movs	r0, #17
}
1a001c62:	4770      	bx	lr
1a001c64:	40050000 	.word	0x40050000

1a001c68 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001c68:	f100 0212 	add.w	r2, r0, #18
1a001c6c:	4b03      	ldr	r3, [pc, #12]	; (1a001c7c <Chip_Clock_GetDividerDivisor+0x14>)
1a001c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001c72:	4b03      	ldr	r3, [pc, #12]	; (1a001c80 <Chip_Clock_GetDividerDivisor+0x18>)
1a001c74:	5c18      	ldrb	r0, [r3, r0]
}
1a001c76:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001c7a:	4770      	bx	lr
1a001c7c:	40050000 	.word	0x40050000
1a001c80:	1a002f0c 	.word	0x1a002f0c

1a001c84 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001c84:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001c86:	2810      	cmp	r0, #16
1a001c88:	d80a      	bhi.n	1a001ca0 <Chip_Clock_GetClockInputHz+0x1c>
1a001c8a:	e8df f000 	tbb	[pc, r0]
1a001c8e:	0b42      	.short	0x0b42
1a001c90:	091f160d 	.word	0x091f160d
1a001c94:	2b282522 	.word	0x2b282522
1a001c98:	322e0909 	.word	0x322e0909
1a001c9c:	3a36      	.short	0x3a36
1a001c9e:	3e          	.byte	0x3e
1a001c9f:	00          	.byte	0x00
	uint32_t rate = 0;
1a001ca0:	2000      	movs	r0, #0
1a001ca2:	e038      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001ca4:	481e      	ldr	r0, [pc, #120]	; (1a001d20 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001ca6:	e036      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001ca8:	4b1e      	ldr	r3, [pc, #120]	; (1a001d24 <Chip_Clock_GetClockInputHz+0xa0>)
1a001caa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001cae:	f003 0307 	and.w	r3, r3, #7
1a001cb2:	2b04      	cmp	r3, #4
1a001cb4:	d130      	bne.n	1a001d18 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a001cb6:	2000      	movs	r0, #0
1a001cb8:	e02d      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001cba:	4b1a      	ldr	r3, [pc, #104]	; (1a001d24 <Chip_Clock_GetClockInputHz+0xa0>)
1a001cbc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001cc0:	f003 0307 	and.w	r3, r3, #7
1a001cc4:	2b04      	cmp	r3, #4
1a001cc6:	d029      	beq.n	1a001d1c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001cc8:	4817      	ldr	r0, [pc, #92]	; (1a001d28 <Chip_Clock_GetClockInputHz+0xa4>)
1a001cca:	e024      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001ccc:	4b17      	ldr	r3, [pc, #92]	; (1a001d2c <Chip_Clock_GetClockInputHz+0xa8>)
1a001cce:	6818      	ldr	r0, [r3, #0]
		break;
1a001cd0:	e021      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001cd2:	4b17      	ldr	r3, [pc, #92]	; (1a001d30 <Chip_Clock_GetClockInputHz+0xac>)
1a001cd4:	6818      	ldr	r0, [r3, #0]
		break;
1a001cd6:	e01e      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001cd8:	4b16      	ldr	r3, [pc, #88]	; (1a001d34 <Chip_Clock_GetClockInputHz+0xb0>)
1a001cda:	6818      	ldr	r0, [r3, #0]
		break;
1a001cdc:	e01b      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001cde:	4b15      	ldr	r3, [pc, #84]	; (1a001d34 <Chip_Clock_GetClockInputHz+0xb0>)
1a001ce0:	6858      	ldr	r0, [r3, #4]
		break;
1a001ce2:	e018      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001ce4:	f000 f86a 	bl	1a001dbc <Chip_Clock_GetMainPLLHz>
		break;
1a001ce8:	e015      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001cea:	2100      	movs	r1, #0
1a001cec:	f000 f89c 	bl	1a001e28 <Chip_Clock_GetDivRate>
		break;
1a001cf0:	e011      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001cf2:	2101      	movs	r1, #1
1a001cf4:	f000 f898 	bl	1a001e28 <Chip_Clock_GetDivRate>
		break;
1a001cf8:	e00d      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001cfa:	2102      	movs	r1, #2
1a001cfc:	f000 f894 	bl	1a001e28 <Chip_Clock_GetDivRate>
		break;
1a001d00:	e009      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001d02:	2103      	movs	r1, #3
1a001d04:	f000 f890 	bl	1a001e28 <Chip_Clock_GetDivRate>
		break;
1a001d08:	e005      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001d0a:	2104      	movs	r1, #4
1a001d0c:	f000 f88c 	bl	1a001e28 <Chip_Clock_GetDivRate>
		break;
1a001d10:	e001      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a001d12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001d16:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a001d18:	4803      	ldr	r0, [pc, #12]	; (1a001d28 <Chip_Clock_GetClockInputHz+0xa4>)
1a001d1a:	e7fc      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a001d1c:	4806      	ldr	r0, [pc, #24]	; (1a001d38 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001d1e:	e7fa      	b.n	1a001d16 <Chip_Clock_GetClockInputHz+0x92>
1a001d20:	00b71b00 	.word	0x00b71b00
1a001d24:	40043000 	.word	0x40043000
1a001d28:	017d7840 	.word	0x017d7840
1a001d2c:	1a002e90 	.word	0x1a002e90
1a001d30:	1a002ebc 	.word	0x1a002ebc
1a001d34:	10000110 	.word	0x10000110
1a001d38:	02faf080 	.word	0x02faf080

1a001d3c <Chip_Clock_CalcMainPLLValue>:
{
1a001d3c:	b538      	push	{r3, r4, r5, lr}
1a001d3e:	4605      	mov	r5, r0
1a001d40:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001d42:	7908      	ldrb	r0, [r1, #4]
1a001d44:	f7ff ff9e 	bl	1a001c84 <Chip_Clock_GetClockInputHz>
1a001d48:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001d4a:	4b19      	ldr	r3, [pc, #100]	; (1a001db0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001d4c:	442b      	add	r3, r5
1a001d4e:	4a19      	ldr	r2, [pc, #100]	; (1a001db4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001d50:	4293      	cmp	r3, r2
1a001d52:	d821      	bhi.n	1a001d98 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001d54:	b318      	cbz	r0, 1a001d9e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001d56:	2380      	movs	r3, #128	; 0x80
1a001d58:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001d5a:	2300      	movs	r3, #0
1a001d5c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001d5e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001d60:	fbb5 f3f0 	udiv	r3, r5, r0
1a001d64:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001d66:	4a14      	ldr	r2, [pc, #80]	; (1a001db8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001d68:	4295      	cmp	r5, r2
1a001d6a:	d903      	bls.n	1a001d74 <Chip_Clock_CalcMainPLLValue+0x38>
1a001d6c:	fb03 f000 	mul.w	r0, r3, r0
1a001d70:	42a8      	cmp	r0, r5
1a001d72:	d007      	beq.n	1a001d84 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001d74:	4621      	mov	r1, r4
1a001d76:	4628      	mov	r0, r5
1a001d78:	f7ff fe96 	bl	1a001aa8 <pll_get_frac>
		if (!ppll->nsel) {
1a001d7c:	68a3      	ldr	r3, [r4, #8]
1a001d7e:	b18b      	cbz	r3, 1a001da4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001d80:	3b01      	subs	r3, #1
1a001d82:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001d84:	6923      	ldr	r3, [r4, #16]
1a001d86:	b183      	cbz	r3, 1a001daa <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001d88:	68e2      	ldr	r2, [r4, #12]
1a001d8a:	b10a      	cbz	r2, 1a001d90 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001d8c:	3a01      	subs	r2, #1
1a001d8e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001d90:	3b01      	subs	r3, #1
1a001d92:	6123      	str	r3, [r4, #16]
	return 0;
1a001d94:	2000      	movs	r0, #0
}
1a001d96:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001d98:	f04f 30ff 	mov.w	r0, #4294967295
1a001d9c:	e7fb      	b.n	1a001d96 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001d9e:	f04f 30ff 	mov.w	r0, #4294967295
1a001da2:	e7f8      	b.n	1a001d96 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001da4:	f04f 30ff 	mov.w	r0, #4294967295
1a001da8:	e7f5      	b.n	1a001d96 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001daa:	f04f 30ff 	mov.w	r0, #4294967295
1a001dae:	e7f2      	b.n	1a001d96 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001db0:	ff6b3a10 	.word	0xff6b3a10
1a001db4:	0b940510 	.word	0x0b940510
1a001db8:	094c5eff 	.word	0x094c5eff

1a001dbc <Chip_Clock_GetMainPLLHz>:
{
1a001dbc:	b530      	push	{r4, r5, lr}
1a001dbe:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001dc0:	4d17      	ldr	r5, [pc, #92]	; (1a001e20 <Chip_Clock_GetMainPLLHz+0x64>)
1a001dc2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001dc4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001dc8:	f7ff ff5c 	bl	1a001c84 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001dcc:	4b15      	ldr	r3, [pc, #84]	; (1a001e24 <Chip_Clock_GetMainPLLHz+0x68>)
1a001dce:	681b      	ldr	r3, [r3, #0]
1a001dd0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001dd2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001dd4:	f013 0f01 	tst.w	r3, #1
1a001dd8:	d01f      	beq.n	1a001e1a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a001dda:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001dde:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001de2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001de6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001dea:	3301      	adds	r3, #1
	n = nsel + 1;
1a001dec:	3201      	adds	r2, #1
	p = ptab[psel];
1a001dee:	f10d 0c08 	add.w	ip, sp, #8
1a001df2:	4461      	add	r1, ip
1a001df4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001df8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001dfc:	d108      	bne.n	1a001e10 <Chip_Clock_GetMainPLLHz+0x54>
1a001dfe:	b93d      	cbnz	r5, 1a001e10 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001e00:	0049      	lsls	r1, r1, #1
1a001e02:	fbb3 f3f1 	udiv	r3, r3, r1
1a001e06:	fbb0 f0f2 	udiv	r0, r0, r2
1a001e0a:	fb00 f003 	mul.w	r0, r0, r3
1a001e0e:	e005      	b.n	1a001e1c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001e10:	fbb0 f0f2 	udiv	r0, r0, r2
1a001e14:	fb03 f000 	mul.w	r0, r3, r0
1a001e18:	e000      	b.n	1a001e1c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a001e1a:	2000      	movs	r0, #0
}
1a001e1c:	b003      	add	sp, #12
1a001e1e:	bd30      	pop	{r4, r5, pc}
1a001e20:	40050000 	.word	0x40050000
1a001e24:	1a002f08 	.word	0x1a002f08

1a001e28 <Chip_Clock_GetDivRate>:
{
1a001e28:	b538      	push	{r3, r4, r5, lr}
1a001e2a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001e2c:	4608      	mov	r0, r1
1a001e2e:	f7ff ff0d 	bl	1a001c4c <Chip_Clock_GetDividerSource>
1a001e32:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001e34:	4620      	mov	r0, r4
1a001e36:	f7ff ff17 	bl	1a001c68 <Chip_Clock_GetDividerDivisor>
1a001e3a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001e3c:	4628      	mov	r0, r5
1a001e3e:	f7ff ff21 	bl	1a001c84 <Chip_Clock_GetClockInputHz>
1a001e42:	3401      	adds	r4, #1
}
1a001e44:	fbb0 f0f4 	udiv	r0, r0, r4
1a001e48:	bd38      	pop	{r3, r4, r5, pc}
1a001e4a:	Address 0x1a001e4a is out of bounds.


1a001e4c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001e4c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001e4e:	f100 0416 	add.w	r4, r0, #22
1a001e52:	00a4      	lsls	r4, r4, #2
1a001e54:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001e58:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001e5c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001e5e:	281b      	cmp	r0, #27
1a001e60:	d813      	bhi.n	1a001e8a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001e62:	2911      	cmp	r1, #17
1a001e64:	d01a      	beq.n	1a001e9c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001e66:	4d0e      	ldr	r5, [pc, #56]	; (1a001ea0 <Chip_Clock_SetBaseClock+0x54>)
1a001e68:	4025      	ands	r5, r4

			if (autoblocken) {
1a001e6a:	b10a      	cbz	r2, 1a001e70 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001e6c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001e70:	b10b      	cbz	r3, 1a001e76 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001e72:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001e76:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001e7a:	3016      	adds	r0, #22
1a001e7c:	0080      	lsls	r0, r0, #2
1a001e7e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e82:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e86:	6045      	str	r5, [r0, #4]
1a001e88:	e008      	b.n	1a001e9c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001e8a:	f044 0401 	orr.w	r4, r4, #1
1a001e8e:	3016      	adds	r0, #22
1a001e90:	0080      	lsls	r0, r0, #2
1a001e92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e96:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e9a:	6044      	str	r4, [r0, #4]
	}
}
1a001e9c:	bc30      	pop	{r4, r5}
1a001e9e:	4770      	bx	lr
1a001ea0:	e0fff7fe 	.word	0xe0fff7fe

1a001ea4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001ea4:	281b      	cmp	r0, #27
1a001ea6:	d80c      	bhi.n	1a001ec2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001ea8:	3016      	adds	r0, #22
1a001eaa:	0080      	lsls	r0, r0, #2
1a001eac:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001eb0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001eb4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001eb6:	f010 0f01 	tst.w	r0, #1
1a001eba:	d104      	bne.n	1a001ec6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001ebc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001ec0:	4770      	bx	lr
		return CLKINPUT_PD;
1a001ec2:	2011      	movs	r0, #17
1a001ec4:	4770      	bx	lr
		return CLKINPUT_PD;
1a001ec6:	2011      	movs	r0, #17
}
1a001ec8:	4770      	bx	lr

1a001eca <Chip_Clock_GetBaseClocktHz>:
{
1a001eca:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001ecc:	f7ff ffea 	bl	1a001ea4 <Chip_Clock_GetBaseClock>
1a001ed0:	f7ff fed8 	bl	1a001c84 <Chip_Clock_GetClockInputHz>
}
1a001ed4:	bd08      	pop	{r3, pc}
1a001ed6:	Address 0x1a001ed6 is out of bounds.


1a001ed8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001ed8:	b969      	cbnz	r1, 1a001ef6 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a001eda:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001edc:	b10a      	cbz	r2, 1a001ee2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001ede:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001ee2:	2b02      	cmp	r3, #2
1a001ee4:	d009      	beq.n	1a001efa <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001ee6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001eea:	d209      	bcs.n	1a001f00 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001eec:	3020      	adds	r0, #32
1a001eee:	4b07      	ldr	r3, [pc, #28]	; (1a001f0c <Chip_Clock_EnableOpts+0x34>)
1a001ef0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001ef4:	4770      	bx	lr
		reg |= (1 << 1);
1a001ef6:	2103      	movs	r1, #3
1a001ef8:	e7f0      	b.n	1a001edc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001efa:	f041 0120 	orr.w	r1, r1, #32
1a001efe:	e7f2      	b.n	1a001ee6 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001f00:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001f04:	4b02      	ldr	r3, [pc, #8]	; (1a001f10 <Chip_Clock_EnableOpts+0x38>)
1a001f06:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001f0a:	4770      	bx	lr
1a001f0c:	40051000 	.word	0x40051000
1a001f10:	40052000 	.word	0x40052000

1a001f14 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001f14:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001f18:	d208      	bcs.n	1a001f2c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001f1a:	4a09      	ldr	r2, [pc, #36]	; (1a001f40 <Chip_Clock_Enable+0x2c>)
1a001f1c:	3020      	adds	r0, #32
1a001f1e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f22:	f043 0301 	orr.w	r3, r3, #1
1a001f26:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001f2a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001f2c:	4a05      	ldr	r2, [pc, #20]	; (1a001f44 <Chip_Clock_Enable+0x30>)
1a001f2e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001f32:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f36:	f043 0301 	orr.w	r3, r3, #1
1a001f3a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001f3e:	4770      	bx	lr
1a001f40:	40051000 	.word	0x40051000
1a001f44:	40052000 	.word	0x40052000

1a001f48 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001f48:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001f4a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001f4e:	d309      	bcc.n	1a001f64 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001f50:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001f54:	4a0d      	ldr	r2, [pc, #52]	; (1a001f8c <Chip_Clock_GetRate+0x44>)
1a001f56:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001f5a:	f014 0f01 	tst.w	r4, #1
1a001f5e:	d107      	bne.n	1a001f70 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001f60:	2000      	movs	r0, #0
	}

	return rate;
}
1a001f62:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001f64:	f100 0320 	add.w	r3, r0, #32
1a001f68:	4a09      	ldr	r2, [pc, #36]	; (1a001f90 <Chip_Clock_GetRate+0x48>)
1a001f6a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001f6e:	e7f4      	b.n	1a001f5a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001f70:	f7ff fe20 	bl	1a001bb4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001f74:	f7ff ffa9 	bl	1a001eca <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001f78:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001f7c:	d103      	bne.n	1a001f86 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001f7e:	2301      	movs	r3, #1
		rate = rate / div;
1a001f80:	fbb0 f0f3 	udiv	r0, r0, r3
1a001f84:	e7ed      	b.n	1a001f62 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001f86:	2302      	movs	r3, #2
1a001f88:	e7fa      	b.n	1a001f80 <Chip_Clock_GetRate+0x38>
1a001f8a:	bf00      	nop
1a001f8c:	40052000 	.word	0x40052000
1a001f90:	40051000 	.word	0x40051000

1a001f94 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001f94:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001f96:	2069      	movs	r0, #105	; 0x69
1a001f98:	f7ff ffd6 	bl	1a001f48 <Chip_Clock_GetRate>
1a001f9c:	4b01      	ldr	r3, [pc, #4]	; (1a001fa4 <SystemCoreClockUpdate+0x10>)
1a001f9e:	6018      	str	r0, [r3, #0]
}
1a001fa0:	bd08      	pop	{r3, pc}
1a001fa2:	bf00      	nop
1a001fa4:	1000058c 	.word	0x1000058c

1a001fa8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001fa8:	4b09      	ldr	r3, [pc, #36]	; (1a001fd0 <Chip_UART_GetIndex+0x28>)
1a001faa:	4298      	cmp	r0, r3
1a001fac:	d009      	beq.n	1a001fc2 <Chip_UART_GetIndex+0x1a>
1a001fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001fb2:	4298      	cmp	r0, r3
1a001fb4:	d007      	beq.n	1a001fc6 <Chip_UART_GetIndex+0x1e>
1a001fb6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001fba:	4298      	cmp	r0, r3
1a001fbc:	d005      	beq.n	1a001fca <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001fbe:	2000      	movs	r0, #0
1a001fc0:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001fc2:	2002      	movs	r0, #2
1a001fc4:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001fc6:	2003      	movs	r0, #3
1a001fc8:	4770      	bx	lr
			return 1;
1a001fca:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001fcc:	4770      	bx	lr
1a001fce:	bf00      	nop
1a001fd0:	400c1000 	.word	0x400c1000

1a001fd4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001fd4:	b530      	push	{r4, r5, lr}
1a001fd6:	b083      	sub	sp, #12
1a001fd8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001fda:	f7ff ffe5 	bl	1a001fa8 <Chip_UART_GetIndex>
1a001fde:	2301      	movs	r3, #1
1a001fe0:	461a      	mov	r2, r3
1a001fe2:	4619      	mov	r1, r3
1a001fe4:	4d0e      	ldr	r5, [pc, #56]	; (1a002020 <Chip_UART_Init+0x4c>)
1a001fe6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001fea:	f7ff ff75 	bl	1a001ed8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001fee:	2307      	movs	r3, #7
1a001ff0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001ff2:	2300      	movs	r3, #0
1a001ff4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001ff6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001ff8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001ffa:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001ffc:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001ffe:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002000:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002002:	4b08      	ldr	r3, [pc, #32]	; (1a002024 <Chip_UART_Init+0x50>)
1a002004:	429c      	cmp	r4, r3
1a002006:	d006      	beq.n	1a002016 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002008:	2303      	movs	r3, #3
1a00200a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00200c:	2310      	movs	r3, #16
1a00200e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002010:	9b01      	ldr	r3, [sp, #4]
}
1a002012:	b003      	add	sp, #12
1a002014:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002016:	2300      	movs	r3, #0
1a002018:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00201a:	69a3      	ldr	r3, [r4, #24]
1a00201c:	9301      	str	r3, [sp, #4]
1a00201e:	e7f3      	b.n	1a002008 <Chip_UART_Init+0x34>
1a002020:	1a002f88 	.word	0x1a002f88
1a002024:	40082000 	.word	0x40082000

1a002028 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002028:	b538      	push	{r3, r4, r5, lr}
1a00202a:	4605      	mov	r5, r0
1a00202c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00202e:	f7ff ffbb 	bl	1a001fa8 <Chip_UART_GetIndex>
1a002032:	4b0c      	ldr	r3, [pc, #48]	; (1a002064 <Chip_UART_SetBaud+0x3c>)
1a002034:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002038:	f7ff ff86 	bl	1a001f48 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00203c:	0123      	lsls	r3, r4, #4
1a00203e:	fbb0 f3f3 	udiv	r3, r0, r3
1a002042:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002044:	68ea      	ldr	r2, [r5, #12]
1a002046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00204a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a00204c:	6029      	str	r1, [r5, #0]
1a00204e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002052:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002054:	68ea      	ldr	r2, [r5, #12]
1a002056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00205a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00205c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002060:	0900      	lsrs	r0, r0, #4
1a002062:	bd38      	pop	{r3, r4, r5, pc}
1a002064:	1a002f80 	.word	0x1a002f80

1a002068 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00206c:	b083      	sub	sp, #12
1a00206e:	4683      	mov	fp, r0
1a002070:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002072:	f7ff ff99 	bl	1a001fa8 <Chip_UART_GetIndex>
1a002076:	4b35      	ldr	r3, [pc, #212]	; (1a00214c <Chip_UART_SetBaudFDR+0xe4>)
1a002078:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00207c:	f7ff ff64 	bl	1a001f48 <Chip_Clock_GetRate>
1a002080:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002082:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002086:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002088:	2300      	movs	r3, #0
1a00208a:	9301      	str	r3, [sp, #4]
1a00208c:	46a2      	mov	sl, r4
1a00208e:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002090:	e02a      	b.n	1a0020e8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002092:	4242      	negs	r2, r0
				div ++;
1a002094:	1c4b      	adds	r3, r1, #1
1a002096:	e017      	b.n	1a0020c8 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002098:	b30a      	cbz	r2, 1a0020de <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00209a:	4617      	mov	r7, r2
			sd = d;
1a00209c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00209e:	46a2      	mov	sl, r4
			sdiv = div;
1a0020a0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0020a2:	3501      	adds	r5, #1
1a0020a4:	42ac      	cmp	r4, r5
1a0020a6:	d91e      	bls.n	1a0020e6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0020a8:	0933      	lsrs	r3, r6, #4
1a0020aa:	0730      	lsls	r0, r6, #28
1a0020ac:	fba4 0100 	umull	r0, r1, r4, r0
1a0020b0:	fb04 1103 	mla	r1, r4, r3, r1
1a0020b4:	1962      	adds	r2, r4, r5
1a0020b6:	fb08 f202 	mul.w	r2, r8, r2
1a0020ba:	2300      	movs	r3, #0
1a0020bc:	f000 f91a 	bl	1a0022f4 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0020c0:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0020c2:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0020c4:	2800      	cmp	r0, #0
1a0020c6:	dbe4      	blt.n	1a002092 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0020c8:	4297      	cmp	r7, r2
1a0020ca:	d3ea      	bcc.n	1a0020a2 <Chip_UART_SetBaudFDR+0x3a>
1a0020cc:	2b00      	cmp	r3, #0
1a0020ce:	d0e8      	beq.n	1a0020a2 <Chip_UART_SetBaudFDR+0x3a>
1a0020d0:	0c19      	lsrs	r1, r3, #16
1a0020d2:	d1e6      	bne.n	1a0020a2 <Chip_UART_SetBaudFDR+0x3a>
1a0020d4:	2b02      	cmp	r3, #2
1a0020d6:	d8df      	bhi.n	1a002098 <Chip_UART_SetBaudFDR+0x30>
1a0020d8:	2d00      	cmp	r5, #0
1a0020da:	d0dd      	beq.n	1a002098 <Chip_UART_SetBaudFDR+0x30>
1a0020dc:	e7e1      	b.n	1a0020a2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0020de:	4617      	mov	r7, r2
			sd = d;
1a0020e0:	9501      	str	r5, [sp, #4]
			sm = m;
1a0020e2:	46a2      	mov	sl, r4
			sdiv = div;
1a0020e4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0020e6:	3401      	adds	r4, #1
1a0020e8:	b11f      	cbz	r7, 1a0020f2 <Chip_UART_SetBaudFDR+0x8a>
1a0020ea:	2c0f      	cmp	r4, #15
1a0020ec:	d801      	bhi.n	1a0020f2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0020ee:	2500      	movs	r5, #0
1a0020f0:	e7d8      	b.n	1a0020a4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0020f2:	f1b9 0f00 	cmp.w	r9, #0
1a0020f6:	d024      	beq.n	1a002142 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0020f8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0020fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002100:	f8cb 300c 	str.w	r3, [fp, #12]
1a002104:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002108:	f8cb 3000 	str.w	r3, [fp]
1a00210c:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002110:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002114:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00211c:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002120:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002124:	b2db      	uxtb	r3, r3
1a002126:	9901      	ldr	r1, [sp, #4]
1a002128:	f001 020f 	and.w	r2, r1, #15
1a00212c:	4313      	orrs	r3, r2
1a00212e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002132:	0933      	lsrs	r3, r6, #4
1a002134:	fb0a f303 	mul.w	r3, sl, r3
1a002138:	448a      	add	sl, r1
1a00213a:	fb09 f90a 	mul.w	r9, r9, sl
1a00213e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002142:	4648      	mov	r0, r9
1a002144:	b003      	add	sp, #12
1a002146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00214a:	bf00      	nop
1a00214c:	1a002f80 	.word	0x1a002f80

1a002150 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002150:	2901      	cmp	r1, #1
1a002152:	d000      	beq.n	1a002156 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002154:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002156:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00215a:	0082      	lsls	r2, r0, #2
1a00215c:	4b03      	ldr	r3, [pc, #12]	; (1a00216c <Chip_I2C_EventHandler+0x1c>)
1a00215e:	4413      	add	r3, r2
1a002160:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a002162:	7d13      	ldrb	r3, [r2, #20]
1a002164:	b2db      	uxtb	r3, r3
1a002166:	2b04      	cmp	r3, #4
1a002168:	d0fb      	beq.n	1a002162 <Chip_I2C_EventHandler+0x12>
1a00216a:	e7f3      	b.n	1a002154 <Chip_I2C_EventHandler+0x4>
1a00216c:	10000098 	.word	0x10000098

1a002170 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002170:	b570      	push	{r4, r5, r6, lr}
1a002172:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002174:	4e06      	ldr	r6, [pc, #24]	; (1a002190 <Chip_I2C_Init+0x20>)
1a002176:	00c4      	lsls	r4, r0, #3
1a002178:	1a22      	subs	r2, r4, r0
1a00217a:	0093      	lsls	r3, r2, #2
1a00217c:	4433      	add	r3, r6
1a00217e:	8898      	ldrh	r0, [r3, #4]
1a002180:	f7ff fec8 	bl	1a001f14 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002184:	1b64      	subs	r4, r4, r5
1a002186:	00a3      	lsls	r3, r4, #2
1a002188:	58f3      	ldr	r3, [r6, r3]
1a00218a:	226c      	movs	r2, #108	; 0x6c
1a00218c:	619a      	str	r2, [r3, #24]
}
1a00218e:	bd70      	pop	{r4, r5, r6, pc}
1a002190:	10000098 	.word	0x10000098

1a002194 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002198:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00219a:	4e0b      	ldr	r6, [pc, #44]	; (1a0021c8 <Chip_I2C_SetClockRate+0x34>)
1a00219c:	00c5      	lsls	r5, r0, #3
1a00219e:	1a2b      	subs	r3, r5, r0
1a0021a0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0021a4:	eb06 0308 	add.w	r3, r6, r8
1a0021a8:	8898      	ldrh	r0, [r3, #4]
1a0021aa:	f7ff fecd 	bl	1a001f48 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0021ae:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0021b2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0021b6:	0842      	lsrs	r2, r0, #1
1a0021b8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0021ba:	f856 3008 	ldr.w	r3, [r6, r8]
1a0021be:	691a      	ldr	r2, [r3, #16]
1a0021c0:	1a80      	subs	r0, r0, r2
1a0021c2:	6158      	str	r0, [r3, #20]
}
1a0021c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0021c8:	10000098 	.word	0x10000098

1a0021cc <ResetISR>:
void ResetISR(void) {
1a0021cc:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a0021ce:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0021d0:	4b18      	ldr	r3, [pc, #96]	; (1a002234 <ResetISR+0x68>)
1a0021d2:	4a19      	ldr	r2, [pc, #100]	; (1a002238 <ResetISR+0x6c>)
1a0021d4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0021d6:	3304      	adds	r3, #4
1a0021d8:	4a18      	ldr	r2, [pc, #96]	; (1a00223c <ResetISR+0x70>)
1a0021da:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0021dc:	2300      	movs	r3, #0
1a0021de:	e005      	b.n	1a0021ec <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0021e0:	4a17      	ldr	r2, [pc, #92]	; (1a002240 <ResetISR+0x74>)
1a0021e2:	f04f 31ff 	mov.w	r1, #4294967295
1a0021e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0021ea:	3301      	adds	r3, #1
1a0021ec:	2b07      	cmp	r3, #7
1a0021ee:	d9f7      	bls.n	1a0021e0 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0021f0:	b662      	cpsie	i
    SystemInit();
1a0021f2:	f7ff f995 	bl	1a001520 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0021f6:	4b13      	ldr	r3, [pc, #76]	; (1a002244 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0021f8:	e007      	b.n	1a00220a <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a0021fa:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0021fe:	689a      	ldr	r2, [r3, #8]
1a002200:	6859      	ldr	r1, [r3, #4]
1a002202:	6818      	ldr	r0, [r3, #0]
1a002204:	f7fd ffc2 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a002208:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00220a:	4a0f      	ldr	r2, [pc, #60]	; (1a002248 <ResetISR+0x7c>)
1a00220c:	4293      	cmp	r3, r2
1a00220e:	d3f4      	bcc.n	1a0021fa <ResetISR+0x2e>
1a002210:	e006      	b.n	1a002220 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a002212:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a002214:	6859      	ldr	r1, [r3, #4]
1a002216:	f854 0b08 	ldr.w	r0, [r4], #8
1a00221a:	f7fd ffc6 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a00221e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a002220:	4a0a      	ldr	r2, [pc, #40]	; (1a00224c <ResetISR+0x80>)
1a002222:	4293      	cmp	r3, r2
1a002224:	d3f5      	bcc.n	1a002212 <ResetISR+0x46>
    __libc_init_array();
1a002226:	f000 f9e5 	bl	1a0025f4 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00222a:	f7ff fa41 	bl	1a0016b0 <Board_Init>
    main();
1a00222e:	f7fe fb9b 	bl	1a000968 <main>
1a002232:	e7fe      	b.n	1a002232 <ResetISR+0x66>
1a002234:	40053100 	.word	0x40053100
1a002238:	10df1000 	.word	0x10df1000
1a00223c:	01dff7ff 	.word	0x01dff7ff
1a002240:	e000e280 	.word	0xe000e280
1a002244:	1a000114 	.word	0x1a000114
1a002248:	1a000150 	.word	0x1a000150
1a00224c:	1a000178 	.word	0x1a000178

1a002250 <_init>:
void _init(void) {}
1a002250:	4770      	bx	lr
1a002252:	Address 0x1a002252 is out of bounds.


1a002254 <__aeabi_ldivmod>:
1a002254:	b97b      	cbnz	r3, 1a002276 <__aeabi_ldivmod+0x22>
1a002256:	b972      	cbnz	r2, 1a002276 <__aeabi_ldivmod+0x22>
1a002258:	2900      	cmp	r1, #0
1a00225a:	bfbe      	ittt	lt
1a00225c:	2000      	movlt	r0, #0
1a00225e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a002262:	e006      	blt.n	1a002272 <__aeabi_ldivmod+0x1e>
1a002264:	bf08      	it	eq
1a002266:	2800      	cmpeq	r0, #0
1a002268:	bf1c      	itt	ne
1a00226a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a00226e:	f04f 30ff 	movne.w	r0, #4294967295
1a002272:	f000 b9bd 	b.w	1a0025f0 <__aeabi_idiv0>
1a002276:	f1ad 0c08 	sub.w	ip, sp, #8
1a00227a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00227e:	2900      	cmp	r1, #0
1a002280:	db09      	blt.n	1a002296 <__aeabi_ldivmod+0x42>
1a002282:	2b00      	cmp	r3, #0
1a002284:	db1a      	blt.n	1a0022bc <__aeabi_ldivmod+0x68>
1a002286:	f000 f84d 	bl	1a002324 <__udivmoddi4>
1a00228a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00228e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002292:	b004      	add	sp, #16
1a002294:	4770      	bx	lr
1a002296:	4240      	negs	r0, r0
1a002298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00229c:	2b00      	cmp	r3, #0
1a00229e:	db1b      	blt.n	1a0022d8 <__aeabi_ldivmod+0x84>
1a0022a0:	f000 f840 	bl	1a002324 <__udivmoddi4>
1a0022a4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0022a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0022ac:	b004      	add	sp, #16
1a0022ae:	4240      	negs	r0, r0
1a0022b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0022b4:	4252      	negs	r2, r2
1a0022b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0022ba:	4770      	bx	lr
1a0022bc:	4252      	negs	r2, r2
1a0022be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0022c2:	f000 f82f 	bl	1a002324 <__udivmoddi4>
1a0022c6:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0022ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0022ce:	b004      	add	sp, #16
1a0022d0:	4240      	negs	r0, r0
1a0022d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0022d6:	4770      	bx	lr
1a0022d8:	4252      	negs	r2, r2
1a0022da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0022de:	f000 f821 	bl	1a002324 <__udivmoddi4>
1a0022e2:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0022e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0022ea:	b004      	add	sp, #16
1a0022ec:	4252      	negs	r2, r2
1a0022ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0022f2:	4770      	bx	lr

1a0022f4 <__aeabi_uldivmod>:
1a0022f4:	b953      	cbnz	r3, 1a00230c <__aeabi_uldivmod+0x18>
1a0022f6:	b94a      	cbnz	r2, 1a00230c <__aeabi_uldivmod+0x18>
1a0022f8:	2900      	cmp	r1, #0
1a0022fa:	bf08      	it	eq
1a0022fc:	2800      	cmpeq	r0, #0
1a0022fe:	bf1c      	itt	ne
1a002300:	f04f 31ff 	movne.w	r1, #4294967295
1a002304:	f04f 30ff 	movne.w	r0, #4294967295
1a002308:	f000 b972 	b.w	1a0025f0 <__aeabi_idiv0>
1a00230c:	f1ad 0c08 	sub.w	ip, sp, #8
1a002310:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002314:	f000 f806 	bl	1a002324 <__udivmoddi4>
1a002318:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00231c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002320:	b004      	add	sp, #16
1a002322:	4770      	bx	lr

1a002324 <__udivmoddi4>:
1a002324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002328:	9e08      	ldr	r6, [sp, #32]
1a00232a:	4604      	mov	r4, r0
1a00232c:	4688      	mov	r8, r1
1a00232e:	2b00      	cmp	r3, #0
1a002330:	d14b      	bne.n	1a0023ca <__udivmoddi4+0xa6>
1a002332:	428a      	cmp	r2, r1
1a002334:	4615      	mov	r5, r2
1a002336:	d967      	bls.n	1a002408 <__udivmoddi4+0xe4>
1a002338:	fab2 f282 	clz	r2, r2
1a00233c:	b14a      	cbz	r2, 1a002352 <__udivmoddi4+0x2e>
1a00233e:	f1c2 0720 	rsb	r7, r2, #32
1a002342:	fa01 f302 	lsl.w	r3, r1, r2
1a002346:	fa20 f707 	lsr.w	r7, r0, r7
1a00234a:	4095      	lsls	r5, r2
1a00234c:	ea47 0803 	orr.w	r8, r7, r3
1a002350:	4094      	lsls	r4, r2
1a002352:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002356:	0c23      	lsrs	r3, r4, #16
1a002358:	fbb8 f7fe 	udiv	r7, r8, lr
1a00235c:	fa1f fc85 	uxth.w	ip, r5
1a002360:	fb0e 8817 	mls	r8, lr, r7, r8
1a002364:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002368:	fb07 f10c 	mul.w	r1, r7, ip
1a00236c:	4299      	cmp	r1, r3
1a00236e:	d909      	bls.n	1a002384 <__udivmoddi4+0x60>
1a002370:	18eb      	adds	r3, r5, r3
1a002372:	f107 30ff 	add.w	r0, r7, #4294967295
1a002376:	f080 811b 	bcs.w	1a0025b0 <__udivmoddi4+0x28c>
1a00237a:	4299      	cmp	r1, r3
1a00237c:	f240 8118 	bls.w	1a0025b0 <__udivmoddi4+0x28c>
1a002380:	3f02      	subs	r7, #2
1a002382:	442b      	add	r3, r5
1a002384:	1a5b      	subs	r3, r3, r1
1a002386:	b2a4      	uxth	r4, r4
1a002388:	fbb3 f0fe 	udiv	r0, r3, lr
1a00238c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002394:	fb00 fc0c 	mul.w	ip, r0, ip
1a002398:	45a4      	cmp	ip, r4
1a00239a:	d909      	bls.n	1a0023b0 <__udivmoddi4+0x8c>
1a00239c:	192c      	adds	r4, r5, r4
1a00239e:	f100 33ff 	add.w	r3, r0, #4294967295
1a0023a2:	f080 8107 	bcs.w	1a0025b4 <__udivmoddi4+0x290>
1a0023a6:	45a4      	cmp	ip, r4
1a0023a8:	f240 8104 	bls.w	1a0025b4 <__udivmoddi4+0x290>
1a0023ac:	3802      	subs	r0, #2
1a0023ae:	442c      	add	r4, r5
1a0023b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0023b4:	eba4 040c 	sub.w	r4, r4, ip
1a0023b8:	2700      	movs	r7, #0
1a0023ba:	b11e      	cbz	r6, 1a0023c4 <__udivmoddi4+0xa0>
1a0023bc:	40d4      	lsrs	r4, r2
1a0023be:	2300      	movs	r3, #0
1a0023c0:	e9c6 4300 	strd	r4, r3, [r6]
1a0023c4:	4639      	mov	r1, r7
1a0023c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0023ca:	428b      	cmp	r3, r1
1a0023cc:	d909      	bls.n	1a0023e2 <__udivmoddi4+0xbe>
1a0023ce:	2e00      	cmp	r6, #0
1a0023d0:	f000 80eb 	beq.w	1a0025aa <__udivmoddi4+0x286>
1a0023d4:	2700      	movs	r7, #0
1a0023d6:	e9c6 0100 	strd	r0, r1, [r6]
1a0023da:	4638      	mov	r0, r7
1a0023dc:	4639      	mov	r1, r7
1a0023de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0023e2:	fab3 f783 	clz	r7, r3
1a0023e6:	2f00      	cmp	r7, #0
1a0023e8:	d147      	bne.n	1a00247a <__udivmoddi4+0x156>
1a0023ea:	428b      	cmp	r3, r1
1a0023ec:	d302      	bcc.n	1a0023f4 <__udivmoddi4+0xd0>
1a0023ee:	4282      	cmp	r2, r0
1a0023f0:	f200 80fa 	bhi.w	1a0025e8 <__udivmoddi4+0x2c4>
1a0023f4:	1a84      	subs	r4, r0, r2
1a0023f6:	eb61 0303 	sbc.w	r3, r1, r3
1a0023fa:	2001      	movs	r0, #1
1a0023fc:	4698      	mov	r8, r3
1a0023fe:	2e00      	cmp	r6, #0
1a002400:	d0e0      	beq.n	1a0023c4 <__udivmoddi4+0xa0>
1a002402:	e9c6 4800 	strd	r4, r8, [r6]
1a002406:	e7dd      	b.n	1a0023c4 <__udivmoddi4+0xa0>
1a002408:	b902      	cbnz	r2, 1a00240c <__udivmoddi4+0xe8>
1a00240a:	deff      	udf	#255	; 0xff
1a00240c:	fab2 f282 	clz	r2, r2
1a002410:	2a00      	cmp	r2, #0
1a002412:	f040 808f 	bne.w	1a002534 <__udivmoddi4+0x210>
1a002416:	1b49      	subs	r1, r1, r5
1a002418:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00241c:	fa1f f885 	uxth.w	r8, r5
1a002420:	2701      	movs	r7, #1
1a002422:	fbb1 fcfe 	udiv	ip, r1, lr
1a002426:	0c23      	lsrs	r3, r4, #16
1a002428:	fb0e 111c 	mls	r1, lr, ip, r1
1a00242c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002430:	fb08 f10c 	mul.w	r1, r8, ip
1a002434:	4299      	cmp	r1, r3
1a002436:	d907      	bls.n	1a002448 <__udivmoddi4+0x124>
1a002438:	18eb      	adds	r3, r5, r3
1a00243a:	f10c 30ff 	add.w	r0, ip, #4294967295
1a00243e:	d202      	bcs.n	1a002446 <__udivmoddi4+0x122>
1a002440:	4299      	cmp	r1, r3
1a002442:	f200 80cd 	bhi.w	1a0025e0 <__udivmoddi4+0x2bc>
1a002446:	4684      	mov	ip, r0
1a002448:	1a59      	subs	r1, r3, r1
1a00244a:	b2a3      	uxth	r3, r4
1a00244c:	fbb1 f0fe 	udiv	r0, r1, lr
1a002450:	fb0e 1410 	mls	r4, lr, r0, r1
1a002454:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002458:	fb08 f800 	mul.w	r8, r8, r0
1a00245c:	45a0      	cmp	r8, r4
1a00245e:	d907      	bls.n	1a002470 <__udivmoddi4+0x14c>
1a002460:	192c      	adds	r4, r5, r4
1a002462:	f100 33ff 	add.w	r3, r0, #4294967295
1a002466:	d202      	bcs.n	1a00246e <__udivmoddi4+0x14a>
1a002468:	45a0      	cmp	r8, r4
1a00246a:	f200 80b6 	bhi.w	1a0025da <__udivmoddi4+0x2b6>
1a00246e:	4618      	mov	r0, r3
1a002470:	eba4 0408 	sub.w	r4, r4, r8
1a002474:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002478:	e79f      	b.n	1a0023ba <__udivmoddi4+0x96>
1a00247a:	f1c7 0c20 	rsb	ip, r7, #32
1a00247e:	40bb      	lsls	r3, r7
1a002480:	fa22 fe0c 	lsr.w	lr, r2, ip
1a002484:	ea4e 0e03 	orr.w	lr, lr, r3
1a002488:	fa01 f407 	lsl.w	r4, r1, r7
1a00248c:	fa20 f50c 	lsr.w	r5, r0, ip
1a002490:	fa21 f30c 	lsr.w	r3, r1, ip
1a002494:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a002498:	4325      	orrs	r5, r4
1a00249a:	fbb3 f9f8 	udiv	r9, r3, r8
1a00249e:	0c2c      	lsrs	r4, r5, #16
1a0024a0:	fb08 3319 	mls	r3, r8, r9, r3
1a0024a4:	fa1f fa8e 	uxth.w	sl, lr
1a0024a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0024ac:	fb09 f40a 	mul.w	r4, r9, sl
1a0024b0:	429c      	cmp	r4, r3
1a0024b2:	fa02 f207 	lsl.w	r2, r2, r7
1a0024b6:	fa00 f107 	lsl.w	r1, r0, r7
1a0024ba:	d90b      	bls.n	1a0024d4 <__udivmoddi4+0x1b0>
1a0024bc:	eb1e 0303 	adds.w	r3, lr, r3
1a0024c0:	f109 30ff 	add.w	r0, r9, #4294967295
1a0024c4:	f080 8087 	bcs.w	1a0025d6 <__udivmoddi4+0x2b2>
1a0024c8:	429c      	cmp	r4, r3
1a0024ca:	f240 8084 	bls.w	1a0025d6 <__udivmoddi4+0x2b2>
1a0024ce:	f1a9 0902 	sub.w	r9, r9, #2
1a0024d2:	4473      	add	r3, lr
1a0024d4:	1b1b      	subs	r3, r3, r4
1a0024d6:	b2ad      	uxth	r5, r5
1a0024d8:	fbb3 f0f8 	udiv	r0, r3, r8
1a0024dc:	fb08 3310 	mls	r3, r8, r0, r3
1a0024e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0024e4:	fb00 fa0a 	mul.w	sl, r0, sl
1a0024e8:	45a2      	cmp	sl, r4
1a0024ea:	d908      	bls.n	1a0024fe <__udivmoddi4+0x1da>
1a0024ec:	eb1e 0404 	adds.w	r4, lr, r4
1a0024f0:	f100 33ff 	add.w	r3, r0, #4294967295
1a0024f4:	d26b      	bcs.n	1a0025ce <__udivmoddi4+0x2aa>
1a0024f6:	45a2      	cmp	sl, r4
1a0024f8:	d969      	bls.n	1a0025ce <__udivmoddi4+0x2aa>
1a0024fa:	3802      	subs	r0, #2
1a0024fc:	4474      	add	r4, lr
1a0024fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002502:	fba0 8902 	umull	r8, r9, r0, r2
1a002506:	eba4 040a 	sub.w	r4, r4, sl
1a00250a:	454c      	cmp	r4, r9
1a00250c:	46c2      	mov	sl, r8
1a00250e:	464b      	mov	r3, r9
1a002510:	d354      	bcc.n	1a0025bc <__udivmoddi4+0x298>
1a002512:	d051      	beq.n	1a0025b8 <__udivmoddi4+0x294>
1a002514:	2e00      	cmp	r6, #0
1a002516:	d069      	beq.n	1a0025ec <__udivmoddi4+0x2c8>
1a002518:	ebb1 050a 	subs.w	r5, r1, sl
1a00251c:	eb64 0403 	sbc.w	r4, r4, r3
1a002520:	fa04 fc0c 	lsl.w	ip, r4, ip
1a002524:	40fd      	lsrs	r5, r7
1a002526:	40fc      	lsrs	r4, r7
1a002528:	ea4c 0505 	orr.w	r5, ip, r5
1a00252c:	e9c6 5400 	strd	r5, r4, [r6]
1a002530:	2700      	movs	r7, #0
1a002532:	e747      	b.n	1a0023c4 <__udivmoddi4+0xa0>
1a002534:	f1c2 0320 	rsb	r3, r2, #32
1a002538:	fa20 f703 	lsr.w	r7, r0, r3
1a00253c:	4095      	lsls	r5, r2
1a00253e:	fa01 f002 	lsl.w	r0, r1, r2
1a002542:	fa21 f303 	lsr.w	r3, r1, r3
1a002546:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00254a:	4338      	orrs	r0, r7
1a00254c:	0c01      	lsrs	r1, r0, #16
1a00254e:	fbb3 f7fe 	udiv	r7, r3, lr
1a002552:	fa1f f885 	uxth.w	r8, r5
1a002556:	fb0e 3317 	mls	r3, lr, r7, r3
1a00255a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00255e:	fb07 f308 	mul.w	r3, r7, r8
1a002562:	428b      	cmp	r3, r1
1a002564:	fa04 f402 	lsl.w	r4, r4, r2
1a002568:	d907      	bls.n	1a00257a <__udivmoddi4+0x256>
1a00256a:	1869      	adds	r1, r5, r1
1a00256c:	f107 3cff 	add.w	ip, r7, #4294967295
1a002570:	d22f      	bcs.n	1a0025d2 <__udivmoddi4+0x2ae>
1a002572:	428b      	cmp	r3, r1
1a002574:	d92d      	bls.n	1a0025d2 <__udivmoddi4+0x2ae>
1a002576:	3f02      	subs	r7, #2
1a002578:	4429      	add	r1, r5
1a00257a:	1acb      	subs	r3, r1, r3
1a00257c:	b281      	uxth	r1, r0
1a00257e:	fbb3 f0fe 	udiv	r0, r3, lr
1a002582:	fb0e 3310 	mls	r3, lr, r0, r3
1a002586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00258a:	fb00 f308 	mul.w	r3, r0, r8
1a00258e:	428b      	cmp	r3, r1
1a002590:	d907      	bls.n	1a0025a2 <__udivmoddi4+0x27e>
1a002592:	1869      	adds	r1, r5, r1
1a002594:	f100 3cff 	add.w	ip, r0, #4294967295
1a002598:	d217      	bcs.n	1a0025ca <__udivmoddi4+0x2a6>
1a00259a:	428b      	cmp	r3, r1
1a00259c:	d915      	bls.n	1a0025ca <__udivmoddi4+0x2a6>
1a00259e:	3802      	subs	r0, #2
1a0025a0:	4429      	add	r1, r5
1a0025a2:	1ac9      	subs	r1, r1, r3
1a0025a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0025a8:	e73b      	b.n	1a002422 <__udivmoddi4+0xfe>
1a0025aa:	4637      	mov	r7, r6
1a0025ac:	4630      	mov	r0, r6
1a0025ae:	e709      	b.n	1a0023c4 <__udivmoddi4+0xa0>
1a0025b0:	4607      	mov	r7, r0
1a0025b2:	e6e7      	b.n	1a002384 <__udivmoddi4+0x60>
1a0025b4:	4618      	mov	r0, r3
1a0025b6:	e6fb      	b.n	1a0023b0 <__udivmoddi4+0x8c>
1a0025b8:	4541      	cmp	r1, r8
1a0025ba:	d2ab      	bcs.n	1a002514 <__udivmoddi4+0x1f0>
1a0025bc:	ebb8 0a02 	subs.w	sl, r8, r2
1a0025c0:	eb69 020e 	sbc.w	r2, r9, lr
1a0025c4:	3801      	subs	r0, #1
1a0025c6:	4613      	mov	r3, r2
1a0025c8:	e7a4      	b.n	1a002514 <__udivmoddi4+0x1f0>
1a0025ca:	4660      	mov	r0, ip
1a0025cc:	e7e9      	b.n	1a0025a2 <__udivmoddi4+0x27e>
1a0025ce:	4618      	mov	r0, r3
1a0025d0:	e795      	b.n	1a0024fe <__udivmoddi4+0x1da>
1a0025d2:	4667      	mov	r7, ip
1a0025d4:	e7d1      	b.n	1a00257a <__udivmoddi4+0x256>
1a0025d6:	4681      	mov	r9, r0
1a0025d8:	e77c      	b.n	1a0024d4 <__udivmoddi4+0x1b0>
1a0025da:	3802      	subs	r0, #2
1a0025dc:	442c      	add	r4, r5
1a0025de:	e747      	b.n	1a002470 <__udivmoddi4+0x14c>
1a0025e0:	f1ac 0c02 	sub.w	ip, ip, #2
1a0025e4:	442b      	add	r3, r5
1a0025e6:	e72f      	b.n	1a002448 <__udivmoddi4+0x124>
1a0025e8:	4638      	mov	r0, r7
1a0025ea:	e708      	b.n	1a0023fe <__udivmoddi4+0xda>
1a0025ec:	4637      	mov	r7, r6
1a0025ee:	e6e9      	b.n	1a0023c4 <__udivmoddi4+0xa0>

1a0025f0 <__aeabi_idiv0>:
1a0025f0:	4770      	bx	lr
1a0025f2:	bf00      	nop

1a0025f4 <__libc_init_array>:
1a0025f4:	b570      	push	{r4, r5, r6, lr}
1a0025f6:	4e0d      	ldr	r6, [pc, #52]	; (1a00262c <__libc_init_array+0x38>)
1a0025f8:	4c0d      	ldr	r4, [pc, #52]	; (1a002630 <__libc_init_array+0x3c>)
1a0025fa:	1ba4      	subs	r4, r4, r6
1a0025fc:	10a4      	asrs	r4, r4, #2
1a0025fe:	2500      	movs	r5, #0
1a002600:	42a5      	cmp	r5, r4
1a002602:	d109      	bne.n	1a002618 <__libc_init_array+0x24>
1a002604:	4e0b      	ldr	r6, [pc, #44]	; (1a002634 <__libc_init_array+0x40>)
1a002606:	4c0c      	ldr	r4, [pc, #48]	; (1a002638 <__libc_init_array+0x44>)
1a002608:	f7ff fe22 	bl	1a002250 <_init>
1a00260c:	1ba4      	subs	r4, r4, r6
1a00260e:	10a4      	asrs	r4, r4, #2
1a002610:	2500      	movs	r5, #0
1a002612:	42a5      	cmp	r5, r4
1a002614:	d105      	bne.n	1a002622 <__libc_init_array+0x2e>
1a002616:	bd70      	pop	{r4, r5, r6, pc}
1a002618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00261c:	4798      	blx	r3
1a00261e:	3501      	adds	r5, #1
1a002620:	e7ee      	b.n	1a002600 <__libc_init_array+0xc>
1a002622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a002626:	4798      	blx	r3
1a002628:	3501      	adds	r5, #1
1a00262a:	e7f2      	b.n	1a002612 <__libc_init_array+0x1e>
1a00262c:	1a002f90 	.word	0x1a002f90
1a002630:	1a002f90 	.word	0x1a002f90
1a002634:	1a002f90 	.word	0x1a002f90
1a002638:	1a002f90 	.word	0x1a002f90

1a00263c <memset>:
1a00263c:	4402      	add	r2, r0
1a00263e:	4603      	mov	r3, r0
1a002640:	4293      	cmp	r3, r2
1a002642:	d100      	bne.n	1a002646 <memset+0xa>
1a002644:	4770      	bx	lr
1a002646:	f803 1b01 	strb.w	r1, [r3], #1
1a00264a:	e7f9      	b.n	1a002640 <memset+0x4>

1a00264c <strcat>:
1a00264c:	b510      	push	{r4, lr}
1a00264e:	4603      	mov	r3, r0
1a002650:	781a      	ldrb	r2, [r3, #0]
1a002652:	1c5c      	adds	r4, r3, #1
1a002654:	b93a      	cbnz	r2, 1a002666 <strcat+0x1a>
1a002656:	3b01      	subs	r3, #1
1a002658:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00265c:	f803 2f01 	strb.w	r2, [r3, #1]!
1a002660:	2a00      	cmp	r2, #0
1a002662:	d1f9      	bne.n	1a002658 <strcat+0xc>
1a002664:	bd10      	pop	{r4, pc}
1a002666:	4623      	mov	r3, r4
1a002668:	e7f2      	b.n	1a002650 <strcat+0x4>

1a00266a <strlen>:
1a00266a:	4603      	mov	r3, r0
1a00266c:	f813 2b01 	ldrb.w	r2, [r3], #1
1a002670:	2a00      	cmp	r2, #0
1a002672:	d1fb      	bne.n	1a00266c <strlen+0x2>
1a002674:	1a18      	subs	r0, r3, r0
1a002676:	3801      	subs	r0, #1
1a002678:	4770      	bx	lr

1a00267a <strstr>:
1a00267a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00267c:	7803      	ldrb	r3, [r0, #0]
1a00267e:	b17b      	cbz	r3, 1a0026a0 <strstr+0x26>
1a002680:	4604      	mov	r4, r0
1a002682:	7823      	ldrb	r3, [r4, #0]
1a002684:	4620      	mov	r0, r4
1a002686:	1c66      	adds	r6, r4, #1
1a002688:	b17b      	cbz	r3, 1a0026aa <strstr+0x30>
1a00268a:	1e4a      	subs	r2, r1, #1
1a00268c:	1e63      	subs	r3, r4, #1
1a00268e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
1a002692:	b14d      	cbz	r5, 1a0026a8 <strstr+0x2e>
1a002694:	f813 7f01 	ldrb.w	r7, [r3, #1]!
1a002698:	42af      	cmp	r7, r5
1a00269a:	4634      	mov	r4, r6
1a00269c:	d0f7      	beq.n	1a00268e <strstr+0x14>
1a00269e:	e7f0      	b.n	1a002682 <strstr+0x8>
1a0026a0:	780b      	ldrb	r3, [r1, #0]
1a0026a2:	2b00      	cmp	r3, #0
1a0026a4:	bf18      	it	ne
1a0026a6:	2000      	movne	r0, #0
1a0026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0026aa:	4618      	mov	r0, r3
1a0026ac:	e7fc      	b.n	1a0026a8 <strstr+0x2e>
1a0026ae:	ffff 3e3e 	vcvt.f32.u32	d19, d30, #1
1a0026b2:	3e3e      	.short	0x3e3e
1a0026b4:	6e6f4320 	.word	0x6e6f4320
1a0026b8:	61746365 	.word	0x61746365
1a0026bc:	206f646e 	.word	0x206f646e
1a0026c0:	73206c61 	.word	0x73206c61
1a0026c4:	69767265 	.word	0x69767265
1a0026c8:	20726f64 	.word	0x20726f64
1a0026cc:	00000022 	.word	0x00000022
1a0026d0:	70202c22 	.word	0x70202c22
1a0026d4:	74726575 	.word	0x74726575
1a0026d8:	0022206f 	.word	0x0022206f
1a0026dc:	3e3e3e3e 	.word	0x3e3e3e3e
1a0026e0:	2b544120 	.word	0x2b544120
1a0026e4:	53504943 	.word	0x53504943
1a0026e8:	54524154 	.word	0x54524154
1a0026ec:	4354223d 	.word	0x4354223d
1a0026f0:	222c2250 	.word	0x222c2250
1a0026f4:	00000000 	.word	0x00000000
1a0026f8:	00002c22 	.word	0x00002c22
1a0026fc:	432b5441 	.word	0x432b5441
1a002700:	54535049 	.word	0x54535049
1a002704:	3d545241 	.word	0x3d545241
1a002708:	50435422 	.word	0x50435422
1a00270c:	00222c22 	.word	0x00222c22
1a002710:	4e4e4f43 	.word	0x4e4e4f43
1a002714:	0d544345 	.word	0x0d544345
1a002718:	4f0a0d0a 	.word	0x4f0a0d0a
1a00271c:	000a0d4b 	.word	0x000a0d4b
1a002720:	3e3e3e3e 	.word	0x3e3e3e3e
1a002724:	20202020 	.word	0x20202020
1a002728:	6f727245 	.word	0x6f727245
1a00272c:	4e203a72 	.word	0x4e203a72
1a002730:	6573206f 	.word	0x6573206f
1a002734:	65757020 	.word	0x65757020
1a002738:	63206564 	.word	0x63206564
1a00273c:	63656e6f 	.word	0x63656e6f
1a002740:	20726174 	.word	0x20726174
1a002744:	73206c61 	.word	0x73206c61
1a002748:	69767265 	.word	0x69767265
1a00274c:	3a726f64 	.word	0x3a726f64
1a002750:	ff002220 	.word	0xff002220
1a002754:	3e3e3e3e 	.word	0x3e3e3e3e
1a002758:	6e6f4320 	.word	0x6e6f4320
1a00275c:	61746365 	.word	0x61746365
1a002760:	206f646e 	.word	0x206f646e
1a002764:	616c2061 	.word	0x616c2061
1a002768:	64657220 	.word	0x64657220
1a00276c:	2d695720 	.word	0x2d695720
1a002770:	203a6946 	.word	0x203a6946
1a002774:	00000022 	.word	0x00000022
1a002778:	432b5441 	.word	0x432b5441
1a00277c:	50414a57 	.word	0x50414a57
1a002780:	0000223d 	.word	0x0000223d
1a002784:	000a0d22 	.word	0x000a0d22
1a002788:	49464957 	.word	0x49464957
1a00278c:	4e4f4320 	.word	0x4e4f4320
1a002790:	5443454e 	.word	0x5443454e
1a002794:	0a0d4445 	.word	0x0a0d4445
1a002798:	49464957 	.word	0x49464957
1a00279c:	544f4720 	.word	0x544f4720
1a0027a0:	0d504920 	.word	0x0d504920
1a0027a4:	4f0a0d0a 	.word	0x4f0a0d0a
1a0027a8:	000a0d4b 	.word	0x000a0d4b
1a0027ac:	49464957 	.word	0x49464957
1a0027b0:	4e4f4320 	.word	0x4e4f4320
1a0027b4:	5443454e 	.word	0x5443454e
1a0027b8:	00004445 	.word	0x00004445
1a0027bc:	3e3e3e3e 	.word	0x3e3e3e3e
1a0027c0:	20202020 	.word	0x20202020
1a0027c4:	6f727245 	.word	0x6f727245
1a0027c8:	4e203a72 	.word	0x4e203a72
1a0027cc:	6573206f 	.word	0x6573206f
1a0027d0:	65757020 	.word	0x65757020
1a0027d4:	63206564 	.word	0x63206564
1a0027d8:	63656e6f 	.word	0x63656e6f
1a0027dc:	20726174 	.word	0x20726174
1a0027e0:	616c2061 	.word	0x616c2061
1a0027e4:	64657220 	.word	0x64657220
1a0027e8:	0022203a 	.word	0x0022203a
1a0027ec:	3e3e3e3e 	.word	0x3e3e3e3e
1a0027f0:	52415520 	.word	0x52415520
1a0027f4:	53555f54 	.word	0x53555f54
1a0027f8:	6f632042 	.word	0x6f632042
1a0027fc:	6769666e 	.word	0x6769666e
1a002800:	64617275 	.word	0x64617275
1a002804:	6f632061 	.word	0x6f632061
1a002808:	73206f6d 	.word	0x73206f6d
1a00280c:	64696c61 	.word	0x64696c61
1a002810:	65642061 	.word	0x65642061
1a002814:	62656420 	.word	0x62656420
1a002818:	002e6775 	.word	0x002e6775
1a00281c:	3e3e3e3e 	.word	0x3e3e3e3e
1a002820:	52415520 	.word	0x52415520
1a002824:	53455f54 	.word	0x53455f54
1a002828:	64282050 	.word	0x64282050
1a00282c:	65646e6f 	.word	0x65646e6f
1a002830:	20657320 	.word	0x20657320
1a002834:	656e6f63 	.word	0x656e6f63
1a002838:	20617463 	.word	0x20617463
1a00283c:	45206c65 	.word	0x45206c65
1a002840:	31305053 	.word	0x31305053
1a002844:	0d202c29 	.word	0x0d202c29
1a002848:	3e3e3e0a 	.word	0x3e3e3e0a
1a00284c:	6f63203e 	.word	0x6f63203e
1a002850:	6769666e 	.word	0x6769666e
1a002854:	64617275 	.word	0x64617275
1a002858:	6f632061 	.word	0x6f632061
1a00285c:	73206f6d 	.word	0x73206f6d
1a002860:	64696c61 	.word	0x64696c61
1a002864:	65642061 	.word	0x65642061
1a002868:	6e6f6320 	.word	0x6e6f6320
1a00286c:	616c6f73 	.word	0x616c6f73
1a002870:	000a0d2e 	.word	0x000a0d2e
1a002874:	3e3e3e3e 	.word	0x3e3e3e3e
1a002878:	65684320 	.word	0x65684320
1a00287c:	61657571 	.word	0x61657571
1a002880:	69732072 	.word	0x69732072
1a002884:	20657320 	.word	0x20657320
1a002888:	75636e65 	.word	0x75636e65
1a00288c:	72746e65 	.word	0x72746e65
1a002890:	6c652061 	.word	0x6c652061
1a002894:	646f6d20 	.word	0x646f6d20
1a002898:	206f6c75 	.word	0x206f6c75
1a00289c:	462d6957 	.word	0x462d6957
1a0028a0:	0a0d2e69 	.word	0x0a0d2e69
1a0028a4:	3e3e3e3e 	.word	0x3e3e3e3e
1a0028a8:	20202020 	.word	0x20202020
1a0028ac:	69766e45 	.word	0x69766e45
1a0028b0:	6f646e61 	.word	0x6f646e61
1a0028b4:	54412220 	.word	0x54412220
1a0028b8:	2e2e2e22 	.word	0x2e2e2e22
1a0028bc:	00000000 	.word	0x00000000
1a0028c0:	0a0d5441 	.word	0x0a0d5441
1a0028c4:	00000000 	.word	0x00000000
1a0028c8:	3e3e3e3e 	.word	0x3e3e3e3e
1a0028cc:	20202020 	.word	0x20202020
1a0028d0:	75646f4d 	.word	0x75646f4d
1a0028d4:	45206f6c 	.word	0x45206f6c
1a0028d8:	31305053 	.word	0x31305053
1a0028dc:	2d695720 	.word	0x2d695720
1a0028e0:	64206946 	.word	0x64206946
1a0028e4:	63657465 	.word	0x63657465
1a0028e8:	6f646174 	.word	0x6f646174
1a0028ec:	000a0d2e 	.word	0x000a0d2e
1a0028f0:	3e3e3e3e 	.word	0x3e3e3e3e
1a0028f4:	20202020 	.word	0x20202020
1a0028f8:	6f727245 	.word	0x6f727245
1a0028fc:	4d203a72 	.word	0x4d203a72
1a002900:	6c75646f 	.word	0x6c75646f
1a002904:	5345206f 	.word	0x5345206f
1a002908:	20313050 	.word	0x20313050
1a00290c:	462d6957 	.word	0x462d6957
1a002910:	6f4e2069 	.word	0x6f4e2069
1a002914:	74656420 	.word	0x74656420
1a002918:	61746365 	.word	0x61746365
1a00291c:	21216f64 	.word	0x21216f64
1a002920:	ff000a0d 	.word	0xff000a0d
1a002924:	3e3e3e3e 	.word	0x3e3e3e3e
1a002928:	766e4520 	.word	0x766e4520
1a00292c:	64206f69 	.word	0x64206f69
1a002930:	736f7461 	.word	0x736f7461
1a002934:	50435420 	.word	0x50435420
1a002938:	2050492f 	.word	0x2050492f
1a00293c:	73206c61 	.word	0x73206c61
1a002940:	69767265 	.word	0x69767265
1a002944:	2e726f64 	.word	0x2e726f64
1a002948:	00002e2e 	.word	0x00002e2e
1a00294c:	3e3e3e3e 	.word	0x3e3e3e3e
1a002950:	2b544120 	.word	0x2b544120
1a002954:	53504943 	.word	0x53504943
1a002958:	3d444e45 	.word	0x3d444e45
1a00295c:	00000000 	.word	0x00000000
1a002960:	432b5441 	.word	0x432b5441
1a002964:	45535049 	.word	0x45535049
1a002968:	003d444e 	.word	0x003d444e
1a00296c:	0a0d0a0d 	.word	0x0a0d0a0d
1a002970:	0a0d4b4f 	.word	0x0a0d4b4f
1a002974:	0000003e 	.word	0x0000003e
1a002978:	444e4553 	.word	0x444e4553
1a00297c:	0d4b4f20 	.word	0x0d4b4f20
1a002980:	0000000a 	.word	0x0000000a
1a002984:	534f4c43 	.word	0x534f4c43
1a002988:	0a0d4445 	.word	0x0a0d4445
1a00298c:	00000000 	.word	0x00000000
1a002990:	3e3e3e3e 	.word	0x3e3e3e3e
1a002994:	72724520 	.word	0x72724520
1a002998:	6120726f 	.word	0x6120726f
1a00299c:	6e65206c 	.word	0x6e65206c
1a0029a0:	72616976 	.word	0x72616976
1a0029a4:	736f6c20 	.word	0x736f6c20
1a0029a8:	74616420 	.word	0x74616420
1a0029ac:	5420736f 	.word	0x5420736f
1a0029b0:	492f5043 	.word	0x492f5043
1a0029b4:	65202c50 	.word	0x65202c50
1a0029b8:	6c65206e 	.word	0x6c65206e
1a0029bc:	766e6520 	.word	0x766e6520
1a0029c0:	64206f69 	.word	0x64206f69
1a0029c4:	73206c65 	.word	0x73206c65
1a0029c8:	6e697274 	.word	0x6e697274
1a0029cc:	00000067 	.word	0x00000067
1a0029d0:	3e3e3e3e 	.word	0x3e3e3e3e
1a0029d4:	74732220 	.word	0x74732220
1a0029d8:	74614472 	.word	0x74614472
1a0029dc:	202c2261 	.word	0x202c2261
1a0029e0:	6e617563 	.word	0x6e617563
1a0029e4:	65206f64 	.word	0x65206f64
1a0029e8:	5345206c 	.word	0x5345206c
1a0029ec:	20313050 	.word	0x20313050
1a0029f0:	656e6f70 	.word	0x656e6f70
1a0029f4:	206c6520 	.word	0x206c6520
1a0029f8:	6d6f7270 	.word	0x6d6f7270
1a0029fc:	3e207470 	.word	0x3e207470
1a002a00:	00000020 	.word	0x00000020
1a002a04:	3e3e3e3e 	.word	0x3e3e3e3e
1a002a08:	6e207920 	.word	0x6e207920
1a002a0c:	6573206f 	.word	0x6573206f
1a002a10:	63657220 	.word	0x63657220
1a002a14:	20656269 	.word	0x20656269
1a002a18:	7220616c 	.word	0x7220616c
1a002a1c:	75707365 	.word	0x75707365
1a002a20:	61747365 	.word	0x61747365
1a002a24:	22207920 	.word	0x22207920
1a002a28:	534f4c43 	.word	0x534f4c43
1a002a2c:	21224445 	.word	0x21224445
1a002a30:	000a0d21 	.word	0x000a0d21
1a002a34:	3e3e3e3e 	.word	0x3e3e3e3e
1a002a38:	6e207920 	.word	0x6e207920
1a002a3c:	6573206f 	.word	0x6573206f
1a002a40:	63657220 	.word	0x63657220
1a002a44:	20656269 	.word	0x20656269
1a002a48:	4e455322 	.word	0x4e455322
1a002a4c:	4b4f2044 	.word	0x4b4f2044
1a002a50:	0d212122 	.word	0x0d212122
1a002a54:	0000000a 	.word	0x0000000a
1a002a58:	3e3e3e3e 	.word	0x3e3e3e3e
1a002a5c:	72724520 	.word	0x72724520
1a002a60:	6120726f 	.word	0x6120726f
1a002a64:	6e65206c 	.word	0x6e65206c
1a002a68:	72616976 	.word	0x72616976
1a002a6c:	736f6c20 	.word	0x736f6c20
1a002a70:	74616420 	.word	0x74616420
1a002a74:	5420736f 	.word	0x5420736f
1a002a78:	492f5043 	.word	0x492f5043
1a002a7c:	65202c50 	.word	0x65202c50
1a002a80:	6f63206e 	.word	0x6f63206e
1a002a84:	646e616d 	.word	0x646e616d
1a002a88:	0000006f 	.word	0x0000006f
1a002a8c:	3e3e3e3e 	.word	0x3e3e3e3e
1a002a90:	54412220 	.word	0x54412220
1a002a94:	5049432b 	.word	0x5049432b
1a002a98:	444e4553 	.word	0x444e4553
1a002a9c:	0d212122 	.word	0x0d212122
1a002aa0:	ffff000a 	.word	0xffff000a
1a002aa4:	3e3e3e3e 	.word	0x3e3e3e3e
1a002aa8:	3d3d3d20 	.word	0x3d3d3d20
1a002aac:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ab0:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ab4:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ab8:	3d3d3d3d 	.word	0x3d3d3d3d
1a002abc:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ac0:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ac4:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ac8:	3d3d3d3d 	.word	0x3d3d3d3d
1a002acc:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ad0:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ad4:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ad8:	3d3d3d3d 	.word	0x3d3d3d3d
1a002adc:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ae0:	3d3d3d3d 	.word	0x3d3d3d3d
1a002ae4:	00000000 	.word	0x00000000
1a002ae8:	3e3e3e3e 	.word	0x3e3e3e3e
1a002aec:	766e4520 	.word	0x766e4520
1a002af0:	20726169 	.word	0x20726169
1a002af4:	6f746164 	.word	0x6f746164
1a002af8:	0022203a 	.word	0x0022203a
1a002afc:	3e0a0d22 	.word	0x3e0a0d22
1a002b00:	203e3e3e 	.word	0x203e3e3e
1a002b04:	73206c61 	.word	0x73206c61
1a002b08:	69767265 	.word	0x69767265
1a002b0c:	20726f64 	.word	0x20726f64
1a002b10:	ffff0022 	.word	0xffff0022
1a002b14:	3e3e3e3e 	.word	0x3e3e3e3e
1a002b18:	6e6f4320 	.word	0x6e6f4320
1a002b1c:	746c7573 	.word	0x746c7573
1a002b20:	6f646e61 	.word	0x6f646e61
1a002b24:	73616c20 	.word	0x73616c20
1a002b28:	64657220 	.word	0x64657220
1a002b2c:	57207365 	.word	0x57207365
1a002b30:	69462d69 	.word	0x69462d69
1a002b34:	73696420 	.word	0x73696420
1a002b38:	696e6f70 	.word	0x696e6f70
1a002b3c:	73656c62 	.word	0x73656c62
1a002b40:	3e0a0d2e 	.word	0x3e0a0d2e
1a002b44:	203e3e3e 	.word	0x203e3e3e
1a002b48:	45202020 	.word	0x45202020
1a002b4c:	6169766e 	.word	0x6169766e
1a002b50:	206f646e 	.word	0x206f646e
1a002b54:	2b544122 	.word	0x2b544122
1a002b58:	414c5743 	.word	0x414c5743
1a002b5c:	2e2e2250 	.word	0x2e2e2250
1a002b60:	0000002e 	.word	0x0000002e
1a002b64:	432b5441 	.word	0x432b5441
1a002b68:	50414c57 	.word	0x50414c57
1a002b6c:	00000a0d 	.word	0x00000a0d
1a002b70:	0d0a0d29 	.word	0x0d0a0d29
1a002b74:	0d4b4f0a 	.word	0x0d4b4f0a
1a002b78:	0000000a 	.word	0x0000000a
1a002b7c:	3e3e3e3e 	.word	0x3e3e3e3e
1a002b80:	20202020 	.word	0x20202020
1a002b84:	6f727245 	.word	0x6f727245
1a002b88:	4e203a72 	.word	0x4e203a72
1a002b8c:	6573206f 	.word	0x6573206f
1a002b90:	636e6520 	.word	0x636e6520
1a002b94:	746e6575 	.word	0x746e6575
1a002b98:	206e6172 	.word	0x206e6172
1a002b9c:	65646572 	.word	0x65646572
1a002ba0:	69642073 	.word	0x69642073
1a002ba4:	6e6f7073 	.word	0x6e6f7073
1a002ba8:	656c6269 	.word	0x656c6269
1a002bac:	0d212173 	.word	0x0d212173
1a002bb0:	ffff000a 	.word	0xffff000a
1a002bb4:	6e696552 	.word	0x6e696552
1a002bb8:	30353661 	.word	0x30353661
1a002bbc:	646f6f57 	.word	0x646f6f57
1a002bc0:	00003f79 	.word	0x00003f79
1a002bc4:	70756843 	.word	0x70756843
1a002bc8:	00616c61 	.word	0x00616c61
1a002bcc:	20544547 	.word	0x20544547
1a002bd0:	746f692f 	.word	0x746f692f
1a002bd4:	7068702e 	.word	0x7068702e
1a002bd8:	6c61763f 	.word	0x6c61763f
1a002bdc:	003d726f 	.word	0x003d726f
1a002be0:	54544820 	.word	0x54544820
1a002be4:	2e312f50 	.word	0x2e312f50
1a002be8:	000a0d31 	.word	0x000a0d31
1a002bec:	74736f48 	.word	0x74736f48
1a002bf0:	7475203a 	.word	0x7475203a
1a002bf4:	7461676e 	.word	0x7461676e
1a002bf8:	79617765 	.word	0x79617765
1a002bfc:	3030302e 	.word	0x3030302e
1a002c00:	68626577 	.word	0x68626577
1a002c04:	6174736f 	.word	0x6174736f
1a002c08:	632e7070 	.word	0x632e7070
1a002c0c:	0a0d6d6f 	.word	0x0a0d6d6f
1a002c10:	00000000 	.word	0x00000000
1a002c14:	6e6e6f43 	.word	0x6e6e6f43
1a002c18:	69746365 	.word	0x69746365
1a002c1c:	203a6e6f 	.word	0x203a6e6f
1a002c20:	736f6c63 	.word	0x736f6c63
1a002c24:	0d0a0d65 	.word	0x0d0a0d65
1a002c28:	0000000a 	.word	0x0000000a
1a002c2c:	676e7475 	.word	0x676e7475
1a002c30:	77657461 	.word	0x77657461
1a002c34:	302e7961 	.word	0x302e7961
1a002c38:	65773030 	.word	0x65773030
1a002c3c:	736f6862 	.word	0x736f6862
1a002c40:	70706174 	.word	0x70706174
1a002c44:	6d6f632e 	.word	0x6d6f632e
1a002c48:	ffffff00 	.word	0xffffff00

1a002c4c <gpioPinsInit>:
1a002c4c:	02000104 00050701 05010d03 04080100     ................
1a002c5c:	02020002 02000304 00000403 04070002     ................
1a002c6c:	030c0300 09050402 05040103 04030208     ................
1a002c7c:	04020305 06040504 0802000c 03000b06     ................
1a002c8c:	00090607 07060503 060f0504 03030004     ................
1a002c9c:	02000404 00050404 06040502 04060200     ................
1a002cac:	0c050408 05040a04 0003010e 14010a00     ................
1a002cbc:	010f0000 0d000012 00001101 0010010c     ................
1a002ccc:	07070300 000f0300 01000001 00000000     ................
1a002cdc:	000a0600 08060603 06100504 04030005     ................
1a002cec:	03000106 04090400 04010d05 010b0000     ................
1a002cfc:	0200000f 00000001 00010104 02010800     ................
1a002d0c:	01090000 09010006 05040002 04010200     ................
1a002d1c:	02020105 02020504 0e00000a 01000b02     ................
1a002d2c:	000c020b 00040c01 04000200 01020001     ................
1a002d3c:	02000204 00030402 03070302 070b0300     ................
1a002d4c:	0c030004 03000507 0006070d 01020e03     ................
1a002d5c:	04010504 06020006 02000504 00040405     ................
1a002d6c:	08040402 040c0504 0d050409 05040a04     ................
1a002d7c:	0005010e ffff0801                       ........

1a002d84 <lpcUarts>:
1a002d84:	40081000 06020406 00180205 40081000     ...@...........@
1a002d94:	09070509 00180706 40082000 00000000     ......... .@....
1a002da4:	00190000 400c1000 07060107 001a0602     .......@........
1a002db4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002dc4:	02020302 001b0204 7778797a 73747576     ........zyxwvuts
1a002dd4:	6f707172 6b6c6d6e 6768696a 63646566     rqponmlkjihgfedc
1a002de4:	38396162 34353637 30313233 34333231     ba98765432101234
1a002df4:	38373635 63626139 67666564 6b6a6968     56789abcdefghijk
1a002e04:	6f6e6d6c 73727170 77767574 007a7978     lmnopqrstuvwxyz.

1a002e14 <ultrasonicSensorsIrqMap>:
1a002e14:	ff020100                                ....

1a002e18 <InitClkStates>:
1a002e18:	01010f01                                ....

1a002e1c <pinmuxing>:
1a002e1c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002e2c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002e3c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002e4c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002e5c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002e6c:	00d50301 00d50401 00160107 00560207     ..............V.
1a002e7c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002e8c:	00570206                                ..W.

1a002e90 <ExtRateIn>:
1a002e90:	00000000                                ....

1a002e94 <GpioButtons>:
1a002e94:	08000400 09010900                       ........

1a002e9c <GpioLeds>:
1a002e9c:	01050005 0e000205 0c010b01              ............

1a002ea8 <GpioPorts>:
1a002ea8:	03030003 0f050403 05031005 07030603     ................
1a002eb8:	ffff0802                                ....

1a002ebc <OscRateIn>:
1a002ebc:	00b71b00                                ....

1a002ec0 <InitClkStates>:
1a002ec0:	00010100 00010909 0001090a 01010701     ................
1a002ed0:	00010902 00010906 0101090c 0001090d     ................
1a002ee0:	0001090e 0001090f 00010910 00010911     ................
1a002ef0:	00010912 00010913 00011114 00011119     ................
1a002f00:	0001111a 0001111b 08040201 0f0f0f03     ................
1a002f10:	000000ff                                ....

1a002f14 <periph_to_base>:
1a002f14:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002f24:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002f34:	000100e0 01000100 01200003 00060120     .......... . ...
1a002f44:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002f54:	01820013 00120182 01a201a2 01c20011     ................
1a002f64:	001001c2 01e201e2 0202000f 000e0202     ................
1a002f74:	02220222 0223000d 001c0223              "."...#.#...

1a002f80 <UART_BClock>:
1a002f80:	01a201c2 01620182                       ......b.

1a002f88 <UART_PClock>:
1a002f88:	00820081 00a200a1                       ........
